
covert.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092a8  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08009368  08009368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800964c  0800964c  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800964c  0800964c  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800964c  0800964c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08009654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000007a4  200000f8  08009748  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  08009748  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b87  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e26  00000000  00000000  00034ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001288  00000000  00000000  00037ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  00038d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b7ea  00000000  00000000  00039e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124f8  00000000  00000000  00055662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5a49  00000000  00000000  00067b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0010d5a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  0010d6a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000f8 	.word	0x200000f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800933c 	.word	0x0800933c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000fc 	.word	0x200000fc
 8000104:	0800933c 	.word	0x0800933c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_lmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46ce      	mov	lr, r9
 8000224:	4647      	mov	r7, r8
 8000226:	0415      	lsls	r5, r2, #16
 8000228:	0c2d      	lsrs	r5, r5, #16
 800022a:	002e      	movs	r6, r5
 800022c:	b580      	push	{r7, lr}
 800022e:	0407      	lsls	r7, r0, #16
 8000230:	0c14      	lsrs	r4, r2, #16
 8000232:	0c3f      	lsrs	r7, r7, #16
 8000234:	4699      	mov	r9, r3
 8000236:	0c03      	lsrs	r3, r0, #16
 8000238:	437e      	muls	r6, r7
 800023a:	435d      	muls	r5, r3
 800023c:	4367      	muls	r7, r4
 800023e:	4363      	muls	r3, r4
 8000240:	197f      	adds	r7, r7, r5
 8000242:	0c34      	lsrs	r4, r6, #16
 8000244:	19e4      	adds	r4, r4, r7
 8000246:	469c      	mov	ip, r3
 8000248:	42a5      	cmp	r5, r4
 800024a:	d903      	bls.n	8000254 <__aeabi_lmul+0x34>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	025b      	lsls	r3, r3, #9
 8000250:	4698      	mov	r8, r3
 8000252:	44c4      	add	ip, r8
 8000254:	464b      	mov	r3, r9
 8000256:	4343      	muls	r3, r0
 8000258:	4351      	muls	r1, r2
 800025a:	0c25      	lsrs	r5, r4, #16
 800025c:	0436      	lsls	r6, r6, #16
 800025e:	4465      	add	r5, ip
 8000260:	0c36      	lsrs	r6, r6, #16
 8000262:	0424      	lsls	r4, r4, #16
 8000264:	19a4      	adds	r4, r4, r6
 8000266:	195b      	adds	r3, r3, r5
 8000268:	1859      	adds	r1, r3, r1
 800026a:	0020      	movs	r0, r4
 800026c:	bc0c      	pop	{r2, r3}
 800026e:	4690      	mov	r8, r2
 8000270:	4699      	mov	r9, r3
 8000272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000274 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000274:	b5b0      	push	{r4, r5, r7, lr}
 8000276:	b0a6      	sub	sp, #152	; 0x98
 8000278:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800027a:	f001 feaf 	bl	8001fdc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800027e:	f000 fa93 	bl	80007a8 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	uint8_t testing = sizeof(Packet);
 8000282:	2386      	movs	r3, #134	; 0x86
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	2210      	movs	r2, #16
 8000288:	701a      	strb	r2, [r3, #0]
	assert(
			sizeof(PublicKeyPacket) == 33 && sizeof(KeyExchangePacket) == 17
					&& sizeof(Packet) == 16);
	// Key writing to flash
	EraseInitStruct.Banks = FLASH_BANK_1;
 800028a:	4be9      	ldr	r3, [pc, #932]	; (8000630 <main+0x3bc>)
 800028c:	2204      	movs	r2, #4
 800028e:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000290:	4be7      	ldr	r3, [pc, #924]	; (8000630 <main+0x3bc>)
 8000292:	2202      	movs	r2, #2
 8000294:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = (FLASH_PAGE_NB - 1);
 8000296:	4be6      	ldr	r3, [pc, #920]	; (8000630 <main+0x3bc>)
 8000298:	223f      	movs	r2, #63	; 0x3f
 800029a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 1;
 800029c:	4be4      	ldr	r3, [pc, #912]	; (8000630 <main+0x3bc>)
 800029e:	2201      	movs	r2, #1
 80002a0:	60da      	str	r2, [r3, #12]

	// Sequence Number storing in flash
	EraseSeqStruct.Banks = FLASH_BANK_1;
 80002a2:	4be4      	ldr	r3, [pc, #912]	; (8000634 <main+0x3c0>)
 80002a4:	2204      	movs	r2, #4
 80002a6:	605a      	str	r2, [r3, #4]
	EraseSeqStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80002a8:	4be2      	ldr	r3, [pc, #904]	; (8000634 <main+0x3c0>)
 80002aa:	2202      	movs	r2, #2
 80002ac:	601a      	str	r2, [r3, #0]
	EraseSeqStruct.Page = (FLASH_PAGE_NB - 2);
 80002ae:	4be1      	ldr	r3, [pc, #900]	; (8000634 <main+0x3c0>)
 80002b0:	223e      	movs	r2, #62	; 0x3e
 80002b2:	609a      	str	r2, [r3, #8]
	EraseSeqStruct.NbPages = 1;
 80002b4:	4bdf      	ldr	r3, [pc, #892]	; (8000634 <main+0x3c0>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]

	recording.enabled = 0;
 80002ba:	4bdf      	ldr	r3, [pc, #892]	; (8000638 <main+0x3c4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	playback.enabled = 0;
 80002c0:	4bde      	ldr	r3, [pc, #888]	; (800063c <main+0x3c8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]

	radio.spi_handle = &hspi1;
 80002c6:	4bde      	ldr	r3, [pc, #888]	; (8000640 <main+0x3cc>)
 80002c8:	4ade      	ldr	r2, [pc, #888]	; (8000644 <main+0x3d0>)
 80002ca:	601a      	str	r2, [r3, #0]

	radio.nss_port = RADIO_CS_GPIO_Port;
 80002cc:	4bdc      	ldr	r3, [pc, #880]	; (8000640 <main+0x3cc>)
 80002ce:	22a0      	movs	r2, #160	; 0xa0
 80002d0:	05d2      	lsls	r2, r2, #23
 80002d2:	605a      	str	r2, [r3, #4]
	radio.nss_pin = RADIO_CS_Pin;
 80002d4:	4bda      	ldr	r3, [pc, #872]	; (8000640 <main+0x3cc>)
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	811a      	strh	r2, [r3, #8]
	radio.nrst_port = RADIO_RESET_GPIO_Port;
 80002da:	4bd9      	ldr	r3, [pc, #868]	; (8000640 <main+0x3cc>)
 80002dc:	4ada      	ldr	r2, [pc, #872]	; (8000648 <main+0x3d4>)
 80002de:	60da      	str	r2, [r3, #12]
	radio.nrst_pin = RADIO_RESET_Pin;
 80002e0:	4bd7      	ldr	r3, [pc, #860]	; (8000640 <main+0x3cc>)
 80002e2:	2210      	movs	r2, #16
 80002e4:	821a      	strh	r2, [r3, #16]
	radio.irq_port = RADIO_INT_GPIO_Port;
 80002e6:	4bd6      	ldr	r3, [pc, #856]	; (8000640 <main+0x3cc>)
 80002e8:	22a0      	movs	r2, #160	; 0xa0
 80002ea:	05d2      	lsls	r2, r2, #23
 80002ec:	615a      	str	r2, [r3, #20]
	radio.irq_pin = RADIO_INT_Pin;
 80002ee:	4bd4      	ldr	r3, [pc, #848]	; (8000640 <main+0x3cc>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	831a      	strh	r2, [r3, #24]

	radio.txDone = true;
 80002f4:	4bd2      	ldr	r3, [pc, #840]	; (8000640 <main+0x3cc>)
 80002f6:	2222      	movs	r2, #34	; 0x22
 80002f8:	2101      	movs	r1, #1
 80002fa:	5499      	strb	r1, [r3, r2]
	radio.rxDoneCallback = readingCallback;
 80002fc:	4bd0      	ldr	r3, [pc, #832]	; (8000640 <main+0x3cc>)
 80002fe:	4ad3      	ldr	r2, [pc, #844]	; (800064c <main+0x3d8>)
 8000300:	625a      	str	r2, [r3, #36]	; 0x24

	aKeys.gotOther = 0;
 8000302:	4bd3      	ldr	r3, [pc, #844]	; (8000650 <main+0x3dc>)
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	2100      	movs	r1, #0
 8000308:	5499      	strb	r1, [r3, r2]
	aKeys.pairing = 0;
 800030a:	4bd1      	ldr	r3, [pc, #836]	; (8000650 <main+0x3dc>)
 800030c:	2282      	movs	r2, #130	; 0x82
 800030e:	2100      	movs	r1, #0
 8000310:	5499      	strb	r1, [r3, r2]
	aKeys.masterSent = 0;
 8000312:	4bcf      	ldr	r3, [pc, #828]	; (8000650 <main+0x3dc>)
 8000314:	2281      	movs	r2, #129	; 0x81
 8000316:	2100      	movs	r1, #0
 8000318:	5499      	strb	r1, [r3, r2]
	aKeys.sharedSecret[0] = 0;
 800031a:	4bcd      	ldr	r3, [pc, #820]	; (8000650 <main+0x3dc>)
 800031c:	2260      	movs	r2, #96	; 0x60
 800031e:	2100      	movs	r1, #0
 8000320:	5499      	strb	r1, [r3, r2]

	outgoing.data = 0;
 8000322:	4bcc      	ldr	r3, [pc, #816]	; (8000654 <main+0x3e0>)
 8000324:	3306      	adds	r3, #6
 8000326:	781a      	ldrb	r2, [r3, #0]
 8000328:	2100      	movs	r1, #0
 800032a:	400a      	ands	r2, r1
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	785a      	ldrb	r2, [r3, #1]
 8000330:	2100      	movs	r1, #0
 8000332:	400a      	ands	r2, r1
 8000334:	705a      	strb	r2, [r3, #1]
 8000336:	789a      	ldrb	r2, [r3, #2]
 8000338:	2100      	movs	r1, #0
 800033a:	400a      	ands	r2, r1
 800033c:	709a      	strb	r2, [r3, #2]
 800033e:	78da      	ldrb	r2, [r3, #3]
 8000340:	2100      	movs	r1, #0
 8000342:	400a      	ands	r2, r1
 8000344:	70da      	strb	r2, [r3, #3]
 8000346:	791a      	ldrb	r2, [r3, #4]
 8000348:	2100      	movs	r1, #0
 800034a:	400a      	ands	r2, r1
 800034c:	711a      	strb	r2, [r3, #4]
 800034e:	795a      	ldrb	r2, [r3, #5]
 8000350:	2100      	movs	r1, #0
 8000352:	400a      	ands	r2, r1
 8000354:	715a      	strb	r2, [r3, #5]
 8000356:	799a      	ldrb	r2, [r3, #6]
 8000358:	2100      	movs	r1, #0
 800035a:	400a      	ands	r2, r1
 800035c:	719a      	strb	r2, [r3, #6]
 800035e:	79da      	ldrb	r2, [r3, #7]
 8000360:	2100      	movs	r1, #0
 8000362:	400a      	ands	r2, r1
 8000364:	71da      	strb	r2, [r3, #7]

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000366:	f000 fc21 	bl	8000bac <MX_GPIO_Init>
	MX_AES_Init();
 800036a:	f000 faa1 	bl	80008b0 <MX_AES_Init>
	MX_RNG_Init();
 800036e:	f000 faf3 	bl	8000958 <MX_RNG_Init>
	MX_CRC_Init();
 8000372:	f000 facd 	bl	8000910 <MX_CRC_Init>
	MX_TIM16_Init();
 8000376:	f000 fbf1 	bl	8000b5c <MX_TIM16_Init>
	MX_TIM1_Init();
 800037a:	f000 fb43 	bl	8000a04 <MX_TIM1_Init>
	MX_SPI1_Init();
 800037e:	f000 fb03 	bl	8000988 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(100);
 8000382:	2064      	movs	r0, #100	; 0x64
 8000384:	f001 feb0 	bl	80020e8 <HAL_Delay>
	if (!rfm95_init(&radio)) {
 8000388:	4bad      	ldr	r3, [pc, #692]	; (8000640 <main+0x3cc>)
 800038a:	0018      	movs	r0, r3
 800038c:	f001 f836 	bl	80013fc <rfm95_init>
 8000390:	0003      	movs	r3, r0
 8000392:	001a      	movs	r2, r3
 8000394:	2301      	movs	r3, #1
 8000396:	4053      	eors	r3, r2
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d00e      	beq.n	80003bc <main+0x148>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	48a9      	ldr	r0, [pc, #676]	; (8000648 <main+0x3d4>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	0019      	movs	r1, r3
 80003a8:	f003 fd37 	bl	8003e1a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	48a9      	ldr	r0, [pc, #676]	; (8000658 <main+0x3e4>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	0019      	movs	r1, r3
 80003b6:	f003 fd30 	bl	8003e1a <HAL_GPIO_WritePin>

		while (1) {
 80003ba:	e7fe      	b.n	80003ba <main+0x146>

		}
	}

	HAL_TIM_Base_Start_IT(&htim16);
 80003bc:	4ba7      	ldr	r3, [pc, #668]	; (800065c <main+0x3e8>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f005 fc30 	bl	8005c24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003c4:	4ba6      	ldr	r3, [pc, #664]	; (8000660 <main+0x3ec>)
 80003c6:	2100      	movs	r1, #0
 80003c8:	0018      	movs	r0, r3
 80003ca:	f005 fcdf 	bl	8005d8c <HAL_TIM_PWM_Start>

	readKeyFromFlash(pKeyAES, &EraseInitStruct);
 80003ce:	4a98      	ldr	r2, [pc, #608]	; (8000630 <main+0x3bc>)
 80003d0:	4ba4      	ldr	r3, [pc, #656]	; (8000664 <main+0x3f0>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f000 ff63 	bl	80012a0 <readKeyFromFlash>
	// We lost our random key or we want a reset?
	if (RESET || pKeyAES[0] == 0 || pKeyAES[0] == UINT32_MAX) {
 80003da:	4ba2      	ldr	r3, [pc, #648]	; (8000664 <main+0x3f0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <main+0x176>
 80003e2:	4ba0      	ldr	r3, [pc, #640]	; (8000664 <main+0x3f0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	d14d      	bne.n	8000486 <main+0x212>
		uint64_t tmp[2];
		for (int i = 0; i < 2; i++) {
 80003ea:	2300      	movs	r3, #0
 80003ec:	228c      	movs	r2, #140	; 0x8c
 80003ee:	18ba      	adds	r2, r7, r2
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e036      	b.n	8000462 <main+0x1ee>
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 80003f4:	2370      	movs	r3, #112	; 0x70
 80003f6:	18fa      	adds	r2, r7, r3
 80003f8:	238c      	movs	r3, #140	; 0x8c
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	00db      	lsls	r3, r3, #3
 8000400:	18d2      	adds	r2, r2, r3
 8000402:	4b99      	ldr	r3, [pc, #612]	; (8000668 <main+0x3f4>)
 8000404:	0011      	movs	r1, r2
 8000406:	0018      	movs	r0, r3
 8000408:	f004 fc65 	bl	8004cd6 <HAL_RNG_GenerateRandomNumber>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <main+0x1a0>
				Error_Handler();
 8000410:	f000 fff0 	bl	80013f4 <Error_Handler>
			tmp[i] <<= 32;
 8000414:	2170      	movs	r1, #112	; 0x70
 8000416:	187a      	adds	r2, r7, r1
 8000418:	208c      	movs	r0, #140	; 0x8c
 800041a:	183b      	adds	r3, r7, r0
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	00db      	lsls	r3, r3, #3
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	0015      	movs	r5, r2
 8000428:	2300      	movs	r3, #0
 800042a:	001c      	movs	r4, r3
 800042c:	187a      	adds	r2, r7, r1
 800042e:	183b      	adds	r3, r7, r0
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	00db      	lsls	r3, r3, #3
 8000434:	18d3      	adds	r3, r2, r3
 8000436:	601c      	str	r4, [r3, #0]
 8000438:	605d      	str	r5, [r3, #4]
			if (HAL_RNG_GenerateRandomNumber(&hrng, &tmp[i]) != HAL_OK)
 800043a:	187a      	adds	r2, r7, r1
 800043c:	183b      	adds	r3, r7, r0
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	00db      	lsls	r3, r3, #3
 8000442:	18d2      	adds	r2, r2, r3
 8000444:	4b88      	ldr	r3, [pc, #544]	; (8000668 <main+0x3f4>)
 8000446:	0011      	movs	r1, r2
 8000448:	0018      	movs	r0, r3
 800044a:	f004 fc44 	bl	8004cd6 <HAL_RNG_GenerateRandomNumber>
 800044e:	1e03      	subs	r3, r0, #0
 8000450:	d001      	beq.n	8000456 <main+0x1e2>
				Error_Handler();
 8000452:	f000 ffcf 	bl	80013f4 <Error_Handler>
		for (int i = 0; i < 2; i++) {
 8000456:	228c      	movs	r2, #140	; 0x8c
 8000458:	18bb      	adds	r3, r7, r2
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	18ba      	adds	r2, r7, r2
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	238c      	movs	r3, #140	; 0x8c
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b01      	cmp	r3, #1
 800046a:	ddc3      	ble.n	80003f4 <main+0x180>
		}
		writeKeyToFlash(tmp, &EraseInitStruct);
 800046c:	4a70      	ldr	r2, [pc, #448]	; (8000630 <main+0x3bc>)
 800046e:	2370      	movs	r3, #112	; 0x70
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f000 ff38 	bl	80012ea <writeKeyToFlash>
		readKeyFromFlash(pKeyAES, &EraseInitStruct);
 800047a:	4a6d      	ldr	r2, [pc, #436]	; (8000630 <main+0x3bc>)
 800047c:	4b79      	ldr	r3, [pc, #484]	; (8000664 <main+0x3f0>)
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 ff0d 	bl	80012a0 <readKeyFromFlash>
	}
	MX_AES_Init();
 8000486:	f000 fa13 	bl	80008b0 <MX_AES_Init>

	// Generate a random sequence number for packets -- assume 2000 is the most packets we'll ever send while devices haven't rebooted
	deviceSeqs[DEVICE_ID] = readSeqFromFlash(&EraseSeqStruct);
 800048a:	4b6a      	ldr	r3, [pc, #424]	; (8000634 <main+0x3c0>)
 800048c:	0018      	movs	r0, r3
 800048e:	f000 ff77 	bl	8001380 <readSeqFromFlash>
 8000492:	0002      	movs	r2, r0
 8000494:	4b75      	ldr	r3, [pc, #468]	; (800066c <main+0x3f8>)
 8000496:	605a      	str	r2, [r3, #4]
	if (NEW_SEQ || deviceSeqs[DEVICE_ID] >= ((UINT32_MAX) >> 1)
 8000498:	4b74      	ldr	r3, [pc, #464]	; (800066c <main+0x3f8>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a74      	ldr	r2, [pc, #464]	; (8000670 <main+0x3fc>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d803      	bhi.n	80004aa <main+0x236>
			|| deviceSeqs[DEVICE_ID] == 0) {
 80004a2:	4b72      	ldr	r3, [pc, #456]	; (800066c <main+0x3f8>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10e      	bne.n	80004c8 <main+0x254>
		uint32_t seq = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	66fb      	str	r3, [r7, #108]	; 0x6c
		HAL_RNG_GenerateRandomNumber(&hrng, &seq);
 80004ae:	236c      	movs	r3, #108	; 0x6c
 80004b0:	18fa      	adds	r2, r7, r3
 80004b2:	4b6d      	ldr	r3, [pc, #436]	; (8000668 <main+0x3f4>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f004 fc0d 	bl	8004cd6 <HAL_RNG_GenerateRandomNumber>
		seq >>= 1;
 80004bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80004be:	085b      	lsrs	r3, r3, #1
 80004c0:	66fb      	str	r3, [r7, #108]	; 0x6c
		deviceSeqs[DEVICE_ID] = seq;
 80004c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80004c4:	4b69      	ldr	r3, [pc, #420]	; (800066c <main+0x3f8>)
 80004c6:	605a      	str	r2, [r3, #4]
	}
	deviceSeqs[DEVICE_ID] += 2000;
 80004c8:	4b68      	ldr	r3, [pc, #416]	; (800066c <main+0x3f8>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	22fa      	movs	r2, #250	; 0xfa
 80004ce:	00d2      	lsls	r2, r2, #3
 80004d0:	189a      	adds	r2, r3, r2
 80004d2:	4b66      	ldr	r3, [pc, #408]	; (800066c <main+0x3f8>)
 80004d4:	605a      	str	r2, [r3, #4]
	writeSeqToFlash(deviceSeqs[DEVICE_ID], &EraseSeqStruct);
 80004d6:	4b65      	ldr	r3, [pc, #404]	; (800066c <main+0x3f8>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	4a56      	ldr	r2, [pc, #344]	; (8000634 <main+0x3c0>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 ff60 	bl	80013a4 <writeSeqToFlash>

	// Might as well generate a public key in advance
	for (int i = 0; i < 8; i++) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	2288      	movs	r2, #136	; 0x88
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	6013      	str	r3, [r2, #0]
 80004ec:	e00f      	b.n	800050e <main+0x29a>
		HAL_RNG_GenerateRandomNumber(&hrng, &aKeys.privateKey[i]);
 80004ee:	2488      	movs	r4, #136	; 0x88
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	009a      	lsls	r2, r3, #2
 80004f6:	4b56      	ldr	r3, [pc, #344]	; (8000650 <main+0x3dc>)
 80004f8:	18d2      	adds	r2, r2, r3
 80004fa:	4b5b      	ldr	r3, [pc, #364]	; (8000668 <main+0x3f4>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f004 fbe9 	bl	8004cd6 <HAL_RNG_GenerateRandomNumber>
	for (int i = 0; i < 8; i++) {
 8000504:	193b      	adds	r3, r7, r4
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	3301      	adds	r3, #1
 800050a:	193a      	adds	r2, r7, r4
 800050c:	6013      	str	r3, [r2, #0]
 800050e:	2388      	movs	r3, #136	; 0x88
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b07      	cmp	r3, #7
 8000516:	ddea      	ble.n	80004ee <main+0x27a>
	}
	C25519keyGen((uint8_t*) aKeys.privateKey, aKeys.publicKey);
 8000518:	4a56      	ldr	r2, [pc, #344]	; (8000674 <main+0x400>)
 800051a:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <main+0x3dc>)
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f007 fefc 	bl	800831c <C25519keyGen>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 8000524:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <main+0x3dc>)
 8000526:	2282      	movs	r2, #130	; 0x82
 8000528:	5c9b      	ldrb	r3, [r3, r2]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d02f      	beq.n	8000590 <main+0x31c>
 8000530:	4b47      	ldr	r3, [pc, #284]	; (8000650 <main+0x3dc>)
 8000532:	2282      	movs	r2, #130	; 0x82
 8000534:	5c9b      	ldrb	r3, [r3, r2]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	1c5a      	adds	r2, r3, #1
 800053a:	b2d0      	uxtb	r0, r2
 800053c:	4a44      	ldr	r2, [pc, #272]	; (8000650 <main+0x3dc>)
 800053e:	2182      	movs	r1, #130	; 0x82
 8000540:	5450      	strb	r0, [r2, r1]
 8000542:	2b05      	cmp	r3, #5
 8000544:	d824      	bhi.n	8000590 <main+0x31c>
			// send our public key in plaintext.
			PublicKeyPacket tmp;
			tmp.preamble = PUBLIC_EXCHANGE_PREAMBLE;
 8000546:	003b      	movs	r3, r7
 8000548:	2255      	movs	r2, #85	; 0x55
 800054a:	701a      	strb	r2, [r3, #0]
			memcpy(tmp.data, aKeys.publicKey, sizeof(tmp.data));
 800054c:	003a      	movs	r2, r7
 800054e:	2101      	movs	r1, #1
 8000550:	4b3f      	ldr	r3, [pc, #252]	; (8000650 <main+0x3dc>)
 8000552:	1850      	adds	r0, r2, r1
 8000554:	3320      	adds	r3, #32
 8000556:	2220      	movs	r2, #32
 8000558:	0019      	movs	r1, r3
 800055a:	f007 ff7f 	bl	800845c <memcpy>
			transmitPackage(&tmp, sizeof(PublicKeyPacket));
 800055e:	003b      	movs	r3, r7
 8000560:	2121      	movs	r1, #33	; 0x21
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f914 	bl	8001790 <transmitPackage>
			// randomize the delay here
			uint32_t randoffset = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	66bb      	str	r3, [r7, #104]	; 0x68
			HAL_RNG_GenerateRandomNumber(&hrng, &randoffset);
 800056c:	2368      	movs	r3, #104	; 0x68
 800056e:	18fa      	adds	r2, r7, r3
 8000570:	4b3d      	ldr	r3, [pc, #244]	; (8000668 <main+0x3f4>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f004 fbae 	bl	8004cd6 <HAL_RNG_GenerateRandomNumber>

			HAL_Delay(1000 + (randoffset & 0x7ff));
 800057a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800057c:	055b      	lsls	r3, r3, #21
 800057e:	0d5b      	lsrs	r3, r3, #21
 8000580:	22fa      	movs	r2, #250	; 0xfa
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	4694      	mov	ip, r2
 8000586:	4463      	add	r3, ip
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fdad 	bl	80020e8 <HAL_Delay>
 800058e:	e7c9      	b.n	8000524 <main+0x2b0>
			continue;
		} else {
			aKeys.pairing = 0;
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <main+0x3dc>)
 8000592:	2282      	movs	r2, #130	; 0x82
 8000594:	2100      	movs	r1, #0
 8000596:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.gotOther) {
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <main+0x3dc>)
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00d      	beq.n	80005c0 <main+0x34c>
			C25519keyExchange(aKeys.sharedSecret, (uint8_t*) aKeys.privateKey,
 80005a4:	4a34      	ldr	r2, [pc, #208]	; (8000678 <main+0x404>)
 80005a6:	492a      	ldr	r1, [pc, #168]	; (8000650 <main+0x3dc>)
 80005a8:	4b34      	ldr	r3, [pc, #208]	; (800067c <main+0x408>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f007 fedc 	bl	8008368 <C25519keyExchange>
					aKeys.otherPublicKey);
//			rfm95_init(&radio);
			aKeys.gotOther = 0;
 80005b0:	4b27      	ldr	r3, [pc, #156]	; (8000650 <main+0x3dc>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	2100      	movs	r1, #0
 80005b6:	5499      	strb	r1, [r3, r2]
			aKeys.masterSent = 1;
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <main+0x3dc>)
 80005ba:	2281      	movs	r2, #129	; 0x81
 80005bc:	2101      	movs	r1, #1
 80005be:	5499      	strb	r1, [r3, r2]
		}

		if (aKeys.masterSent && aKeys.masterSent++ <= 10) {
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <main+0x3dc>)
 80005c2:	2281      	movs	r2, #129	; 0x81
 80005c4:	5c9b      	ldrb	r3, [r3, r2]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d059      	beq.n	8000680 <main+0x40c>
 80005cc:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x3dc>)
 80005ce:	2281      	movs	r2, #129	; 0x81
 80005d0:	5c9b      	ldrb	r3, [r3, r2]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	b2d0      	uxtb	r0, r2
 80005d8:	4a1d      	ldr	r2, [pc, #116]	; (8000650 <main+0x3dc>)
 80005da:	2181      	movs	r1, #129	; 0x81
 80005dc:	5450      	strb	r0, [r2, r1]
 80005de:	2b0a      	cmp	r3, #10
 80005e0:	d84e      	bhi.n	8000680 <main+0x40c>
				memcpy(pKeyAES, oldPkeys, AESKeySize);
				MX_AES_Init();
			} else {
				//we're a slave device and we can just sit and wait for master count to ++
			}
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	481c      	ldr	r0, [pc, #112]	; (8000658 <main+0x3e4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	0019      	movs	r1, r3
 80005ec:	f003 fc15 	bl	8003e1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4814      	ldr	r0, [pc, #80]	; (8000648 <main+0x3d4>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	0019      	movs	r1, r3
 80005fa:	f003 fc0e 	bl	8003e1a <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80005fe:	23fa      	movs	r3, #250	; 0xfa
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fd70 	bl	80020e8 <HAL_Delay>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0x3e4>)
 800060e:	2201      	movs	r2, #1
 8000610:	0019      	movs	r1, r3
 8000612:	f003 fc02 	bl	8003e1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <main+0x3d4>)
 800061c:	2200      	movs	r2, #0
 800061e:	0019      	movs	r1, r3
 8000620:	f003 fbfb 	bl	8003e1a <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000624:	23fa      	movs	r3, #250	; 0xfa
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fd5d 	bl	80020e8 <HAL_Delay>
			continue;
 800062e:	e0b1      	b.n	8000794 <main+0x520>
 8000630:	20000588 	.word	0x20000588
 8000634:	2000071c 	.word	0x2000071c
 8000638:	20000610 	.word	0x20000610
 800063c:	20000578 	.word	0x20000578
 8000640:	20000598 	.word	0x20000598
 8000644:	20000634 	.word	0x20000634
 8000648:	50000800 	.word	0x50000800
 800064c:	080010b9 	.word	0x080010b9
 8000650:	20000698 	.word	0x20000698
 8000654:	20000884 	.word	0x20000884
 8000658:	50000400 	.word	0x50000400
 800065c:	2000072c 	.word	0x2000072c
 8000660:	200005c4 	.word	0x200005c4
 8000664:	20000114 	.word	0x20000114
 8000668:	20000620 	.word	0x20000620
 800066c:	20000124 	.word	0x20000124
 8000670:	7ffffffe 	.word	0x7ffffffe
 8000674:	200006b8 	.word	0x200006b8
 8000678:	200006d8 	.word	0x200006d8
 800067c:	200006f8 	.word	0x200006f8
		} else {
			aKeys.masterSent = 0;
 8000680:	4b45      	ldr	r3, [pc, #276]	; (8000798 <main+0x524>)
 8000682:	2281      	movs	r2, #129	; 0x81
 8000684:	2100      	movs	r1, #0
 8000686:	5499      	strb	r1, [r3, r2]
		}

		if (outgoing.data) {
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <main+0x528>)
 800068a:	7998      	ldrb	r0, [r3, #6]
 800068c:	79dc      	ldrb	r4, [r3, #7]
 800068e:	0224      	lsls	r4, r4, #8
 8000690:	4320      	orrs	r0, r4
 8000692:	7a1c      	ldrb	r4, [r3, #8]
 8000694:	0424      	lsls	r4, r4, #16
 8000696:	4320      	orrs	r0, r4
 8000698:	7a5c      	ldrb	r4, [r3, #9]
 800069a:	0624      	lsls	r4, r4, #24
 800069c:	4320      	orrs	r0, r4
 800069e:	0001      	movs	r1, r0
 80006a0:	7a98      	ldrb	r0, [r3, #10]
 80006a2:	7adc      	ldrb	r4, [r3, #11]
 80006a4:	0224      	lsls	r4, r4, #8
 80006a6:	4320      	orrs	r0, r4
 80006a8:	7b1c      	ldrb	r4, [r3, #12]
 80006aa:	0424      	lsls	r4, r4, #16
 80006ac:	4320      	orrs	r0, r4
 80006ae:	7b5b      	ldrb	r3, [r3, #13]
 80006b0:	061b      	lsls	r3, r3, #24
 80006b2:	4303      	orrs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	000b      	movs	r3, r1
 80006b8:	4313      	orrs	r3, r2
 80006ba:	d061      	beq.n	8000780 <main+0x50c>
			//encrypt and transmit the outgoing packet
			uint32_t tempin[4] = { 0 };
 80006bc:	2434      	movs	r4, #52	; 0x34
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	0018      	movs	r0, r3
 80006c2:	2310      	movs	r3, #16
 80006c4:	001a      	movs	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	f007 fed1 	bl	800846e <memset>
			uint32_t tempout[4] = { 0 };
 80006cc:	2524      	movs	r5, #36	; 0x24
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f007 fec9 	bl	800846e <memset>
			memcpy(tempin, &outgoing, sizeof(Packet));
 80006dc:	492f      	ldr	r1, [pc, #188]	; (800079c <main+0x528>)
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2210      	movs	r2, #16
 80006e2:	0018      	movs	r0, r3
 80006e4:	f007 feba 	bl	800845c <memcpy>
			HAL_CRYP_Encrypt(&hcryp, (uint8_t*) tempin, 16, (uint8_t*) tempout,
 80006e8:	197a      	adds	r2, r7, r5
 80006ea:	1939      	adds	r1, r7, r4
 80006ec:	482c      	ldr	r0, [pc, #176]	; (80007a0 <main+0x52c>)
 80006ee:	2301      	movs	r3, #1
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	0013      	movs	r3, r2
 80006f4:	2210      	movs	r2, #16
 80006f6:	f001 ff17 	bl	8002528 <HAL_CRYP_Encrypt>
					1);
			outgoing.data = 0;
 80006fa:	4b28      	ldr	r3, [pc, #160]	; (800079c <main+0x528>)
 80006fc:	3306      	adds	r3, #6
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	2100      	movs	r1, #0
 8000702:	400a      	ands	r2, r1
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	785a      	ldrb	r2, [r3, #1]
 8000708:	2100      	movs	r1, #0
 800070a:	400a      	ands	r2, r1
 800070c:	705a      	strb	r2, [r3, #1]
 800070e:	789a      	ldrb	r2, [r3, #2]
 8000710:	2100      	movs	r1, #0
 8000712:	400a      	ands	r2, r1
 8000714:	709a      	strb	r2, [r3, #2]
 8000716:	78da      	ldrb	r2, [r3, #3]
 8000718:	2100      	movs	r1, #0
 800071a:	400a      	ands	r2, r1
 800071c:	70da      	strb	r2, [r3, #3]
 800071e:	791a      	ldrb	r2, [r3, #4]
 8000720:	2100      	movs	r1, #0
 8000722:	400a      	ands	r2, r1
 8000724:	711a      	strb	r2, [r3, #4]
 8000726:	795a      	ldrb	r2, [r3, #5]
 8000728:	2100      	movs	r1, #0
 800072a:	400a      	ands	r2, r1
 800072c:	715a      	strb	r2, [r3, #5]
 800072e:	799a      	ldrb	r2, [r3, #6]
 8000730:	2100      	movs	r1, #0
 8000732:	400a      	ands	r2, r1
 8000734:	719a      	strb	r2, [r3, #6]
 8000736:	79da      	ldrb	r2, [r3, #7]
 8000738:	2100      	movs	r1, #0
 800073a:	400a      	ands	r2, r1
 800073c:	71da      	strb	r2, [r3, #7]
			for (uint8_t i = 0; i < 3; i++) {
 800073e:	2387      	movs	r3, #135	; 0x87
 8000740:	18fb      	adds	r3, r7, r3
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
 8000746:	e015      	b.n	8000774 <main+0x500>
				while (!transmitPackage((uint8_t*) tempout, 16)) {
					HAL_Delay(70);
 8000748:	2046      	movs	r0, #70	; 0x46
 800074a:	f001 fccd 	bl	80020e8 <HAL_Delay>
				while (!transmitPackage((uint8_t*) tempout, 16)) {
 800074e:	2324      	movs	r3, #36	; 0x24
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2110      	movs	r1, #16
 8000754:	0018      	movs	r0, r3
 8000756:	f001 f81b 	bl	8001790 <transmitPackage>
 800075a:	0003      	movs	r3, r0
 800075c:	001a      	movs	r2, r3
 800075e:	2301      	movs	r3, #1
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1ef      	bne.n	8000748 <main+0x4d4>
			for (uint8_t i = 0; i < 3; i++) {
 8000768:	2187      	movs	r1, #135	; 0x87
 800076a:	187b      	adds	r3, r7, r1
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	187b      	adds	r3, r7, r1
 8000770:	3201      	adds	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	2387      	movs	r3, #135	; 0x87
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d9e7      	bls.n	800074e <main+0x4da>
 800077e:	e6d1      	b.n	8000524 <main+0x2b0>
				}
			}
			continue;
		}

		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <main+0x530>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f003 fb63 	bl	8003e54 <HAL_GPIO_TogglePin>

//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
		HAL_Delay(250);
 800078e:	20fa      	movs	r0, #250	; 0xfa
 8000790:	f001 fcaa 	bl	80020e8 <HAL_Delay>
		if (aKeys.pairing && aKeys.pairing++ <= 5) {
 8000794:	e6c6      	b.n	8000524 <main+0x2b0>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000698 	.word	0x20000698
 800079c:	20000884 	.word	0x20000884
 80007a0:	20000778 	.word	0x20000778
 80007a4:	50000400 	.word	0x50000400

080007a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b0a1      	sub	sp, #132	; 0x84
 80007ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ae:	2448      	movs	r4, #72	; 0x48
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2338      	movs	r3, #56	; 0x38
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f007 fe58 	bl	800846e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007be:	2338      	movs	r3, #56	; 0x38
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	0018      	movs	r0, r3
 80007c4:	2310      	movs	r3, #16
 80007c6:	001a      	movs	r2, r3
 80007c8:	2100      	movs	r1, #0
 80007ca:	f007 fe50 	bl	800846e <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80007ce:	003b      	movs	r3, r7
 80007d0:	0018      	movs	r0, r3
 80007d2:	2338      	movs	r3, #56	; 0x38
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f007 fe49 	bl	800846e <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f003 fb7d 	bl	8003ee0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2202      	movs	r2, #2
 80007ea:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2280      	movs	r2, #128	; 0x80
 80007f0:	0052      	lsls	r2, r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007f4:	0021      	movs	r1, r4
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2240      	movs	r2, #64	; 0x40
 8000800:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2202      	movs	r2, #2
 8000806:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2202      	movs	r2, #2
 800080c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2208      	movs	r2, #8
 8000818:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	0292      	lsls	r2, r2, #10
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0492      	lsls	r2, r2, #18
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0592      	lsls	r2, r2, #22
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000832:	187b      	adds	r3, r7, r1
 8000834:	0018      	movs	r0, r3
 8000836:	f003 fb93 	bl	8003f60 <HAL_RCC_OscConfig>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9a>
		Error_Handler();
 800083e:	f000 fdd9 	bl	80013f4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000842:	2138      	movs	r1, #56	; 0x38
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2207      	movs	r2, #7
 8000848:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2102      	movs	r1, #2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 fe9d 	bl	80045a0 <HAL_RCC_ClockConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xc6>
		Error_Handler();
 800086a:	f000 fdc3 	bl	80013f4 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG | RCC_PERIPHCLK_TIM1;
 800086e:	003b      	movs	r3, r7
 8000870:	2290      	movs	r2, #144	; 0x90
 8000872:	0392      	lsls	r2, r2, #14
 8000874:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI_DIV8;
 8000876:	003b      	movs	r3, r7
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	04d2      	lsls	r2, r2, #19
 800087c:	621a      	str	r2, [r3, #32]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800087e:	003b      	movs	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000884:	003b      	movs	r3, r7
 8000886:	0018      	movs	r0, r3
 8000888:	f004 f814 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xec>
		Error_Handler();
 8000890:	f000 fdb0 	bl	80013f4 <Error_Handler>
	}
	/** Configure the RNG clock.
	 */
	__HAL_RCC_RNGDIV_CONFIG(RCC_RNGCLK_DIV1);
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SystemClock_Config+0x100>)
 8000896:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <SystemClock_Config+0x100>)
 800089a:	4904      	ldr	r1, [pc, #16]	; (80008ac <SystemClock_Config+0x104>)
 800089c:	400a      	ands	r2, r1
 800089e:	655a      	str	r2, [r3, #84]	; 0x54
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b021      	add	sp, #132	; 0x84
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	cfffffff 	.word	0xcfffffff

080008b0 <MX_AES_Init>:
/**
 * @brief AES Initialization Function
 * @param None
 * @retval None
 */
static void MX_AES_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/* USER CODE END AES_Init 0 */

	/* USER CODE BEGIN AES_Init 1 */

	/* USER CODE END AES_Init 1 */
	hcryp.Instance = AES;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_AES_Init+0x50>)
 80008b6:	4a13      	ldr	r2, [pc, #76]	; (8000904 <MX_AES_Init+0x54>)
 80008b8:	601a      	str	r2, [r3, #0]
	hcryp.Init.DataType = CRYP_DATATYPE_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_AES_Init+0x50>)
 80008bc:	2204      	movs	r2, #4
 80008be:	605a      	str	r2, [r3, #4]
	hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_AES_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	hcryp.Init.pKey = (uint32_t*) pKeyAES;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_AES_Init+0x50>)
 80008c8:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <MX_AES_Init+0x58>)
 80008ca:	60da      	str	r2, [r3, #12]
	hcryp.Init.pInitVect = (uint32_t*) pInitVectAES;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_AES_Init+0x50>)
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <MX_AES_Init+0x5c>)
 80008d0:	611a      	str	r2, [r3, #16]
	hcryp.Init.Algorithm = CRYP_AES_CBC;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_AES_Init+0x50>)
 80008d4:	2220      	movs	r2, #32
 80008d6:	615a      	str	r2, [r3, #20]
	hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_AES_Init+0x50>)
 80008da:	2201      	movs	r2, #1
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
	hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_AES_Init+0x50>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
	hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_AES_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_AES_Init+0x50>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fddd 	bl	80024ac <HAL_CRYP_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_AES_Init+0x4a>
		Error_Handler();
 80008f6:	f000 fd7d 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN AES_Init 2 */
	/* USER CODE END AES_Init 2 */

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000778 	.word	0x20000778
 8000904:	40026000 	.word	0x40026000
 8000908:	20000114 	.word	0x20000114
 800090c:	080094c8 	.word	0x080094c8

08000910 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_CRC_Init+0x40>)
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <MX_CRC_Init+0x44>)
 8000918:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_CRC_Init+0x40>)
 800091c:	2200      	movs	r2, #0
 800091e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_CRC_Init+0x40>)
 8000922:	2200      	movs	r2, #0
 8000924:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_CRC_Init+0x40>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_CRC_Init+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_CRC_Init+0x40>)
 8000934:	2201      	movs	r2, #1
 8000936:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_CRC_Init+0x40>)
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fcea 	bl	8002314 <HAL_CRC_Init>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_CRC_Init+0x38>
		Error_Handler();
 8000944:	f000 fd56 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	20000550 	.word	0x20000550
 8000954:	40023000 	.word	0x40023000

08000958 <MX_RNG_Init>:
/**
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	/* USER CODE END RNG_Init 0 */

	/* USER CODE BEGIN RNG_Init 1 */

	/* USER CODE END RNG_Init 1 */
	hrng.Instance = RNG;
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_RNG_Init+0x28>)
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <MX_RNG_Init+0x2c>)
 8000960:	601a      	str	r2, [r3, #0]
	hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <MX_RNG_Init+0x28>)
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <MX_RNG_Init+0x28>)
 800096a:	0018      	movs	r0, r3
 800096c:	f004 f97c 	bl	8004c68 <HAL_RNG_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_RNG_Init+0x20>
		Error_Handler();
 8000974:	f000 fd3e 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN RNG_Init 2 */

	/* USER CODE END RNG_Init 2 */

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000620 	.word	0x20000620
 8000984:	40025000 	.word	0x40025000

08000988 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_SPI1_Init+0x74>)
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <MX_SPI1_Init+0x78>)
 8000990:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_SPI1_Init+0x74>)
 8000994:	2282      	movs	r2, #130	; 0x82
 8000996:	0052      	lsls	r2, r2, #1
 8000998:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_SPI1_Init+0x74>)
 80009a2:	22e0      	movs	r2, #224	; 0xe0
 80009a4:	00d2      	lsls	r2, r2, #3
 80009a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_SPI1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_SPI1_Init+0x74>)
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0092      	lsls	r2, r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_SPI1_Init+0x74>)
 80009be:	2218      	movs	r2, #24
 80009c0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_SPI1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_SPI1_Init+0x74>)
 80009d6:	2207      	movs	r2, #7
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_SPI1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e2:	2208      	movs	r2, #8
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_SPI1_Init+0x74>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f004 f9cb 	bl	8004d84 <HAL_SPI_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80009f2:	f000 fcff 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000634 	.word	0x20000634
 8000a00:	40013000 	.word	0x40013000

08000a04 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b098      	sub	sp, #96	; 0x60
 8000a08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a0a:	2354      	movs	r3, #84	; 0x54
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	230c      	movs	r3, #12
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f007 fd2a 	bl	800846e <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a1a:	2338      	movs	r3, #56	; 0x38
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	231c      	movs	r3, #28
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f007 fd22 	bl	800846e <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2334      	movs	r3, #52	; 0x34
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f007 fd1b 	bl	800846e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a3a:	4a46      	ldr	r2, [pc, #280]	; (8000b54 <MX_TIM1_Init+0x150>)
 8000a3c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a4c:	4a42      	ldr	r2, [pc, #264]	; (8000b58 <MX_TIM1_Init+0x154>)
 8000a4e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f005 f939 	bl	8005cdc <HAL_TIM_PWM_Init>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x6e>
		Error_Handler();
 8000a6e:	f000 fcc1 	bl	80013f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2154      	movs	r1, #84	; 0x54
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a86:	187a      	adds	r2, r7, r1
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f006 f817 	bl	8006ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	1e03      	subs	r3, r0, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 8000a96:	f000 fcad 	bl	80013f4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2138      	movs	r1, #56	; 0x38
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2260      	movs	r2, #96	; 0x60
 8000aa0:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000ac6:	1879      	adds	r1, r7, r1
 8000ac8:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f005 fb79 	bl	80061c4 <HAL_TIM_PWM_ConfigChannel>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000ad6:	f000 fc8d 	bl	80013f4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0192      	lsls	r2, r2, #6
 8000afe:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2280      	movs	r2, #128	; 0x80
 8000b16:	0492      	lsls	r2, r2, #18
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000b2c:	1d3a      	adds	r2, r7, #4
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f006 f832 	bl	8006b9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x13c>
			!= HAL_OK) {
		Error_Handler();
 8000b3c:	f000 fc5a 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <MX_TIM1_Init+0x14c>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 f8de 	bl	8001d04 <HAL_TIM_MspPostInit>

}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b018      	add	sp, #96	; 0x60
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200005c4 	.word	0x200005c4
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	0000ffff 	.word	0x0000ffff

08000b5c <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <MX_TIM16_Init+0x48>)
 8000b64:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 64;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 25000;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b74:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <MX_TIM16_Init+0x4c>)
 8000b76:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <MX_TIM16_Init+0x44>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f004 fff1 	bl	8005b74 <HAL_TIM_Base_Init>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000b96:	f000 fc2d 	bl	80013f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	2000072c 	.word	0x2000072c
 8000ba4:	40014400 	.word	0x40014400
 8000ba8:	000061a8 	.word	0x000061a8

08000bac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bb2:	240c      	movs	r4, #12
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2314      	movs	r3, #20
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f007 fc56 	bl	800846e <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b5e      	ldr	r3, [pc, #376]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000be0:	2104      	movs	r1, #4
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b56      	ldr	r3, [pc, #344]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2204      	movs	r2, #4
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf6:	4b52      	ldr	r3, [pc, #328]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <MX_GPIO_Init+0x194>)
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2202      	movs	r2, #2
 8000c04:	4013      	ands	r3, r2
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RADIO_CS_GPIO_Port, RADIO_CS_Pin, GPIO_PIN_RESET);
 8000c0a:	23a0      	movs	r3, #160	; 0xa0
 8000c0c:	05db      	lsls	r3, r3, #23
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f901 	bl	8003e1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, RADIO_RESET_Pin | LED2_Pin, GPIO_PIN_RESET);
 8000c18:	2382      	movs	r3, #130	; 0x82
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4849      	ldr	r0, [pc, #292]	; (8000d44 <MX_GPIO_Init+0x198>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0019      	movs	r1, r3
 8000c22:	f003 f8fa 	bl	8003e1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	4847      	ldr	r0, [pc, #284]	; (8000d48 <MX_GPIO_Init+0x19c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	0019      	movs	r1, r3
 8000c30:	f003 f8f3 	bl	8003e1a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : RADIO_INT_Pin */
	GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <MX_GPIO_Init+0x1a0>)
 8000c3e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2202      	movs	r2, #2
 8000c44:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8000c46:	193a      	adds	r2, r7, r4
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f002 ff62 	bl	8003b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : RADIO_CS_Pin */
	GPIO_InitStruct.Pin = RADIO_CS_Pin;
 8000c54:	0021      	movs	r1, r4
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2201      	movs	r2, #1
 8000c66:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(RADIO_CS_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	000c      	movs	r4, r1
 8000c70:	187a      	adds	r2, r7, r1
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f002 ff4d 	bl	8003b18 <HAL_GPIO_Init>

	/*Configure GPIO pins : RADIO_RESET_Pin LED2_Pin */
	GPIO_InitStruct.Pin = RADIO_RESET_Pin | LED2_Pin;
 8000c7e:	0021      	movs	r1, r4
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2282      	movs	r2, #130	; 0x82
 8000c84:	00d2      	lsls	r2, r2, #3
 8000c86:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	4a29      	ldr	r2, [pc, #164]	; (8000d44 <MX_GPIO_Init+0x198>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f002 ff38 	bl	8003b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : PAIR_Pin */
	GPIO_InitStruct.Pin = PAIR_Pin;
 8000ca8:	0021      	movs	r1, r4
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0192      	lsls	r2, r2, #6
 8000cb0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <MX_GPIO_Init+0x1a4>)
 8000cb6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2201      	movs	r2, #1
 8000cbc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(PAIR_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	000c      	movs	r4, r1
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <MX_GPIO_Init+0x19c>)
 8000cc4:	0019      	movs	r1, r3
 8000cc6:	0010      	movs	r0, r2
 8000cc8:	f002 ff26 	bl	8003b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : VIBE_BUTTON_Pin */
	GPIO_InitStruct.Pin = VIBE_BUTTON_Pin;
 8000ccc:	0021      	movs	r1, r4
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <MX_GPIO_Init+0x1a8>)
 8000cda:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2201      	movs	r2, #1
 8000ce0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(VIBE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	000c      	movs	r4, r1
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <MX_GPIO_Init+0x19c>)
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0010      	movs	r0, r2
 8000cec:	f002 ff14 	bl	8003b18 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED1_Pin */
	GPIO_InitStruct.Pin = LED1_Pin;
 8000cf0:	0021      	movs	r1, r4
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <MX_GPIO_Init+0x19c>)
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f002 ff00 	bl	8003b18 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f001 fac7 	bl	80022b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000d22:	2005      	movs	r0, #5
 8000d24:	f001 fad9 	bl	80022da <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2007      	movs	r0, #7
 8000d2e:	f001 fabf 	bl	80022b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f001 fad1 	bl	80022da <HAL_NVIC_EnableIRQ>

}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b009      	add	sp, #36	; 0x24
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	40021000 	.word	0x40021000
 8000d44:	50000800 	.word	0x50000800
 8000d48:	50000400 	.word	0x50000400
 8000d4c:	10110000 	.word	0x10110000
 8000d50:	10210000 	.word	0x10210000
 8000d54:	10310000 	.word	0x10310000

08000d58 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	801a      	strh	r2, [r3, #0]
//	if (GPIO_Pin == VIBE_BUTTON_Pin) {
//		TIM1->CCR1 = (DUTY_CYCLE_ON * UINT16_MAX) / 10;
//		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
//	}

	if (recording.enabled || aKeys.pairing) {
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d122      	bne.n	8000db4 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8000d70:	2282      	movs	r2, #130	; 0x82
 8000d72:	5c9b      	ldrb	r3, [r3, r2]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d11c      	bne.n	8000db4 <HAL_GPIO_EXTI_Falling_Callback+0x5c>
		return;
	}
	if (GPIO_Pin == PAIR_Pin) {
 8000d7a:	1dbb      	adds	r3, r7, #6
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	019b      	lsls	r3, r3, #6
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d104      	bne.n	8000d90 <HAL_GPIO_EXTI_Falling_Callback+0x38>
		// in actual pairing
		aKeys.pairing = 1;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8000d88:	2282      	movs	r2, #130	; 0x82
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	5499      	strb	r1, [r3, r2]
 8000d8e:	e012      	b.n	8000db6 <HAL_GPIO_EXTI_Falling_Callback+0x5e>

	} else if (GPIO_Pin == VIBE_BUTTON_Pin) {
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	881a      	ldrh	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d10c      	bne.n	8000db6 <HAL_GPIO_EXTI_Falling_Callback+0x5e>
		// on vibe button:
		recording.enabled = 1;
 8000d9c:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
		recording.count = 1;
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	705a      	strb	r2, [r3, #1]
		recording.data = 1;
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8000daa:	2301      	movs	r3, #1
 8000dac:	2400      	movs	r4, #0
 8000dae:	6093      	str	r3, [r2, #8]
 8000db0:	60d4      	str	r4, [r2, #12]
 8000db2:	e000      	b.n	8000db6 <HAL_GPIO_EXTI_Falling_Callback+0x5e>
		return;
 8000db4:	46c0      	nop			; (mov r8, r8)
	}
}
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b003      	add	sp, #12
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	20000610 	.word	0x20000610
 8000dc0:	20000698 	.word	0x20000698

08000dc4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	0002      	movs	r2, r0
 8000dcc:	1dbb      	adds	r3, r7, #6
 8000dce:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == RADIO_INT_Pin) {
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_GPIO_EXTI_Rising_Callback+0x18>
		rfm95_handleInterrupt();
 8000dd8:	f000 fd5c 	bl	8001894 <rfm95_handleInterrupt>
//	To enable instant replay
//	if (GPIO_Pin == VIBE_BUTTON_Pin) {
//		TIM1->CCR1 = 0;
//		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//	}
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	if (aKeys.pairing) {
 8000dec:	4ba8      	ldr	r3, [pc, #672]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000dee:	2282      	movs	r2, #130	; 0x82
 8000df0:	5c9b      	ldrb	r3, [r3, r2]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4aa5      	ldr	r2, [pc, #660]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f003 f827 	bl	8003e54 <HAL_GPIO_TogglePin>
	}
//	if (aKeys.masterSent) {
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	}

	if (htim == &htim16 && (recording.enabled || playback.enabled)) {
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	4ba3      	ldr	r3, [pc, #652]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d000      	beq.n	8000e10 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000e0e:	e13b      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 8000e10:	4ba2      	ldr	r3, [pc, #648]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d105      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000e1a:	4ba1      	ldr	r3, [pc, #644]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d100      	bne.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x42>
 8000e24:	e130      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x2a4>

		if (playback.enabled) {
 8000e26:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d04c      	beq.n	8000eca <HAL_TIM_PeriodElapsedCallback+0xe6>
			uint64_t shifted = (playback.data >> (playback.count++));
 8000e30:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e32:	68dc      	ldr	r4, [r3, #12]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e38:	7852      	ldrb	r2, [r2, #1]
 8000e3a:	1c51      	adds	r1, r2, #1
 8000e3c:	b2c8      	uxtb	r0, r1
 8000e3e:	4998      	ldr	r1, [pc, #608]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000e40:	7048      	strb	r0, [r1, #1]
 8000e42:	0011      	movs	r1, r2
 8000e44:	3920      	subs	r1, #32
 8000e46:	2900      	cmp	r1, #0
 8000e48:	db04      	blt.n	8000e54 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000e4a:	0020      	movs	r0, r4
 8000e4c:	40c8      	lsrs	r0, r1
 8000e4e:	0001      	movs	r1, r0
 8000e50:	6239      	str	r1, [r7, #32]
 8000e52:	e008      	b.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x82>
 8000e54:	2120      	movs	r1, #32
 8000e56:	1a89      	subs	r1, r1, r2
 8000e58:	0020      	movs	r0, r4
 8000e5a:	4088      	lsls	r0, r1
 8000e5c:	0001      	movs	r1, r0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	40d0      	lsrs	r0, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	6239      	str	r1, [r7, #32]
 8000e66:	0023      	movs	r3, r4
 8000e68:	40d3      	lsrs	r3, r2
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
			uint8_t state = shifted & 1;
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	201f      	movs	r0, #31
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	2101      	movs	r1, #1
 8000e78:	400a      	ands	r2, r1
 8000e7a:	701a      	strb	r2, [r3, #0]

			TIM1->CCR1 = state ? (DUTY_CYCLE_ON * UINT16_MAX) / 10 : 0;
 8000e7c:	183b      	adds	r3, r7, r0
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8000e84:	4a87      	ldr	r2, [pc, #540]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8000e86:	e000      	b.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4b87      	ldr	r3, [pc, #540]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000e8c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,
 8000e8e:	231f      	movs	r3, #31
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	1e5a      	subs	r2, r3, #1
 8000e96:	4193      	sbcs	r3, r2
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	487c      	ldr	r0, [pc, #496]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f002 ffb9 	bl	8003e1a <HAL_GPIO_WritePin>
					(state ? GPIO_PIN_SET : GPIO_PIN_RESET));

			if (playback.count >= sizeof(playback.data) * 8) {
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	2b3f      	cmp	r3, #63	; 0x3f
 8000eae:	d90c      	bls.n	8000eca <HAL_TIM_PeriodElapsedCallback+0xe6>
				playback.enabled = 0;
 8000eb0:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	4876      	ldr	r0, [pc, #472]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	f002 ffab 	bl	8003e1a <HAL_GPIO_WritePin>
				TIM1->CCR1 = 0;
 8000ec4:	4b78      	ldr	r3, [pc, #480]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
			}
		}

		if (recording.enabled) {
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d100      	bne.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8000ed4:	e0d8      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x2a4>
			uint64_t read = (
					HAL_GPIO_ReadPin(VIBE_BUTTON_GPIO_Port, VIBE_BUTTON_Pin)
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4a74      	ldr	r2, [pc, #464]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8000edc:	0019      	movs	r1, r3
 8000ede:	0010      	movs	r0, r2
 8000ee0:	f002 ff7e 	bl	8003de0 <HAL_GPIO_ReadPin>
 8000ee4:	0003      	movs	r3, r0
							== GPIO_PIN_RESET ? 1 : 0);
 8000ee6:	425a      	negs	r2, r3
 8000ee8:	4153      	adcs	r3, r2
 8000eea:	b2db      	uxtb	r3, r3
			uint64_t read = (
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
			uint64_t state = read << (recording.count++);
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	b2d1      	uxtb	r1, r2
 8000efa:	4a68      	ldr	r2, [pc, #416]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000efc:	7051      	strb	r1, [r2, #1]
 8000efe:	001a      	movs	r2, r3
 8000f00:	3a20      	subs	r2, #32
 8000f02:	2a00      	cmp	r2, #0
 8000f04:	db04      	blt.n	8000f10 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	60fa      	str	r2, [r7, #12]
 8000f0e:	e008      	b.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x13e>
 8000f10:	2220      	movs	r2, #32
 8000f12:	1ad2      	subs	r2, r2, r3
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	40d1      	lsrs	r1, r2
 8000f18:	000a      	movs	r2, r1
 8000f1a:	6979      	ldr	r1, [r7, #20]
 8000f1c:	4099      	lsls	r1, r3
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	60fa      	str	r2, [r7, #12]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
			recording.data |= state;
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f2c:	68dc      	ldr	r4, [r3, #12]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	0015      	movs	r5, r2
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4322      	orrs	r2, r4
 8000f3a:	0016      	movs	r6, r2
 8000f3c:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f3e:	609d      	str	r5, [r3, #8]
 8000f40:	60de      	str	r6, [r3, #12]
			if (recording.count >= sizeof(recording.data) * 8) {
 8000f42:	4b56      	ldr	r3, [pc, #344]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000f44:	785b      	ldrb	r3, [r3, #1]
 8000f46:	2b3f      	cmp	r3, #63	; 0x3f
 8000f48:	d800      	bhi.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x168>
 8000f4a:	e09d      	b.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x2a4>
				// packet should be formed & sent here

				outgoing.deviceID = DEVICE_ID;
 8000f4c:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	705a      	strb	r2, [r3, #1]
				outgoing.preamble = VIBE_PREAMBLE;
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000f54:	22f0      	movs	r2, #240	; 0xf0
 8000f56:	701a      	strb	r2, [r3, #0]
				outgoing.sequenceNumber = ++deviceSeqs[DEVICE_ID];
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	4b55      	ldr	r3, [pc, #340]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000f68:	3302      	adds	r3, #2
 8000f6a:	21ff      	movs	r1, #255	; 0xff
 8000f6c:	4011      	ands	r1, r2
 8000f6e:	000c      	movs	r4, r1
 8000f70:	7819      	ldrb	r1, [r3, #0]
 8000f72:	2000      	movs	r0, #0
 8000f74:	4001      	ands	r1, r0
 8000f76:	1c08      	adds	r0, r1, #0
 8000f78:	1c21      	adds	r1, r4, #0
 8000f7a:	4301      	orrs	r1, r0
 8000f7c:	7019      	strb	r1, [r3, #0]
 8000f7e:	0a11      	lsrs	r1, r2, #8
 8000f80:	20ff      	movs	r0, #255	; 0xff
 8000f82:	4001      	ands	r1, r0
 8000f84:	000c      	movs	r4, r1
 8000f86:	7859      	ldrb	r1, [r3, #1]
 8000f88:	2000      	movs	r0, #0
 8000f8a:	4001      	ands	r1, r0
 8000f8c:	1c08      	adds	r0, r1, #0
 8000f8e:	1c21      	adds	r1, r4, #0
 8000f90:	4301      	orrs	r1, r0
 8000f92:	7059      	strb	r1, [r3, #1]
 8000f94:	0c11      	lsrs	r1, r2, #16
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	4001      	ands	r1, r0
 8000f9a:	000c      	movs	r4, r1
 8000f9c:	7899      	ldrb	r1, [r3, #2]
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	4001      	ands	r1, r0
 8000fa2:	1c08      	adds	r0, r1, #0
 8000fa4:	1c21      	adds	r1, r4, #0
 8000fa6:	4301      	orrs	r1, r0
 8000fa8:	7099      	strb	r1, [r3, #2]
 8000faa:	0e10      	lsrs	r0, r2, #24
 8000fac:	78da      	ldrb	r2, [r3, #3]
 8000fae:	2100      	movs	r1, #0
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	1c11      	adds	r1, r2, #0
 8000fb4:	1c02      	adds	r2, r0, #0
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	70da      	strb	r2, [r3, #3]
				outgoing.data = recording.data;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8000fbc:	6899      	ldr	r1, [r3, #8]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8000fc2:	3306      	adds	r3, #6
 8000fc4:	20ff      	movs	r0, #255	; 0xff
 8000fc6:	4008      	ands	r0, r1
 8000fc8:	0005      	movs	r5, r0
 8000fca:	7818      	ldrb	r0, [r3, #0]
 8000fcc:	2400      	movs	r4, #0
 8000fce:	4020      	ands	r0, r4
 8000fd0:	1c04      	adds	r4, r0, #0
 8000fd2:	1c28      	adds	r0, r5, #0
 8000fd4:	4320      	orrs	r0, r4
 8000fd6:	7018      	strb	r0, [r3, #0]
 8000fd8:	0a08      	lsrs	r0, r1, #8
 8000fda:	24ff      	movs	r4, #255	; 0xff
 8000fdc:	4020      	ands	r0, r4
 8000fde:	0005      	movs	r5, r0
 8000fe0:	7858      	ldrb	r0, [r3, #1]
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	4020      	ands	r0, r4
 8000fe6:	1c04      	adds	r4, r0, #0
 8000fe8:	1c28      	adds	r0, r5, #0
 8000fea:	4320      	orrs	r0, r4
 8000fec:	7058      	strb	r0, [r3, #1]
 8000fee:	0c08      	lsrs	r0, r1, #16
 8000ff0:	24ff      	movs	r4, #255	; 0xff
 8000ff2:	4020      	ands	r0, r4
 8000ff4:	0005      	movs	r5, r0
 8000ff6:	7898      	ldrb	r0, [r3, #2]
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	4020      	ands	r0, r4
 8000ffc:	1c04      	adds	r4, r0, #0
 8000ffe:	1c28      	adds	r0, r5, #0
 8001000:	4320      	orrs	r0, r4
 8001002:	7098      	strb	r0, [r3, #2]
 8001004:	0e0d      	lsrs	r5, r1, #24
 8001006:	78d8      	ldrb	r0, [r3, #3]
 8001008:	2400      	movs	r4, #0
 800100a:	4020      	ands	r0, r4
 800100c:	1c04      	adds	r4, r0, #0
 800100e:	1c28      	adds	r0, r5, #0
 8001010:	4320      	orrs	r0, r4
 8001012:	70d8      	strb	r0, [r3, #3]
 8001014:	20ff      	movs	r0, #255	; 0xff
 8001016:	4010      	ands	r0, r2
 8001018:	0005      	movs	r5, r0
 800101a:	7918      	ldrb	r0, [r3, #4]
 800101c:	2400      	movs	r4, #0
 800101e:	4020      	ands	r0, r4
 8001020:	1c04      	adds	r4, r0, #0
 8001022:	1c28      	adds	r0, r5, #0
 8001024:	4320      	orrs	r0, r4
 8001026:	7118      	strb	r0, [r3, #4]
 8001028:	0a10      	lsrs	r0, r2, #8
 800102a:	24ff      	movs	r4, #255	; 0xff
 800102c:	4020      	ands	r0, r4
 800102e:	0005      	movs	r5, r0
 8001030:	7958      	ldrb	r0, [r3, #5]
 8001032:	2400      	movs	r4, #0
 8001034:	4020      	ands	r0, r4
 8001036:	1c04      	adds	r4, r0, #0
 8001038:	1c28      	adds	r0, r5, #0
 800103a:	4320      	orrs	r0, r4
 800103c:	7158      	strb	r0, [r3, #5]
 800103e:	0c10      	lsrs	r0, r2, #16
 8001040:	24ff      	movs	r4, #255	; 0xff
 8001042:	4020      	ands	r0, r4
 8001044:	0005      	movs	r5, r0
 8001046:	7998      	ldrb	r0, [r3, #6]
 8001048:	2400      	movs	r4, #0
 800104a:	4020      	ands	r0, r4
 800104c:	1c04      	adds	r4, r0, #0
 800104e:	1c28      	adds	r0, r5, #0
 8001050:	4320      	orrs	r0, r4
 8001052:	7198      	strb	r0, [r3, #6]
 8001054:	0e10      	lsrs	r0, r2, #24
 8001056:	79da      	ldrb	r2, [r3, #7]
 8001058:	2100      	movs	r1, #0
 800105a:	400a      	ands	r2, r1
 800105c:	1c11      	adds	r1, r2, #0
 800105e:	1c02      	adds	r2, r0, #0
 8001060:	430a      	orrs	r2, r1
 8001062:	71da      	strb	r2, [r3, #7]
				// replay on local device:
//				playback.data = recording.data;
//				playback.enabled = 1;
//				playback.count = 0;

				recording.enabled = 0;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
				if (state) {
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	d00a      	beq.n	8001088 <HAL_TIM_PeriodElapsedCallback+0x2a4>
					recording.enabled = 1;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
					recording.count = 1;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800107a:	2201      	movs	r2, #1
 800107c:	705a      	strb	r2, [r3, #1]
					recording.data = 1;
 800107e:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001080:	2301      	movs	r3, #1
 8001082:	2400      	movs	r4, #0
 8001084:	6093      	str	r3, [r2, #8]
 8001086:	60d4      	str	r4, [r2, #12]
				}

			}
		}
	}
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b00b      	add	sp, #44	; 0x2c
 800108e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001090:	20000698 	.word	0x20000698
 8001094:	50000800 	.word	0x50000800
 8001098:	2000072c 	.word	0x2000072c
 800109c:	20000610 	.word	0x20000610
 80010a0:	20000578 	.word	0x20000578
 80010a4:	0000ffff 	.word	0x0000ffff
 80010a8:	40012c00 	.word	0x40012c00
 80010ac:	50000400 	.word	0x50000400
 80010b0:	20000884 	.word	0x20000884
 80010b4:	20000124 	.word	0x20000124

080010b8 <readingCallback>:

static void readingCallback(uint8_t *buffer, uint8_t length) {
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b09a      	sub	sp, #104	; 0x68
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	000a      	movs	r2, r1
 80010c2:	1cfb      	adds	r3, r7, #3
 80010c4:	701a      	strb	r2, [r3, #0]
	if (aKeys.pairing && length == sizeof(PublicKeyPacket)) {
 80010c6:	4b70      	ldr	r3, [pc, #448]	; (8001288 <readingCallback+0x1d0>)
 80010c8:	2282      	movs	r2, #130	; 0x82
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d025      	beq.n	800111e <readingCallback+0x66>
 80010d2:	1cfb      	adds	r3, r7, #3
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b21      	cmp	r3, #33	; 0x21
 80010d8:	d121      	bne.n	800111e <readingCallback+0x66>
		PublicKeyPacket tmp;
		tmp.preamble = 0;
 80010da:	2008      	movs	r0, #8
 80010dc:	183b      	adds	r3, r7, r0
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		memcpy(&tmp, buffer, length);
 80010e2:	1cfb      	adds	r3, r7, #3
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	0004      	movs	r4, r0
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	0018      	movs	r0, r3
 80010ee:	f007 f9b5 	bl	800845c <memcpy>
		if (tmp.preamble == PUBLIC_EXCHANGE_PREAMBLE) {
 80010f2:	0020      	movs	r0, r4
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b55      	cmp	r3, #85	; 0x55
 80010fa:	d000      	beq.n	80010fe <readingCallback+0x46>
 80010fc:	e0bf      	b.n	800127e <readingCallback+0x1c6>
			memcpy(aKeys.otherPublicKey, tmp.data, 32);
 80010fe:	4a62      	ldr	r2, [pc, #392]	; (8001288 <readingCallback+0x1d0>)
 8001100:	2308      	movs	r3, #8
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2101      	movs	r1, #1
 8001106:	3240      	adds	r2, #64	; 0x40
 8001108:	0010      	movs	r0, r2
 800110a:	185b      	adds	r3, r3, r1
 800110c:	2220      	movs	r2, #32
 800110e:	0019      	movs	r1, r3
 8001110:	f007 f9a4 	bl	800845c <memcpy>
			aKeys.gotOther = 1;
 8001114:	4b5c      	ldr	r3, [pc, #368]	; (8001288 <readingCallback+0x1d0>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	2101      	movs	r1, #1
 800111a:	5499      	strb	r1, [r3, r2]
	if (aKeys.pairing && length == sizeof(PublicKeyPacket)) {
 800111c:	e0af      	b.n	800127e <readingCallback+0x1c6>
		}
	} else if (!MASTER_DEVICE && length == 32 && aKeys.masterSent) {
 800111e:	1cfb      	adds	r3, r7, #3
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b20      	cmp	r3, #32
 8001124:	d160      	bne.n	80011e8 <readingCallback+0x130>
 8001126:	4b58      	ldr	r3, [pc, #352]	; (8001288 <readingCallback+0x1d0>)
 8001128:	2281      	movs	r2, #129	; 0x81
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d05a      	beq.n	80011e8 <readingCallback+0x130>
		// try to decrypt with shared secret
		uint32_t oldPkeys[4] = { 0 };
 8001132:	2450      	movs	r4, #80	; 0x50
 8001134:	193b      	adds	r3, r7, r4
 8001136:	0018      	movs	r0, r3
 8001138:	2310      	movs	r3, #16
 800113a:	001a      	movs	r2, r3
 800113c:	2100      	movs	r1, #0
 800113e:	f007 f996 	bl	800846e <memset>

		memcpy(oldPkeys, pKeyAES, AESKeySize);
 8001142:	193b      	adds	r3, r7, r4
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <readingCallback+0x1d4>)
 8001146:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001148:	c313      	stmia	r3!, {r0, r1, r4}
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	601a      	str	r2, [r3, #0]
		memcpy(pKeyAES, aKeys.sharedSecret, AESKeySize);
 800114e:	4a4f      	ldr	r2, [pc, #316]	; (800128c <readingCallback+0x1d4>)
 8001150:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <readingCallback+0x1d0>)
 8001152:	3360      	adds	r3, #96	; 0x60
 8001154:	cb13      	ldmia	r3!, {r0, r1, r4}
 8001156:	c213      	stmia	r2!, {r0, r1, r4}
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6013      	str	r3, [r2, #0]
		MX_AES_Init();
 800115c:	f7ff fba8 	bl	80008b0 <MX_AES_Init>

		uint8_t decryptRes[32] = { 0 };
 8001160:	2408      	movs	r4, #8
 8001162:	193b      	adds	r3, r7, r4
 8001164:	0018      	movs	r0, r3
 8001166:	2320      	movs	r3, #32
 8001168:	001a      	movs	r2, r3
 800116a:	2100      	movs	r1, #0
 800116c:	f007 f97f 	bl	800846e <memset>
		if (HAL_CRYP_Decrypt(&hcryp, buffer, length, decryptRes, 1) == HAL_OK) {
 8001170:	1cfb      	adds	r3, r7, #3
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b29a      	uxth	r2, r3
 8001176:	193c      	adds	r4, r7, r4
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4845      	ldr	r0, [pc, #276]	; (8001290 <readingCallback+0x1d8>)
 800117c:	2301      	movs	r3, #1
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	0023      	movs	r3, r4
 8001182:	f001 fa79 	bl	8002678 <HAL_CRYP_Decrypt>
 8001186:	1e03      	subs	r3, r0, #0
 8001188:	d124      	bne.n	80011d4 <readingCallback+0x11c>
			KeyExchangePacket tmp;
			tmp.preamble = 0;
 800118a:	213c      	movs	r1, #60	; 0x3c
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
			memcpy(&tmp, decryptRes, sizeof(decryptRes));
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2208      	movs	r2, #8
 8001196:	18ba      	adds	r2, r7, r2
 8001198:	ca31      	ldmia	r2!, {r0, r4, r5}
 800119a:	c331      	stmia	r3!, {r0, r4, r5}
 800119c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800119e:	c331      	stmia	r3!, {r0, r4, r5}
 80011a0:	ca11      	ldmia	r2!, {r0, r4}
 80011a2:	c311      	stmia	r3!, {r0, r4}
			if (tmp.preamble == AES_KEY_EXCHANGE_PREAMBLE) {
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2baa      	cmp	r3, #170	; 0xaa
 80011aa:	d11a      	bne.n	80011e2 <readingCallback+0x12a>
				writeKeyToFlash((uint64_t*) tmp.data, &EraseInitStruct);
 80011ac:	4a39      	ldr	r2, [pc, #228]	; (8001294 <readingCallback+0x1dc>)
 80011ae:	243c      	movs	r4, #60	; 0x3c
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	3301      	adds	r3, #1
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 f897 	bl	80012ea <writeKeyToFlash>

				memcpy(pKeyAES, tmp.data, AESKeySize);
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	1c59      	adds	r1, r3, #1
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <readingCallback+0x1d4>)
 80011c2:	2210      	movs	r2, #16
 80011c4:	0018      	movs	r0, r3
 80011c6:	f007 f949 	bl	800845c <memcpy>
				// We don't necessarily have to have this here -- we can let it keep writing
				aKeys.masterSent = 0;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <readingCallback+0x1d0>)
 80011cc:	2281      	movs	r2, #129	; 0x81
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]
 80011d2:	e006      	b.n	80011e2 <readingCallback+0x12a>
			}
		} else {
			memcpy(pKeyAES, oldPkeys, AESKeySize);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <readingCallback+0x1d4>)
 80011d6:	2250      	movs	r2, #80	; 0x50
 80011d8:	18ba      	adds	r2, r7, r2
 80011da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011dc:	c313      	stmia	r3!, {r0, r1, r4}
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	601a      	str	r2, [r3, #0]
		}
		MX_AES_Init();
 80011e2:	f7ff fb65 	bl	80008b0 <MX_AES_Init>
	} else if (!MASTER_DEVICE && length == 32 && aKeys.masterSent) {
 80011e6:	e04b      	b.n	8001280 <readingCallback+0x1c8>
	} else if (length == sizeof(Packet)) {
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d147      	bne.n	8001280 <readingCallback+0x1c8>
		Packet tmp;
		tmp.preamble = 0;
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	701a      	strb	r2, [r3, #0]
		if (HAL_CRYP_Decrypt(&hcryp, buffer, length, &tmp, 1) == HAL_OK
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	187c      	adds	r4, r7, r1
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4823      	ldr	r0, [pc, #140]	; (8001290 <readingCallback+0x1d8>)
 8001204:	2301      	movs	r3, #1
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	0023      	movs	r3, r4
 800120a:	f001 fa35 	bl	8002678 <HAL_CRYP_Decrypt>
 800120e:	1e03      	subs	r3, r0, #0
 8001210:	d136      	bne.n	8001280 <readingCallback+0x1c8>
				&& tmp.preamble == VIBE_PREAMBLE
 8001212:	232c      	movs	r3, #44	; 0x2c
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2bf0      	cmp	r3, #240	; 0xf0
 800121a:	d131      	bne.n	8001280 <readingCallback+0x1c8>
				&& tmp.sequenceNumber > deviceSeqs[tmp.deviceID]) {
 800121c:	202c      	movs	r0, #44	; 0x2c
 800121e:	183b      	adds	r3, r7, r0
 8001220:	885a      	ldrh	r2, [r3, #2]
 8001222:	889b      	ldrh	r3, [r3, #4]
 8001224:	041b      	lsls	r3, r3, #16
 8001226:	4313      	orrs	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	183b      	adds	r3, r7, r0
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	001a      	movs	r2, r3
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <readingCallback+0x1e0>)
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	58d3      	ldr	r3, [r2, r3]
 8001236:	4299      	cmp	r1, r3
 8001238:	d922      	bls.n	8001280 <readingCallback+0x1c8>

			playback.data = tmp.data;
 800123a:	252c      	movs	r5, #44	; 0x2c
 800123c:	197b      	adds	r3, r7, r5
 800123e:	88d8      	ldrh	r0, [r3, #6]
 8001240:	891c      	ldrh	r4, [r3, #8]
 8001242:	0424      	lsls	r4, r4, #16
 8001244:	4320      	orrs	r0, r4
 8001246:	0001      	movs	r1, r0
 8001248:	8958      	ldrh	r0, [r3, #10]
 800124a:	899b      	ldrh	r3, [r3, #12]
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	4303      	orrs	r3, r0
 8001250:	001a      	movs	r2, r3
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <readingCallback+0x1e4>)
 8001254:	6099      	str	r1, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
			playback.enabled = 1;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <readingCallback+0x1e4>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
			playback.count = 0;
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <readingCallback+0x1e4>)
 8001260:	2200      	movs	r2, #0
 8001262:	705a      	strb	r2, [r3, #1]
			deviceSeqs[tmp.deviceID] = tmp.sequenceNumber;
 8001264:	197b      	adds	r3, r7, r5
 8001266:	785b      	ldrb	r3, [r3, #1]
 8001268:	0018      	movs	r0, r3
 800126a:	197b      	adds	r3, r7, r5
 800126c:	885a      	ldrh	r2, [r3, #2]
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	4313      	orrs	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <readingCallback+0x1e0>)
 8001278:	0082      	lsls	r2, r0, #2
 800127a:	50d1      	str	r1, [r2, r3]

		}
	}
}
 800127c:	e000      	b.n	8001280 <readingCallback+0x1c8>
	if (aKeys.pairing && length == sizeof(PublicKeyPacket)) {
 800127e:	46c0      	nop			; (mov r8, r8)
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b018      	add	sp, #96	; 0x60
 8001286:	bdb0      	pop	{r4, r5, r7, pc}
 8001288:	20000698 	.word	0x20000698
 800128c:	20000114 	.word	0x20000114
 8001290:	20000778 	.word	0x20000778
 8001294:	20000588 	.word	0x20000588
 8001298:	20000124 	.word	0x20000124
 800129c:	20000578 	.word	0x20000578

080012a0 <readKeyFromFlash>:

static void readKeyFromFlash(uint32_t *ptr, FLASH_EraseInitTypeDef *erase) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]

	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	0252      	lsls	r2, r2, #9
 80012b2:	4694      	mov	ip, r2
 80012b4:	4463      	add	r3, ip
 80012b6:	02db      	lsls	r3, r3, #11
 80012b8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e00d      	b.n	80012dc <readKeyFromFlash+0x3c>
		ptr[i] = ((uint32_t*) addr)[i];
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	009a      	lsls	r2, r3, #2
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	18d3      	adds	r3, r2, r3
 80012c8:	001a      	movs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	18cb      	adds	r3, r1, r3
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < AESKeySize / sizeof(uint32_t); i++) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d9ee      	bls.n	80012c0 <readKeyFromFlash+0x20>
	}
}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b004      	add	sp, #16
 80012e8:	bd80      	pop	{r7, pc}

080012ea <writeKeyToFlash>:

static void writeKeyToFlash(uint64_t *ptr, FLASH_EraseInitTypeDef *erase) {
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b08d      	sub	sp, #52	; 0x34
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
//801f800
	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	0252      	lsls	r2, r2, #9
 80012fc:	4694      	mov	ip, r2
 80012fe:	4463      	add	r3, ip
 8001300:	02db      	lsls	r3, r3, #11
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t pgerr = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001308:	f002 fab4 	bl	8003874 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(erase, &pgerr);
 800130c:	2318      	movs	r3, #24
 800130e:	18fa      	adds	r2, r7, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	0011      	movs	r1, r2
 8001314:	0018      	movs	r0, r3
 8001316:	f002 fb5b 	bl	80039d0 <HAL_FLASHEx_Erase>
	uint64_t alignedtmp[2] = { 0 };
 800131a:	2408      	movs	r4, #8
 800131c:	193b      	adds	r3, r7, r4
 800131e:	0018      	movs	r0, r3
 8001320:	2310      	movs	r3, #16
 8001322:	001a      	movs	r2, r3
 8001324:	2100      	movs	r1, #0
 8001326:	f007 f8a2 	bl	800846e <memset>
	memcpy(alignedtmp, ptr, sizeof(alignedtmp));
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2210      	movs	r2, #16
 8001330:	0018      	movs	r0, r3
 8001332:	f007 f893 	bl	800845c <memcpy>
	for (int i = 0; i < 2; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800133a:	e018      	b.n	800136e <writeKeyToFlash+0x84>
		uint64_t val = alignedtmp[i];
 800133c:	2308      	movs	r3, #8
 800133e:	18fa      	adds	r2, r7, r3
 8001340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	18d3      	adds	r3, r2, r3
 8001346:	685c      	ldr	r4, [r3, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	623b      	str	r3, [r7, #32]
 800134c:	627c      	str	r4, [r7, #36]	; 0x24
		uint32_t location = addr + (sizeof(uint64_t)) * i;
 800134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	61fb      	str	r3, [r7, #28]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, location, val);
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800135c:	69f9      	ldr	r1, [r7, #28]
 800135e:	001a      	movs	r2, r3
 8001360:	0023      	movs	r3, r4
 8001362:	2001      	movs	r0, #1
 8001364:	f002 fa36 	bl	80037d4 <HAL_FLASH_Program>
	for (int i = 0; i < 2; i++) {
 8001368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136a:	3301      	adds	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001370:	2b01      	cmp	r3, #1
 8001372:	dde3      	ble.n	800133c <writeKeyToFlash+0x52>
	}
	HAL_FLASH_Lock();
 8001374:	f002 faa2 	bl	80038bc <HAL_FLASH_Lock>
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b00d      	add	sp, #52	; 0x34
 800137e:	bd90      	pop	{r4, r7, pc}

08001380 <readSeqFromFlash>:

static uint32_t readSeqFromFlash(FLASH_EraseInitTypeDef *erase) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	0252      	lsls	r2, r2, #9
 8001390:	4694      	mov	ip, r2
 8001392:	4463      	add	r3, ip
 8001394:	02db      	lsls	r3, r3, #11
 8001396:	60fb      	str	r3, [r7, #12]
	return *((uint32_t*) addr);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b004      	add	sp, #16
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <writeSeqToFlash>:
static void writeSeqToFlash(uint32_t seq, FLASH_EraseInitTypeDef *erase) {
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
//801f000
	uint32_t addr = 0x08000000 + FLASH_PAGE_SIZE * erase->Page;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0252      	lsls	r2, r2, #9
 80013b6:	4694      	mov	ip, r2
 80013b8:	4463      	add	r3, ip
 80013ba:	02db      	lsls	r3, r3, #11
 80013bc:	60fb      	str	r3, [r7, #12]
	uint32_t pgerr = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
	HAL_FLASH_Unlock();
 80013c2:	f002 fa57 	bl	8003874 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(erase, &pgerr);
 80013c6:	2308      	movs	r3, #8
 80013c8:	18fa      	adds	r2, r7, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	0011      	movs	r1, r2
 80013ce:	0018      	movs	r0, r3
 80013d0:	f002 fafe 	bl	80039d0 <HAL_FLASHEx_Erase>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, seq);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	001c      	movs	r4, r3
 80013d8:	2300      	movs	r3, #0
 80013da:	001d      	movs	r5, r3
 80013dc:	68f9      	ldr	r1, [r7, #12]
 80013de:	0022      	movs	r2, r4
 80013e0:	002b      	movs	r3, r5
 80013e2:	2001      	movs	r0, #1
 80013e4:	f002 f9f6 	bl	80037d4 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 80013e8:	f002 fa68 	bl	80038bc <HAL_FLASH_Lock>
}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}

080013f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013fa:	e7fe      	b.n	80013fa <Error_Handler+0x6>

080013fc <rfm95_init>:
 */

/**
 * Initializes device and sets Handle
 */
bool rfm95_init(rfm95_handle_t *handle_pointer) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	handle = handle_pointer;
 8001404:	4b9c      	ldr	r3, [pc, #624]	; (8001678 <rfm95_init+0x27c>)
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	601a      	str	r2, [r3, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 800140a:	4b9b      	ldr	r3, [pc, #620]	; (8001678 <rfm95_init+0x27c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	2382      	movs	r3, #130	; 0x82
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	429a      	cmp	r2, r3
 8001418:	d005      	beq.n	8001426 <rfm95_init+0x2a>
 800141a:	4b98      	ldr	r3, [pc, #608]	; (800167c <rfm95_init+0x280>)
 800141c:	4a98      	ldr	r2, [pc, #608]	; (8001680 <rfm95_init+0x284>)
 800141e:	4899      	ldr	r0, [pc, #612]	; (8001684 <rfm95_init+0x288>)
 8001420:	211a      	movs	r1, #26
 8001422:	f006 ffaf 	bl	8008384 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001426:	4b94      	ldr	r3, [pc, #592]	; (8001678 <rfm95_init+0x27c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <rfm95_init+0x42>
 8001432:	4b95      	ldr	r3, [pc, #596]	; (8001688 <rfm95_init+0x28c>)
 8001434:	4a92      	ldr	r2, [pc, #584]	; (8001680 <rfm95_init+0x284>)
 8001436:	4893      	ldr	r0, [pc, #588]	; (8001684 <rfm95_init+0x288>)
 8001438:	211b      	movs	r1, #27
 800143a:	f006 ffa3 	bl	8008384 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 800143e:	4b8e      	ldr	r3, [pc, #568]	; (8001678 <rfm95_init+0x27c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	23e0      	movs	r3, #224	; 0xe0
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	429a      	cmp	r2, r3
 800144c:	d005      	beq.n	800145a <rfm95_init+0x5e>
 800144e:	4b8f      	ldr	r3, [pc, #572]	; (800168c <rfm95_init+0x290>)
 8001450:	4a8b      	ldr	r2, [pc, #556]	; (8001680 <rfm95_init+0x284>)
 8001452:	488c      	ldr	r0, [pc, #560]	; (8001684 <rfm95_init+0x288>)
 8001454:	211c      	movs	r1, #28
 8001456:	f006 ff95 	bl	8008384 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800145a:	4b87      	ldr	r3, [pc, #540]	; (8001678 <rfm95_init+0x27c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <rfm95_init+0x76>
 8001466:	4b8a      	ldr	r3, [pc, #552]	; (8001690 <rfm95_init+0x294>)
 8001468:	4a85      	ldr	r2, [pc, #532]	; (8001680 <rfm95_init+0x284>)
 800146a:	4886      	ldr	r0, [pc, #536]	; (8001684 <rfm95_init+0x288>)
 800146c:	211d      	movs	r1, #29
 800146e:	f006 ff89 	bl	8008384 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001472:	4b81      	ldr	r3, [pc, #516]	; (8001678 <rfm95_init+0x27c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <rfm95_init+0x8e>
 800147e:	4b85      	ldr	r3, [pc, #532]	; (8001694 <rfm95_init+0x298>)
 8001480:	4a7f      	ldr	r2, [pc, #508]	; (8001680 <rfm95_init+0x284>)
 8001482:	4880      	ldr	r0, [pc, #512]	; (8001684 <rfm95_init+0x288>)
 8001484:	211e      	movs	r1, #30
 8001486:	f006 ff7d 	bl	8008384 <__assert_func>

	rfm95_reset();
 800148a:	f000 faff 	bl	8001a8c <rfm95_reset>

	// Check for correct version.
	uint8_t version = 0;
 800148e:	210f      	movs	r1, #15
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	if (!rfm95_read(RFM95_REGISTER_VERSION, &version))
 8001496:	187b      	adds	r3, r7, r1
 8001498:	0019      	movs	r1, r3
 800149a:	2042      	movs	r0, #66	; 0x42
 800149c:	f000 fa76 	bl	800198c <rfm95_read>
 80014a0:	0003      	movs	r3, r0
 80014a2:	001a      	movs	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	4053      	eors	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <rfm95_init+0xb6>
		return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e0dd      	b.n	800166e <rfm95_init+0x272>

	if (version != RFM9x_VER)
 80014b2:	230f      	movs	r3, #15
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d001      	beq.n	80014c0 <rfm95_init+0xc4>
		return false;
 80014bc:	2300      	movs	r3, #0
 80014be:	e0d6      	b.n	800166e <rfm95_init+0x272>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP))
 80014c0:	2100      	movs	r1, #0
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 faa4 	bl	8001a10 <rfm95_write>
 80014c8:	0003      	movs	r3, r0
 80014ca:	001a      	movs	r2, r3
 80014cc:	2301      	movs	r3, #1
 80014ce:	4053      	eors	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <rfm95_init+0xde>
		return false;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e0c9      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA))
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 fa97 	bl	8001a10 <rfm95_write>
 80014e2:	0003      	movs	r3, r0
 80014e4:	001a      	movs	r2, r3
 80014e6:	2301      	movs	r3, #1
 80014e8:	4053      	eors	r3, r2
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <rfm95_init+0xf8>
		return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e0bc      	b.n	800166e <rfm95_init+0x272>

	// Set module power to 17dbm.
	if (!rfm95_setPower(20))
 80014f4:	2014      	movs	r0, #20
 80014f6:	f000 f8cf 	bl	8001698 <rfm95_setPower>
 80014fa:	0003      	movs	r3, r0
 80014fc:	001a      	movs	r2, r3
 80014fe:	2301      	movs	r3, #1
 8001500:	4053      	eors	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <rfm95_init+0x110>
		return false;
 8001508:	2300      	movs	r3, #0
 800150a:	e0b0      	b.n	800166e <rfm95_init+0x272>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(RFM95_REGISTER_SYMB_TIMEOUT_LSB, 255))
 800150c:	21ff      	movs	r1, #255	; 0xff
 800150e:	201f      	movs	r0, #31
 8001510:	f000 fa7e 	bl	8001a10 <rfm95_write>
 8001514:	0003      	movs	r3, r0
 8001516:	001a      	movs	r2, r3
 8001518:	2301      	movs	r3, #1
 800151a:	4053      	eors	r3, r2
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <rfm95_init+0x12a>
		return false;
 8001522:	2300      	movs	r3, #0
 8001524:	e0a3      	b.n	800166e <rfm95_init+0x272>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8001526:	2100      	movs	r1, #0
 8001528:	2020      	movs	r0, #32
 800152a:	f000 fa71 	bl	8001a10 <rfm95_write>
 800152e:	0003      	movs	r3, r0
 8001530:	001a      	movs	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	4053      	eors	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <rfm95_init+0x144>
		return false;
 800153c:	2300      	movs	r3, #0
 800153e:	e096      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001540:	2108      	movs	r1, #8
 8001542:	2021      	movs	r0, #33	; 0x21
 8001544:	f000 fa64 	bl	8001a10 <rfm95_write>
 8001548:	0003      	movs	r3, r0
 800154a:	001a      	movs	r2, r3
 800154c:	2301      	movs	r3, #1
 800154e:	4053      	eors	r3, r2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <rfm95_init+0x15e>
		return false;
 8001556:	2300      	movs	r3, #0
 8001558:	e089      	b.n	800166e <rfm95_init+0x272>

	// Set IQ inversion.
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_1,
 800155a:	2127      	movs	r1, #39	; 0x27
 800155c:	2033      	movs	r0, #51	; 0x33
 800155e:	f000 fa57 	bl	8001a10 <rfm95_write>
 8001562:	0003      	movs	r3, r0
 8001564:	001a      	movs	r2, r3
 8001566:	2301      	movs	r3, #1
 8001568:	4053      	eors	r3, r2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <rfm95_init+0x178>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001570:	2300      	movs	r3, #0
 8001572:	e07c      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_INVERT_IQ_2,
 8001574:	211d      	movs	r1, #29
 8001576:	203b      	movs	r0, #59	; 0x3b
 8001578:	f000 fa4a 	bl	8001a10 <rfm95_write>
 800157c:	0003      	movs	r3, r0
 800157e:	001a      	movs	r2, r3
 8001580:	2301      	movs	r3, #1
 8001582:	4053      	eors	r3, r2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <rfm95_init+0x192>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 800158a:	2300      	movs	r3, #0
 800158c:	e06f      	b.n	800166e <rfm95_init+0x272>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	200e      	movs	r0, #14
 8001592:	f000 fa3d 	bl	8001a10 <rfm95_write>
 8001596:	0003      	movs	r3, r0
 8001598:	001a      	movs	r2, r3
 800159a:	2301      	movs	r3, #1
 800159c:	4053      	eors	r3, r2
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <rfm95_init+0x1ac>
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e062      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 80015a8:	2100      	movs	r1, #0
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 fa30 	bl	8001a10 <rfm95_write>
 80015b0:	0003      	movs	r3, r0
 80015b2:	001a      	movs	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	4053      	eors	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <rfm95_init+0x1c6>
		return false;
 80015be:	2300      	movs	r3, #0
 80015c0:	e055      	b.n	800166e <rfm95_init+0x272>

	if (!rfm95_write(RFM95_REGISTER_FR_MSB, lora_frequency[0]))
 80015c2:	23e4      	movs	r3, #228	; 0xe4
 80015c4:	0019      	movs	r1, r3
 80015c6:	2006      	movs	r0, #6
 80015c8:	f000 fa22 	bl	8001a10 <rfm95_write>
 80015cc:	0003      	movs	r3, r0
 80015ce:	001a      	movs	r2, r3
 80015d0:	2301      	movs	r3, #1
 80015d2:	4053      	eors	r3, r2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <rfm95_init+0x1e2>
		return false;
 80015da:	2300      	movs	r3, #0
 80015dc:	e047      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_MID, lora_frequency[1]))
 80015de:	23c0      	movs	r3, #192	; 0xc0
 80015e0:	0019      	movs	r1, r3
 80015e2:	2007      	movs	r0, #7
 80015e4:	f000 fa14 	bl	8001a10 <rfm95_write>
 80015e8:	0003      	movs	r3, r0
 80015ea:	001a      	movs	r2, r3
 80015ec:	2301      	movs	r3, #1
 80015ee:	4053      	eors	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <rfm95_init+0x1fe>
		return false;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e039      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_FR_LSB, lora_frequency[2]))
 80015fa:	2326      	movs	r3, #38	; 0x26
 80015fc:	0019      	movs	r1, r3
 80015fe:	2008      	movs	r0, #8
 8001600:	f000 fa06 	bl	8001a10 <rfm95_write>
 8001604:	0003      	movs	r3, r0
 8001606:	001a      	movs	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	4053      	eors	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <rfm95_init+0x21a>
		return false;
 8001612:	2300      	movs	r3, #0
 8001614:	e02b      	b.n	800166e <rfm95_init+0x272>
//82
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_1, 0x82))
 8001616:	2182      	movs	r1, #130	; 0x82
 8001618:	201d      	movs	r0, #29
 800161a:	f000 f9f9 	bl	8001a10 <rfm95_write>
 800161e:	0003      	movs	r3, r0
 8001620:	001a      	movs	r2, r3
 8001622:	2301      	movs	r3, #1
 8001624:	4053      	eors	r3, r2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <rfm95_init+0x234>
		return false;
 800162c:	2300      	movs	r3, #0
 800162e:	e01e      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_2, 0x90 | 0b111))
 8001630:	2197      	movs	r1, #151	; 0x97
 8001632:	201e      	movs	r0, #30
 8001634:	f000 f9ec 	bl	8001a10 <rfm95_write>
 8001638:	0003      	movs	r3, r0
 800163a:	001a      	movs	r2, r3
 800163c:	2301      	movs	r3, #1
 800163e:	4053      	eors	r3, r2
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <rfm95_init+0x24e>
		return false;  //change to 0x94 for enabling CRC
 8001646:	2300      	movs	r3, #0
 8001648:	e011      	b.n	800166e <rfm95_init+0x272>
	if (!rfm95_write(RFM95_REGISTER_MODEM_CONFIG_3, 0x00))
 800164a:	2100      	movs	r1, #0
 800164c:	2026      	movs	r0, #38	; 0x26
 800164e:	f000 f9df 	bl	8001a10 <rfm95_write>
 8001652:	0003      	movs	r3, r0
 8001654:	001a      	movs	r2, r3
 8001656:	2301      	movs	r3, #1
 8001658:	4053      	eors	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <rfm95_init+0x268>
		return false;
 8001660:	2300      	movs	r3, #0
 8001662:	e004      	b.n	800166e <rfm95_init+0x272>

	rfm95_write(RFM95_REGISTER_OP_MODE,
 8001664:	2185      	movs	r1, #133	; 0x85
 8001666:	2001      	movs	r0, #1
 8001668:	f000 f9d2 	bl	8001a10 <rfm95_write>
	RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 800166c:	2301      	movs	r3, #1
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b004      	add	sp, #16
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	200005c0 	.word	0x200005c0
 800167c:	08009368 	.word	0x08009368
 8001680:	080094d8 	.word	0x080094d8
 8001684:	0800939c 	.word	0x0800939c
 8001688:	080093b0 	.word	0x080093b0
 800168c:	080093ec 	.word	0x080093ec
 8001690:	08009424 	.word	0x08009424
 8001694:	08009460 	.word	0x08009460

08001698 <rfm95_setPower>:

/**
 * Sets power for transmission, 17 by default
 */
bool rfm95_setPower(int8_t power) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	701a      	strb	r2, [r3, #0]
	rfm95_register_pa_config_t pa_config = { 0 };
 80016a4:	230c      	movs	r3, #12
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 80016ac:	230f      	movs	r3, #15
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	dd28      	ble.n	8001710 <rfm95_setPower+0x78>
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	2b11      	cmp	r3, #17
 80016c6:	dc23      	bgt.n	8001710 <rfm95_setPower+0x78>
		pa_config.max_power = 7;
 80016c8:	200c      	movs	r0, #12
 80016ca:	183b      	adds	r3, r7, r0
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	2170      	movs	r1, #112	; 0x70
 80016d0:	430a      	orrs	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	4249      	negs	r1, r1
 80016dc:	430a      	orrs	r2, r1
 80016de:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3b02      	subs	r3, #2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	1c1a      	adds	r2, r3, #0
 80016ea:	230f      	movs	r3, #15
 80016ec:	4013      	ands	r3, r2
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	210f      	movs	r1, #15
 80016f4:	400a      	ands	r2, r1
 80016f6:	0010      	movs	r0, r2
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	210f      	movs	r1, #15
 80016fc:	438a      	bics	r2, r1
 80016fe:	1c11      	adds	r1, r2, #0
 8001700:	1c02      	adds	r2, r0, #0
 8001702:	430a      	orrs	r2, r1
 8001704:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001706:	230f      	movs	r3, #15
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	2284      	movs	r2, #132	; 0x84
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	e019      	b.n	8001744 <rfm95_setPower+0xac>

	} else if (power == 20) {
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	2b14      	cmp	r3, #20
 8001718:	d114      	bne.n	8001744 <rfm95_setPower+0xac>
		pa_config.max_power = 7;
 800171a:	200c      	movs	r0, #12
 800171c:	183b      	adds	r3, r7, r0
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	2170      	movs	r1, #112	; 0x70
 8001722:	430a      	orrs	r2, r1
 8001724:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8001726:	183b      	adds	r3, r7, r0
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4249      	negs	r1, r1
 800172e:	430a      	orrs	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 8001732:	183b      	adds	r3, r7, r0
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	210f      	movs	r1, #15
 8001738:	430a      	orrs	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800173c:	230f      	movs	r3, #15
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2287      	movs	r2, #135	; 0x87
 8001742:	701a      	strb	r2, [r3, #0]
	}

	if (!rfm95_write(RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 8001744:	230c      	movs	r3, #12
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	0019      	movs	r1, r3
 800174c:	2009      	movs	r0, #9
 800174e:	f000 f95f 	bl	8001a10 <rfm95_write>
 8001752:	0003      	movs	r3, r0
 8001754:	001a      	movs	r2, r3
 8001756:	2301      	movs	r3, #1
 8001758:	4053      	eors	r3, r2
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <rfm95_setPower+0xcc>
		return false;
 8001760:	2300      	movs	r3, #0
 8001762:	e010      	b.n	8001786 <rfm95_setPower+0xee>
	if (!rfm95_write(RFM95_REGISTER_PA_DAC, pa_dac_config))
 8001764:	230f      	movs	r3, #15
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0019      	movs	r1, r3
 800176c:	204d      	movs	r0, #77	; 0x4d
 800176e:	f000 f94f 	bl	8001a10 <rfm95_write>
 8001772:	0003      	movs	r3, r0
 8001774:	001a      	movs	r2, r3
 8001776:	2301      	movs	r3, #1
 8001778:	4053      	eors	r3, r2
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <rfm95_setPower+0xec>
		return false;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <rfm95_setPower+0xee>

	return true;
 8001784:	2301      	movs	r3, #1
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <transmitPackage>:

/**
 * Transmits payload after adding preamble
 */
bool transmitPackage(uint8_t *payload, size_t payloadLength) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]

	if (!handle->txDone) {
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <transmitPackage+0x100>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2222      	movs	r2, #34	; 0x22
 80017a0:	5c9b      	ldrb	r3, [r3, r2]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <transmitPackage+0x1c>
//		rfm95_write(RFM95_REGISTER_OP_MODE,
//							RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
		return false;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e06c      	b.n	8001886 <transmitPackage+0xf6>
	}
	handle->txDone = false;
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <transmitPackage+0x100>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2222      	movs	r2, #34	; 0x22
 80017b2:	2100      	movs	r1, #0
 80017b4:	5499      	strb	r1, [r3, r2]

	uint8_t regopmode = 0;
 80017b6:	230b      	movs	r3, #11
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	do {
		rfm95_read(RFM95_REGISTER_OP_MODE, &regopmode);
 80017be:	230b      	movs	r3, #11
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	0019      	movs	r1, r3
 80017c4:	2001      	movs	r0, #1
 80017c6:	f000 f8e1 	bl	800198c <rfm95_read>
		if (!rfm95_write(RFM95_REGISTER_OP_MODE,
 80017ca:	2181      	movs	r1, #129	; 0x81
 80017cc:	2001      	movs	r0, #1
 80017ce:	f000 f91f 	bl	8001a10 <rfm95_write>
 80017d2:	0003      	movs	r3, r0
 80017d4:	001a      	movs	r2, r3
 80017d6:	2301      	movs	r3, #1
 80017d8:	4053      	eors	r3, r2
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <transmitPackage+0x54>
		RFM95_REGISTER_OP_MODE_LORA_STANDBY))
			return false;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e050      	b.n	8001886 <transmitPackage+0xf6>
		HAL_Delay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 fc7f 	bl	80020e8 <HAL_Delay>
	} while (regopmode != RFM95_REGISTER_OP_MODE_LORA_STANDBY);
 80017ea:	230b      	movs	r3, #11
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b81      	cmp	r3, #129	; 0x81
 80017f2:	d1e4      	bne.n	80017be <transmitPackage+0x2e>

	if (!rfm95_write(RFM95_REGISTER_PAYLOAD_LENGTH, payloadLength))
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	0019      	movs	r1, r3
 80017fa:	2022      	movs	r0, #34	; 0x22
 80017fc:	f000 f908 	bl	8001a10 <rfm95_write>
 8001800:	0003      	movs	r3, r0
 8001802:	001a      	movs	r2, r3
 8001804:	2301      	movs	r3, #1
 8001806:	4053      	eors	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <transmitPackage+0x82>
		return false;
 800180e:	2300      	movs	r3, #0
 8001810:	e039      	b.n	8001886 <transmitPackage+0xf6>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001812:	2180      	movs	r1, #128	; 0x80
 8001814:	200d      	movs	r0, #13
 8001816:	f000 f8fb 	bl	8001a10 <rfm95_write>
 800181a:	0003      	movs	r3, r0
 800181c:	001a      	movs	r2, r3
 800181e:	2301      	movs	r3, #1
 8001820:	4053      	eors	r3, r2
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <transmitPackage+0x9c>
		return false;
 8001828:	2300      	movs	r3, #0
 800182a:	e02c      	b.n	8001886 <transmitPackage+0xf6>

	// Write payload to FIFO.
	for (size_t i = 0; i < payloadLength; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e00a      	b.n	8001848 <transmitPackage+0xb8>
		rfm95_write(RFM95_REGISTER_FIFO_ACCESS, payload[i]);
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	18d3      	adds	r3, r2, r3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	0019      	movs	r1, r3
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f8e7 	bl	8001a10 <rfm95_write>
	for (size_t i = 0; i < payloadLength; i++) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3f0      	bcc.n	8001832 <transmitPackage+0xa2>
	}

	if (!rfm95_write(RFM95_REGISTER_DIO_MAPPING_1,
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	2040      	movs	r0, #64	; 0x40
 8001854:	f000 f8dc 	bl	8001a10 <rfm95_write>
 8001858:	0003      	movs	r3, r0
 800185a:	001a      	movs	r2, r3
 800185c:	2301      	movs	r3, #1
 800185e:	4053      	eors	r3, r2
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <transmitPackage+0xda>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 8001866:	2300      	movs	r3, #0
 8001868:	e00d      	b.n	8001886 <transmitPackage+0xf6>
	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX))
 800186a:	2183      	movs	r1, #131	; 0x83
 800186c:	2001      	movs	r0, #1
 800186e:	f000 f8cf 	bl	8001a10 <rfm95_write>
 8001872:	0003      	movs	r3, r0
 8001874:	001a      	movs	r2, r3
 8001876:	2301      	movs	r3, #1
 8001878:	4053      	eors	r3, r2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <transmitPackage+0xf4>
		return false;
 8001880:	2300      	movs	r3, #0
 8001882:	e000      	b.n	8001886 <transmitPackage+0xf6>
//	if (!rfm95_write(RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;

//	rfm95_write(RFM95_REGISTER_OP_MODE,
//				RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

	return true;
 8001884:	2301      	movs	r3, #1

}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b004      	add	sp, #16
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	200005c0 	.word	0x200005c0

08001894 <rfm95_handleInterrupt>:
//	return true;
//}
/**
 * Generic function for handling interrupt, for tx and rx
 */
void rfm95_handleInterrupt() {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	uint8_t irqFlags;
	rfm95_read(RFM95_REGISTER_IRQ_FLAGS, &irqFlags);
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	0019      	movs	r1, r3
 800189e:	2012      	movs	r0, #18
 80018a0:	f000 f874 	bl	800198c <rfm95_read>
	rfm95_write(RFM95_REGISTER_IRQ_FLAGS, irqFlags);
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	0019      	movs	r1, r3
 80018aa:	2012      	movs	r0, #18
 80018ac:	f000 f8b0 	bl	8001a10 <rfm95_write>

	if ((irqFlags & 0x20) == 0) {
 80018b0:	1dfb      	adds	r3, r7, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	001a      	movs	r2, r3
 80018b6:	2320      	movs	r3, #32
 80018b8:	4013      	ands	r3, r2
 80018ba:	d160      	bne.n	800197e <rfm95_handleInterrupt+0xea>
//		++packetError;
		if ((irqFlags & 0x40) != 0) {
 80018bc:	1dfb      	adds	r3, r7, #7
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	001a      	movs	r2, r3
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	4013      	ands	r3, r2
 80018c6:	d047      	beq.n	8001958 <rfm95_handleInterrupt+0xc4>
			// read packet length
			uint8_t packetLength;

			// reading from RX_NVBYTES, since implicit header mode is off
			// check line 706 in the arduino library
			rfm95_read(0x13, &packetLength);
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	0019      	movs	r1, r3
 80018cc:	2013      	movs	r0, #19
 80018ce:	f000 f85d 	bl	800198c <rfm95_read>

			// set FIFO address to current RX address
			uint8_t currentAddr;

			rfm95_read(0x10, &currentAddr);
 80018d2:	1d7b      	adds	r3, r7, #5
 80018d4:	0019      	movs	r1, r3
 80018d6:	2010      	movs	r0, #16
 80018d8:	f000 f858 	bl	800198c <rfm95_read>
			rfm95_write(RFM95_REGISTER_FIFO_ADDR_PTR, currentAddr);
 80018dc:	1d7b      	adds	r3, r7, #5
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	0019      	movs	r1, r3
 80018e2:	200d      	movs	r0, #13
 80018e4:	f000 f894 	bl	8001a10 <rfm95_write>

			uint8_t *buffer = (uint8_t*) calloc(packetLength, sizeof(uint8_t));
 80018e8:	1dbb      	adds	r3, r7, #6
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	0018      	movs	r0, r3
 80018f0:	f006 fd66 	bl	80083c0 <calloc>
 80018f4:	0003      	movs	r3, r0
 80018f6:	60bb      	str	r3, [r7, #8]

			for (size_t i = 0; i < packetLength; i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	e009      	b.n	8001912 <rfm95_handleInterrupt+0x7e>
				rfm95_read(RFM95_REGISTER_FIFO_ACCESS, &buffer[i]);
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	18d3      	adds	r3, r2, r3
 8001904:	0019      	movs	r1, r3
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f840 	bl	800198c <rfm95_read>
			for (size_t i = 0; i < packetLength; i++) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	001a      	movs	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4293      	cmp	r3, r2
 800191c:	d3ef      	bcc.n	80018fe <rfm95_handleInterrupt+0x6a>
//                receivedPacketLength = packetLength;
//                receivedPacketData = (uint8_t *) calloc(packetLength, sizeof(uint8_t));
//            	memcpy(receivedPacketData, buffer + 4, packetLength);
//            }

			if (handle->rxDoneCallback) {
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <rfm95_handleInterrupt+0xf4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <rfm95_handleInterrupt+0xa4>
				handle->rxDoneCallback(buffer, packetLength);
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <rfm95_handleInterrupt+0xf4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	1dba      	adds	r2, r7, #6
 8001930:	7811      	ldrb	r1, [r2, #0]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	0010      	movs	r0, r2
 8001936:	4798      	blx	r3
//			rfm95_write(RFM95_REGISTER_OP_MODE,
//								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			//line 401? receive()
			//writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 8001938:	2100      	movs	r1, #0
 800193a:	2040      	movs	r0, #64	; 0x40
 800193c:	f000 f868 	bl	8001a10 <rfm95_write>
			rfm95_write(RFM95_REGISTER_OP_MODE,
 8001940:	2185      	movs	r1, #133	; 0x85
 8001942:	2001      	movs	r0, #1
 8001944:	f000 f864 	bl	8001a10 <rfm95_write>
								RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);

			rfm95_write(RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00);
 8001948:	2100      	movs	r1, #0
 800194a:	200f      	movs	r0, #15
 800194c:	f000 f860 	bl	8001a10 <rfm95_write>
			//RegSeqConfig1?
			free(buffer);
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	0018      	movs	r0, r3
 8001954:	f006 fd78 	bl	8008448 <free>

		}
		if ((irqFlags & 0x08) != 0) {
 8001958:	1dfb      	adds	r3, r7, #7
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	001a      	movs	r2, r3
 800195e:	2308      	movs	r3, #8
 8001960:	4013      	ands	r3, r2
 8001962:	d00c      	beq.n	800197e <rfm95_handleInterrupt+0xea>
			handle->txDone = true;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <rfm95_handleInterrupt+0xf4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2222      	movs	r2, #34	; 0x22
 800196a:	2101      	movs	r1, #1
 800196c:	5499      	strb	r1, [r3, r2]
			rfm95_write(RFM95_REGISTER_OP_MODE,
 800196e:	2185      	movs	r1, #133	; 0x85
 8001970:	2001      	movs	r0, #1
 8001972:	f000 f84d 	bl	8001a10 <rfm95_write>
					RFM95_REGISTER_OP_MODE_LORA_RXCONTINUOUS | 0x80);
			rfm95_write(RFM95_REGISTER_DIO_MAPPING_1, 0x00);
 8001976:	2100      	movs	r1, #0
 8001978:	2040      	movs	r0, #64	; 0x40
 800197a:	f000 f849 	bl	8001a10 <rfm95_write>

		}
	}
}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	200005c0 	.word	0x200005c0

0800198c <rfm95_read>:
 */

/**
 * Reads from register given by reg and stores value in buffer
 */
bool rfm95_read(rfm95_register_t reg, uint8_t *buffer) {
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	0002      	movs	r2, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	1dfb      	adds	r3, r7, #7
 8001998:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <rfm95_read+0x80>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6858      	ldr	r0, [r3, #4]
 80019a0:	4b1a      	ldr	r3, [pc, #104]	; (8001a0c <rfm95_read+0x80>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	891b      	ldrh	r3, [r3, #8]
 80019a6:	2200      	movs	r2, #0
 80019a8:	0019      	movs	r1, r3
 80019aa:	f002 fa36 	bl	8003e1a <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t) reg & 0x7fu;
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	227f      	movs	r2, #127	; 0x7f
 80019b4:	4013      	ands	r3, r2
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	210f      	movs	r1, #15
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <rfm95_read+0x80>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	1879      	adds	r1, r7, r1
 80019c6:	230a      	movs	r3, #10
 80019c8:	2201      	movs	r2, #1
 80019ca:	f003 fa93 	bl	8004ef4 <HAL_SPI_Transmit>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <rfm95_read+0x4a>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e016      	b.n	8001a04 <rfm95_read+0x78>
	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <rfm95_read+0x80>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	230a      	movs	r3, #10
 80019e0:	2201      	movs	r2, #1
 80019e2:	f003 fbdf 	bl	80051a4 <HAL_SPI_Receive>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <rfm95_read+0x62>
			!= HAL_OK)
		return false;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e00a      	b.n	8001a04 <rfm95_read+0x78>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <rfm95_read+0x80>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6858      	ldr	r0, [r3, #4]
 80019f4:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <rfm95_read+0x80>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	891b      	ldrh	r3, [r3, #8]
 80019fa:	2201      	movs	r2, #1
 80019fc:	0019      	movs	r1, r3
 80019fe:	f002 fa0c 	bl	8003e1a <HAL_GPIO_WritePin>

	return true;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b004      	add	sp, #16
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200005c0 	.word	0x200005c0

08001a10 <rfm95_write>:

/**
 * Writes value to register given by reg
 */
bool rfm95_write(rfm95_register_t reg, uint8_t value) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	0002      	movs	r2, r0
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	1dbb      	adds	r3, r7, #6
 8001a1e:	1c0a      	adds	r2, r1, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <rfm95_write+0x78>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6858      	ldr	r0, [r3, #4]
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <rfm95_write+0x78>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	891b      	ldrh	r3, [r3, #8]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	0019      	movs	r1, r3
 8001a32:	f002 f9f2 	bl	8003e1a <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8001a36:	1dfb      	adds	r3, r7, #7
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	4252      	negs	r2, r2
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	210c      	movs	r1, #12
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	701a      	strb	r2, [r3, #0]
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	1dba      	adds	r2, r7, #6
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <rfm95_write+0x78>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	1879      	adds	r1, r7, r1
 8001a58:	230a      	movs	r3, #10
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f003 fa4a 	bl	8004ef4 <HAL_SPI_Transmit>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <rfm95_write+0x58>
	RFM95_SPI_TIMEOUT) != HAL_OK)
		return false;
 8001a64:	2300      	movs	r3, #0
 8001a66:	e00a      	b.n	8001a7e <rfm95_write+0x6e>

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <rfm95_write+0x78>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6858      	ldr	r0, [r3, #4]
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <rfm95_write+0x78>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	2201      	movs	r2, #1
 8001a76:	0019      	movs	r1, r3
 8001a78:	f002 f9cf 	bl	8003e1a <HAL_GPIO_WritePin>

	return true;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b004      	add	sp, #16
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	200005c0 	.word	0x200005c0

08001a8c <rfm95_reset>:

/**
 * Resets Device for initialization
 */
void rfm95_reset() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <rfm95_reset+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68d8      	ldr	r0, [r3, #12]
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <rfm95_reset+0x40>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	8a1b      	ldrh	r3, [r3, #16]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	f002 f9bb 	bl	8003e1a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f000 fb1f 	bl	80020e8 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <rfm95_reset+0x40>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68d8      	ldr	r0, [r3, #12]
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <rfm95_reset+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	8a1b      	ldrh	r3, [r3, #16]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	0019      	movs	r1, r3
 8001aba:	f002 f9ae 	bl	8003e1a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001abe:	2005      	movs	r0, #5
 8001ac0:	f000 fb12 	bl	80020e8 <HAL_Delay>
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	200005c0 	.word	0x200005c0

08001ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_MspInit+0x4c>)
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_MspInit+0x4c>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_MspInit+0x4c>)
 8001af4:	2180      	movs	r1, #128	; 0x80
 8001af6:	0549      	lsls	r1, r1, #21
 8001af8:	430a      	orrs	r2, r1
 8001afa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_MspInit+0x4c>)
 8001afe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	055b      	lsls	r3, r3, #21
 8001b04:	4013      	ands	r3, r2
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fb0c 	bl	800212c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b14:	46c0      	nop			; (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b002      	add	sp, #8
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_CRYP_MspInit+0x38>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_CRYP_MspInit+0x2e>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <HAL_CRYP_MspInit+0x3c>)
 8001b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_CRYP_MspInit+0x3c>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	0249      	lsls	r1, r1, #9
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_CRYP_MspInit+0x3c>)
 8001b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }

}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40026000 	.word	0x40026000
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_CRC_MspInit+0x38>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d10d      	bne.n	8001b8e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0149      	lsls	r1, r1, #5
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_CRC_MspInit+0x3c>)
 8001b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	015b      	lsls	r3, r3, #5
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b004      	add	sp, #16
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	40023000 	.word	0x40023000
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_RNG_MspInit+0x38>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10d      	bne.n	8001bce <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_RNG_MspInit+0x3c>)
 8001bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RNG_MspInit+0x3c>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	02c9      	lsls	r1, r1, #11
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RNG_MspInit+0x3c>)
 8001bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	02db      	lsls	r3, r3, #11
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40025000 	.word	0x40025000
 8001bdc:	40021000 	.word	0x40021000

08001be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	2314      	movs	r3, #20
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	0018      	movs	r0, r3
 8001bee:	2314      	movs	r3, #20
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f006 fc3b 	bl	800846e <memset>
  if(hspi->Instance==SPI1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_SPI_MspInit+0x8c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d130      	bne.n	8001c64 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c08:	2180      	movs	r1, #128	; 0x80
 8001c0a:	0149      	lsls	r1, r1, #5
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c22:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c24:	2101      	movs	r1, #1
 8001c26:	430a      	orrs	r2, r1
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_SPI_MspInit+0x90>)
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001c36:	2114      	movs	r1, #20
 8001c38:	187b      	adds	r3, r7, r1
 8001c3a:	2246      	movs	r2, #70	; 0x46
 8001c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	187b      	adds	r3, r7, r1
 8001c40:	2202      	movs	r2, #2
 8001c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	187a      	adds	r2, r7, r1
 8001c58:	23a0      	movs	r3, #160	; 0xa0
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	0011      	movs	r1, r2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f001 ff5a 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b00a      	add	sp, #40	; 0x28
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40013000 	.word	0x40013000
 8001c70:	40021000 	.word	0x40021000

08001c74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_TIM_PWM_MspInit+0x38>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0109      	lsls	r1, r1, #4
 8001c90:	430a      	orrs	r2, r1
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	; (8001cfc <HAL_TIM_Base_MspInit+0x48>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d115      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_TIM_Base_MspInit+0x4c>)
 8001cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cca:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_TIM_Base_MspInit+0x4c>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	0289      	lsls	r1, r1, #10
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_TIM_Base_MspInit+0x4c>)
 8001cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	029b      	lsls	r3, r3, #10
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 2, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	2015      	movs	r0, #21
 8001ce8:	f000 fae2 	bl	80022b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001cec:	2015      	movs	r0, #21
 8001cee:	f000 faf4 	bl	80022da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	40014400 	.word	0x40014400
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	0018      	movs	r0, r3
 8001d12:	2314      	movs	r3, #20
 8001d14:	001a      	movs	r2, r3
 8001d16:	2100      	movs	r1, #0
 8001d18:	f006 fba9 	bl	800846e <memset>
  if(htim->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <HAL_TIM_MspPostInit+0x74>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d123      	bne.n	8001d6e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_TIM_MspPostInit+0x78>)
 8001d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_TIM_MspPostInit+0x78>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_MspPostInit+0x78>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2201      	movs	r2, #1
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = VIBE_PWM_Pin;
 8001d3e:	210c      	movs	r1, #12
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	0052      	lsls	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(VIBE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d60:	187a      	adds	r2, r7, r1
 8001d62:	23a0      	movs	r3, #160	; 0xa0
 8001d64:	05db      	lsls	r3, r3, #23
 8001d66:	0011      	movs	r1, r2
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f001 fed5 	bl	8003b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	46bd      	mov	sp, r7
 8001d72:	b008      	add	sp, #32
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40021000 	.word	0x40021000

08001d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <NMI_Handler+0x4>

08001d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <HardFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 f984 	bl	80020b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f002 f86a 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f002 f860 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f002 f85b 	bl	8003e8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <TIM16_IRQHandler+0x14>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f004 f8bc 	bl	8005f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	2000072c 	.word	0x2000072c

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_kill>:

int _kill(int pid, int sig)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e0a:	f006 fae3 	bl	80083d4 <__errno>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	2216      	movs	r2, #22
 8001e12:	601a      	str	r2, [r3, #0]
	return -1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	425b      	negs	r3, r3
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_exit>:

void _exit (int status)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e28:	2301      	movs	r3, #1
 8001e2a:	425a      	negs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0011      	movs	r1, r2
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff ffe5 	bl	8001e00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e36:	e7fe      	b.n	8001e36 <_exit+0x16>

08001e38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e00a      	b.n	8001e60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e4a:	e000      	b.n	8001e4e <_read+0x16>
 8001e4c:	bf00      	nop
 8001e4e:	0001      	movs	r1, r0
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	b2ca      	uxtb	r2, r1
 8001e58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf0      	blt.n	8001e4a <_read+0x12>
	}

return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b006      	add	sp, #24
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b086      	sub	sp, #24
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e009      	b.n	8001e98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	60ba      	str	r2, [r7, #8]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	e000      	b.n	8001e92 <_write+0x20>
 8001e90:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	dbf1      	blt.n	8001e84 <_write+0x12>
	}
	return len;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b006      	add	sp, #24
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <_close>:

int _close(int file)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
	return -1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	425b      	negs	r3, r3
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b002      	add	sp, #8
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0192      	lsls	r2, r2, #6
 8001ece:	605a      	str	r2, [r3, #4]
	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b004      	add	sp, #16
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	18d3      	adds	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f006 fa4e 	bl	80083d4 <__errno>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	425b      	negs	r3, r3
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	18d2      	adds	r2, r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	0018      	movs	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b006      	add	sp, #24
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20009000 	.word	0x20009000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	20000524 	.word	0x20000524
 8001f6c:	200008a0 	.word	0x200008a0

08001f70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <SystemInit+0x14>)
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0512      	lsls	r2, r2, #20
 8001f7a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f8c:	f7ff fff0 	bl	8001f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f92:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <LoopForever+0xe>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa8:	4c0a      	ldr	r4, [pc, #40]	; (8001fd4 <LoopForever+0x16>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fb6:	f006 fa23 	bl	8008400 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fba:	f7fe f95b 	bl	8000274 <main>

08001fbe <LoopForever>:

LoopForever:
  b LoopForever
 8001fbe:	e7fe      	b.n	8001fbe <LoopForever>
  ldr   r0, =_estack
 8001fc0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 8001fcc:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 8001fd0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001fd4:	2000089c 	.word	0x2000089c

08001fd8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC1_COMP_IRQHandler>
	...

08001fdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_Init+0x3c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_Init+0x3c>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0049      	lsls	r1, r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f000 f810 	bl	800201c <HAL_InitTick>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e001      	b.n	800200c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fd62 	bl	8001ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200c:	1dfb      	adds	r3, r7, #7
 800200e:	781b      	ldrb	r3, [r3, #0]
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b002      	add	sp, #8
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	230f      	movs	r3, #15
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_InitTick+0x88>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d02b      	beq.n	800208c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002034:	4b1c      	ldr	r3, [pc, #112]	; (80020a8 <HAL_InitTick+0x8c>)
 8002036:	681c      	ldr	r4, [r3, #0]
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_InitTick+0x88>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	0019      	movs	r1, r3
 800203e:	23fa      	movs	r3, #250	; 0xfa
 8002040:	0098      	lsls	r0, r3, #2
 8002042:	f7fe f861 	bl	8000108 <__udivsi3>
 8002046:	0003      	movs	r3, r0
 8002048:	0019      	movs	r1, r3
 800204a:	0020      	movs	r0, r4
 800204c:	f7fe f85c 	bl	8000108 <__udivsi3>
 8002050:	0003      	movs	r3, r0
 8002052:	0018      	movs	r0, r3
 8002054:	f000 f951 	bl	80022fa <HAL_SYSTICK_Config>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d112      	bne.n	8002082 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d80a      	bhi.n	8002078 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	2301      	movs	r3, #1
 8002066:	425b      	negs	r3, r3
 8002068:	2200      	movs	r2, #0
 800206a:	0018      	movs	r0, r3
 800206c:	f000 f920 	bl	80022b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_InitTick+0x90>)
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e00d      	b.n	8002094 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002078:	230f      	movs	r3, #15
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e008      	b.n	8002094 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002082:	230f      	movs	r3, #15
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e003      	b.n	8002094 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800208c:	230f      	movs	r3, #15
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	b005      	add	sp, #20
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	20000008 	.word	0x20000008
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_IncTick+0x1c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x20>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	18d2      	adds	r2, r2, r3
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_IncTick+0x20>)
 80020c2:	601a      	str	r2, [r3, #0]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000894 	.word	0x20000894

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_GetTick+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	20000894 	.word	0x20000894

080020e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3301      	adds	r3, #1
 8002100:	d005      	beq.n	800210e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_Delay+0x40>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	001a      	movs	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	189b      	adds	r3, r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	f7ff ffe0 	bl	80020d4 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d8f7      	bhi.n	8002110 <HAL_Delay+0x28>
  {
  }
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b004      	add	sp, #16
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000008 	.word	0x20000008

0800212c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800213a:	4013      	ands	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	4b04      	ldr	r3, [pc, #16]	; (8002150 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40010000 	.word	0x40010000
 8002154:	fffff9ff 	.word	0xfffff9ff

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	0002      	movs	r2, r0
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b7f      	cmp	r3, #127	; 0x7f
 800216a:	d809      	bhi.n	8002180 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	231f      	movs	r3, #31
 8002174:	401a      	ands	r2, r3
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_EnableIRQ+0x30>)
 8002178:	2101      	movs	r1, #1
 800217a:	4091      	lsls	r1, r2
 800217c:	000a      	movs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	0002      	movs	r2, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b7f      	cmp	r3, #127	; 0x7f
 80021a0:	d828      	bhi.n	80021f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021a2:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <__NVIC_SetPriority+0xd4>)
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	33c0      	adds	r3, #192	; 0xc0
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	589b      	ldr	r3, [r3, r2]
 80021b2:	1dfa      	adds	r2, r7, #7
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	0011      	movs	r1, r2
 80021b8:	2203      	movs	r2, #3
 80021ba:	400a      	ands	r2, r1
 80021bc:	00d2      	lsls	r2, r2, #3
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	4091      	lsls	r1, r2
 80021c2:	000a      	movs	r2, r1
 80021c4:	43d2      	mvns	r2, r2
 80021c6:	401a      	ands	r2, r3
 80021c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	019b      	lsls	r3, r3, #6
 80021ce:	22ff      	movs	r2, #255	; 0xff
 80021d0:	401a      	ands	r2, r3
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	0018      	movs	r0, r3
 80021d8:	2303      	movs	r3, #3
 80021da:	4003      	ands	r3, r0
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e0:	481f      	ldr	r0, [pc, #124]	; (8002260 <__NVIC_SetPriority+0xd4>)
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	430a      	orrs	r2, r1
 80021ec:	33c0      	adds	r3, #192	; 0xc0
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021f2:	e031      	b.n	8002258 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <__NVIC_SetPriority+0xd8>)
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	0019      	movs	r1, r3
 80021fc:	230f      	movs	r3, #15
 80021fe:	400b      	ands	r3, r1
 8002200:	3b08      	subs	r3, #8
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3306      	adds	r3, #6
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	18d3      	adds	r3, r2, r3
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	1dfa      	adds	r2, r7, #7
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	0011      	movs	r1, r2
 8002214:	2203      	movs	r2, #3
 8002216:	400a      	ands	r2, r1
 8002218:	00d2      	lsls	r2, r2, #3
 800221a:	21ff      	movs	r1, #255	; 0xff
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	43d2      	mvns	r2, r2
 8002222:	401a      	ands	r2, r3
 8002224:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	019b      	lsls	r3, r3, #6
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	401a      	ands	r2, r3
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	2303      	movs	r3, #3
 8002236:	4003      	ands	r3, r0
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <__NVIC_SetPriority+0xd8>)
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	001c      	movs	r4, r3
 8002244:	230f      	movs	r3, #15
 8002246:	4023      	ands	r3, r4
 8002248:	3b08      	subs	r3, #8
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	430a      	orrs	r2, r1
 800224e:	3306      	adds	r3, #6
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	18c3      	adds	r3, r0, r3
 8002254:	3304      	adds	r3, #4
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b003      	add	sp, #12
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	e000e100 	.word	0xe000e100
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <SysTick_Config+0x40>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e010      	b.n	80022a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <SysTick_Config+0x44>)
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	3a01      	subs	r2, #1
 8002284:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	2301      	movs	r3, #1
 8002288:	425b      	negs	r3, r3
 800228a:	2103      	movs	r1, #3
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ff7d 	bl	800218c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SysTick_Config+0x44>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x44>)
 800229a:	2207      	movs	r2, #7
 800229c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229e:	2300      	movs	r3, #0
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	00ffffff 	.word	0x00ffffff
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	210f      	movs	r1, #15
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	1c02      	adds	r2, r0, #0
 80022c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	0011      	movs	r1, r2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ff5d 	bl	800218c <__NVIC_SetPriority>
}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	46bd      	mov	sp, r7
 80022d6:	b004      	add	sp, #16
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	0002      	movs	r2, r0
 80022e2:	1dfb      	adds	r3, r7, #7
 80022e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff ff33 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff ffaf 	bl	8002268 <SysTick_Config>
 800230a:	0003      	movs	r3, r0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e056      	b.n	80023d4 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7f5b      	ldrb	r3, [r3, #29]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff fc11 	bl	8001b60 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2202      	movs	r2, #2
 8002342:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	791b      	ldrb	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_CRC_Init+0xc8>)
 8002352:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2118      	movs	r1, #24
 8002360:	438a      	bics	r2, r1
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e00b      	b.n	800237e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f835 	bl	80023e0 <HAL_CRCEx_Polynomial_Set>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d001      	beq.n	800237e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02a      	b.n	80023d4 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	795b      	ldrb	r3, [r3, #5]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d105      	bne.n	8002392 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4252      	negs	r2, r2
 800238e:	611a      	str	r2, [r3, #16]
 8002390:	e004      	b.n	800239c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6912      	ldr	r2, [r2, #16]
 800239a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2260      	movs	r2, #96	; 0x60
 80023a4:	4393      	bics	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2280      	movs	r2, #128	; 0x80
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	04c11db7 	.word	0x04c11db7

080023e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ec:	2317      	movs	r3, #23
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023f4:	231f      	movs	r3, #31
 80023f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	613a      	str	r2, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_CRCEx_Polynomial_Set+0x36>
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	221f      	movs	r2, #31
 8002408:	4013      	ands	r3, r2
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	40da      	lsrs	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d0f1      	beq.n	80023fa <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d017      	beq.n	800244c <HAL_CRCEx_Polynomial_Set+0x6c>
 800241c:	d802      	bhi.n	8002424 <HAL_CRCEx_Polynomial_Set+0x44>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d021      	beq.n	8002466 <HAL_CRCEx_Polynomial_Set+0x86>
 8002422:	e01b      	b.n	800245c <HAL_CRCEx_Polynomial_Set+0x7c>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d009      	beq.n	800243c <HAL_CRCEx_Polynomial_Set+0x5c>
 8002428:	2b18      	cmp	r3, #24
 800242a:	d117      	bne.n	800245c <HAL_CRCEx_Polynomial_Set+0x7c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d91b      	bls.n	800246a <HAL_CRCEx_Polynomial_Set+0x8a>
      {
        status =   HAL_ERROR;
 8002432:	2317      	movs	r3, #23
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
      }
      break;
 800243a:	e016      	b.n	800246a <HAL_CRCEx_Polynomial_Set+0x8a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b07      	cmp	r3, #7
 8002440:	d915      	bls.n	800246e <HAL_CRCEx_Polynomial_Set+0x8e>
      {
        status =   HAL_ERROR;
 8002442:	2317      	movs	r3, #23
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
      }
      break;
 800244a:	e010      	b.n	800246e <HAL_CRCEx_Polynomial_Set+0x8e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	d90f      	bls.n	8002472 <HAL_CRCEx_Polynomial_Set+0x92>
      {
        status =   HAL_ERROR;
 8002452:	2317      	movs	r3, #23
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
      }
      break;
 800245a:	e00a      	b.n	8002472 <HAL_CRCEx_Polynomial_Set+0x92>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800245c:	2317      	movs	r3, #23
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
      break;
 8002464:	e006      	b.n	8002474 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	e004      	b.n	8002474 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	e002      	b.n	8002474 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	e000      	b.n	8002474 <HAL_CRCEx_Polynomial_Set+0x94>
      break;
 8002472:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 8002474:	2317      	movs	r3, #23
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10e      	bne.n	800249c <HAL_CRCEx_Polynomial_Set+0xbc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2218      	movs	r2, #24
 800248e:	4393      	bics	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800249c:	2317      	movs	r3, #23
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	781b      	ldrb	r3, [r3, #0]
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b006      	add	sp, #24
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e02d      	b.n	800251a <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2251      	movs	r2, #81	; 0x51
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_CRYP_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2250      	movs	r2, #80	; 0x50
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fb23 	bl	8001b20 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <HAL_CRYP_Init+0x78>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	0019      	movs	r1, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2251      	movs	r2, #81	; 0x51
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	fffaff99 	.word	0xfffaff99

08002528 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2251      	movs	r2, #81	; 0x51
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d000      	beq.n	8002546 <HAL_CRYP_Encrypt+0x1e>
 8002544:	e084      	b.n	8002650 <HAL_CRYP_Encrypt+0x128>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2251      	movs	r2, #81	; 0x51
 800254a:	2102      	movs	r1, #2
 800254c:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2250      	movs	r2, #80	; 0x50
 8002552:	5c9b      	ldrb	r3, [r3, r2]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_CRYP_Encrypt+0x34>
 8002558:	2302      	movs	r3, #2
 800255a:	e086      	b.n	800266a <HAL_CRYP_Encrypt+0x142>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2250      	movs	r2, #80	; 0x50
 8002560:	2101      	movs	r1, #1
 8002562:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	2100      	movs	r1, #0
 8002570:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8002586:	1dbb      	adds	r3, r7, #6
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	b299      	uxth	r1, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2242      	movs	r2, #66	; 0x42
 8002592:	5299      	strh	r1, [r3, r2]
 8002594:	e004      	b.n	80025a0 <HAL_CRYP_Encrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1dba      	adds	r2, r7, #6
 800259a:	2142      	movs	r1, #66	; 0x42
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	525a      	strh	r2, [r3, r1]
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2118      	movs	r1, #24
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <HAL_CRYP_Encrypt+0x14c>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    switch (algo)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b40      	cmp	r3, #64	; 0x40
 80025c0:	d00c      	beq.n	80025dc <HAL_CRYP_Encrypt+0xb4>
 80025c2:	d804      	bhi.n	80025ce <HAL_CRYP_Encrypt+0xa6>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <HAL_CRYP_Encrypt+0xb4>
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d007      	beq.n	80025dc <HAL_CRYP_Encrypt+0xb4>
 80025cc:	e027      	b.n	800261e <HAL_CRYP_Encrypt+0xf6>
 80025ce:	2b60      	cmp	r3, #96	; 0x60
 80025d0:	d00f      	beq.n	80025f2 <HAL_CRYP_Encrypt+0xca>
 80025d2:	2280      	movs	r2, #128	; 0x80
 80025d4:	0252      	lsls	r2, r2, #9
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d016      	beq.n	8002608 <HAL_CRYP_Encrypt+0xe0>
 80025da:	e020      	b.n	800261e <HAL_CRYP_Encrypt+0xf6>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80025dc:	2317      	movs	r3, #23
 80025de:	18fc      	adds	r4, r7, r3
 80025e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0011      	movs	r1, r2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 f8f8 	bl	80027dc <CRYP_AES_Encrypt>
 80025ec:	0003      	movs	r3, r0
 80025ee:	7023      	strb	r3, [r4, #0]
        break;
 80025f0:	e020      	b.n	8002634 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80025f2:	2317      	movs	r3, #23
 80025f4:	18fc      	adds	r4, r7, r3
 80025f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0011      	movs	r1, r2
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fb7d 	bl	8002cfc <CRYP_AESGCM_Process>
 8002602:	0003      	movs	r3, r0
 8002604:	7023      	strb	r3, [r4, #0]
        break;
 8002606:	e015      	b.n	8002634 <HAL_CRYP_Encrypt+0x10c>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8002608:	2317      	movs	r3, #23
 800260a:	18fc      	adds	r4, r7, r3
 800260c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0011      	movs	r1, r2
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fd24 	bl	8003060 <CRYP_AESCCM_Process>
 8002618:	0003      	movs	r3, r0
 800261a:	7023      	strb	r3, [r4, #0]
        break;
 800261c:	e00a      	b.n	8002634 <HAL_CRYP_Encrypt+0x10c>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	2220      	movs	r2, #32
 8002624:	431a      	orrs	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 800262a:	2317      	movs	r3, #23
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
        break;
 8002632:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 8002634:	2317      	movs	r3, #23
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <HAL_CRYP_Encrypt+0x13c>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2251      	movs	r2, #81	; 0x51
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2250      	movs	r2, #80	; 0x50
 800264a:	2100      	movs	r1, #0
 800264c:	5499      	strb	r1, [r3, r2]
 800264e:	e009      	b.n	8002664 <HAL_CRYP_Encrypt+0x13c>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	2208      	movs	r2, #8
 8002656:	431a      	orrs	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800265c:	2317      	movs	r3, #23
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002664:	2317      	movs	r3, #23
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	781b      	ldrb	r3, [r3, #0]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b007      	add	sp, #28
 8002670:	bd90      	pop	{r4, r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	00010060 	.word	0x00010060

08002678 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	801a      	strh	r2, [r3, #0]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2251      	movs	r2, #81	; 0x51
 800268c:	5c9b      	ldrb	r3, [r3, r2]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d000      	beq.n	8002696 <HAL_CRYP_Decrypt+0x1e>
 8002694:	e087      	b.n	80027a6 <HAL_CRYP_Decrypt+0x12e>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2251      	movs	r2, #81	; 0x51
 800269a:	2102      	movs	r1, #2
 800269c:	5499      	strb	r1, [r3, r2]

    /* Process locked */
    __HAL_LOCK(hcryp);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2250      	movs	r2, #80	; 0x50
 80026a2:	5c9b      	ldrb	r3, [r3, r2]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_CRYP_Decrypt+0x34>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e089      	b.n	80027c0 <HAL_CRYP_Decrypt+0x148>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2250      	movs	r2, #80	; 0x50
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2240      	movs	r2, #64	; 0x40
 80026be:	2100      	movs	r1, #0
 80026c0:	5299      	strh	r1, [r3, r2]
    hcryp->pCrypInBuffPtr = Input;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_CRYP_Decrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 80026d6:	1dbb      	adds	r3, r7, #6
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	b299      	uxth	r1, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2242      	movs	r2, #66	; 0x42
 80026e2:	5299      	strh	r1, [r3, r2]
 80026e4:	e004      	b.n	80026f0 <HAL_CRYP_Decrypt+0x78>
    }
    else
    {
      hcryp->Size = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1dba      	adds	r2, r7, #6
 80026ea:	2142      	movs	r1, #66	; 0x42
 80026ec:	8812      	ldrh	r2, [r2, #0]
 80026ee:	525a      	strh	r2, [r3, r1]
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2218      	movs	r2, #24
 80026f8:	4393      	bics	r3, r2
 80026fa:	001a      	movs	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2110      	movs	r1, #16
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2e      	ldr	r2, [pc, #184]	; (80027c8 <HAL_CRYP_Decrypt+0x150>)
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

    switch (algo)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d00c      	beq.n	8002732 <HAL_CRYP_Decrypt+0xba>
 8002718:	d804      	bhi.n	8002724 <HAL_CRYP_Decrypt+0xac>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_CRYP_Decrypt+0xba>
 800271e:	2b20      	cmp	r3, #32
 8002720:	d007      	beq.n	8002732 <HAL_CRYP_Decrypt+0xba>
 8002722:	e027      	b.n	8002774 <HAL_CRYP_Decrypt+0xfc>
 8002724:	2b60      	cmp	r3, #96	; 0x60
 8002726:	d00f      	beq.n	8002748 <HAL_CRYP_Decrypt+0xd0>
 8002728:	2280      	movs	r2, #128	; 0x80
 800272a:	0252      	lsls	r2, r2, #9
 800272c:	4293      	cmp	r3, r2
 800272e:	d016      	beq.n	800275e <HAL_CRYP_Decrypt+0xe6>
 8002730:	e020      	b.n	8002774 <HAL_CRYP_Decrypt+0xfc>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8002732:	2317      	movs	r3, #23
 8002734:	18fc      	adds	r4, r7, r3
 8002736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	0011      	movs	r1, r2
 800273c:	0018      	movs	r0, r3
 800273e:	f000 f8d5 	bl	80028ec <CRYP_AES_Decrypt>
 8002742:	0003      	movs	r3, r0
 8002744:	7023      	strb	r3, [r4, #0]
        break;
 8002746:	e020      	b.n	800278a <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8002748:	2317      	movs	r3, #23
 800274a:	18fc      	adds	r4, r7, r3
 800274c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0011      	movs	r1, r2
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fad2 	bl	8002cfc <CRYP_AESGCM_Process>
 8002758:	0003      	movs	r3, r0
 800275a:	7023      	strb	r3, [r4, #0]
        break;
 800275c:	e015      	b.n	800278a <HAL_CRYP_Decrypt+0x112>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800275e:	2317      	movs	r3, #23
 8002760:	18fc      	adds	r4, r7, r3
 8002762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f000 fc79 	bl	8003060 <CRYP_AESCCM_Process>
 800276e:	0003      	movs	r3, r0
 8002770:	7023      	strb	r3, [r4, #0]
        break;
 8002772:	e00a      	b.n	800278a <HAL_CRYP_Decrypt+0x112>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	2220      	movs	r2, #32
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8002780:	2317      	movs	r3, #23
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
        break;
 8002788:	46c0      	nop			; (mov r8, r8)
    }

    if (status == HAL_OK)
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d112      	bne.n	80027ba <HAL_CRYP_Decrypt+0x142>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2251      	movs	r2, #81	; 0x51
 8002798:	2101      	movs	r1, #1
 800279a:	5499      	strb	r1, [r3, r2]

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2250      	movs	r2, #80	; 0x50
 80027a0:	2100      	movs	r1, #0
 80027a2:	5499      	strb	r1, [r3, r2]
 80027a4:	e009      	b.n	80027ba <HAL_CRYP_Decrypt+0x142>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	2208      	movs	r2, #8
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 80027b2:	2317      	movs	r3, #23
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80027ba:	2317      	movs	r3, #23
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b007      	add	sp, #28
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	00010060 	.word	0x00010060

080027cc <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}

080027dc <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80027e6:	2301      	movs	r3, #1
 80027e8:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d109      	bne.n	8002806 <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d102      	bne.n	8002800 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	e002      	b.n	8002806 <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d122      	bne.n	8002852 <CRYP_AES_Encrypt+0x76>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fa11 	bl	8002c3c <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d017      	beq.n	8002852 <CRYP_AES_Encrypt+0x76>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6852      	ldr	r2, [r2, #4]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68d2      	ldr	r2, [r2, #12]
 8002850:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002868:	230e      	movs	r3, #14
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002870:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 8002872:	230c      	movs	r3, #12
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	5a52      	ldrh	r2, [r2, r1]
 800287c:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800287e:	e010      	b.n	80028a2 <CRYP_AES_Encrypt+0xc6>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f920 	bl	8002acc <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 800288c:	230e      	movs	r3, #14
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002894:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 8002896:	230c      	movs	r3, #12
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	5a52      	ldrh	r2, [r2, r1]
 80028a0:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2242      	movs	r2, #66	; 0x42
 80028a6:	5a9b      	ldrh	r3, [r3, r2]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	220e      	movs	r2, #14
 80028ae:	18ba      	adds	r2, r7, r2
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d209      	bcs.n	80028ca <CRYP_AES_Encrypt+0xee>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2242      	movs	r2, #66	; 0x42
 80028ba:	5a9b      	ldrh	r3, [r3, r2]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	220c      	movs	r2, #12
 80028c2:	18ba      	adds	r2, r7, r2
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d3da      	bcc.n	8002880 <CRYP_AES_Encrypt+0xa4>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2251      	movs	r2, #81	; 0x51
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}

080028ec <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80028f6:	2301      	movs	r3, #1
 80028f8:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d109      	bne.n	8002916 <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	2b01      	cmp	r3, #1
 8002908:	d102      	bne.n	8002910 <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	e002      	b.n	8002916 <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d000      	beq.n	800291e <CRYP_AES_Decrypt+0x32>
 800291c:	e089      	b.n	8002a32 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d062      	beq.n	80029ec <CRYP_AES_Decrypt+0x100>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2230      	movs	r2, #48	; 0x30
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d14d      	bne.n	80029cc <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2218      	movs	r2, #24
 8002938:	4393      	bics	r3, r2
 800293a:	001a      	movs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2108      	movs	r1, #8
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0011      	movs	r1, r2
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f974 	bl	8002c3c <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2101      	movs	r1, #1
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0011      	movs	r1, r2
 800296a:	0018      	movs	r0, r3
 800296c:	f000 ff0c 	bl	8003788 <CRYP_WaitOnCCFlag>
 8002970:	1e03      	subs	r3, r0, #0
 8002972:	d017      	beq.n	80029a4 <CRYP_AES_Decrypt+0xb8>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002988:	2210      	movs	r2, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2251      	movs	r2, #81	; 0x51
 8002994:	2101      	movs	r1, #1
 8002996:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2250      	movs	r2, #80	; 0x50
 800299c:	2100      	movs	r1, #0
 800299e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e08f      	b.n	8002ac4 <CRYP_AES_Decrypt+0x1d8>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2218      	movs	r2, #24
 80029bc:	4393      	bics	r3, r2
 80029be:	001a      	movs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2110      	movs	r1, #16
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e016      	b.n	80029fa <CRYP_AES_Decrypt+0x10e>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0011      	movs	r1, r2
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f931 	bl	8002c3c <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2118      	movs	r1, #24
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e006      	b.n	80029fa <CRYP_AES_Decrypt+0x10e>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	0011      	movs	r1, r2
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f921 	bl	8002c3c <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d017      	beq.n	8002a32 <CRYP_AES_Decrypt+0x146>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691a      	ldr	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6852      	ldr	r2, [r2, #4]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6892      	ldr	r2, [r2, #8]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68d2      	ldr	r2, [r2, #12]
 8002a30:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2101      	movs	r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8002a48:	230e      	movs	r3, #14
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002a50:	801a      	strh	r2, [r3, #0]
  outcount = hcryp->CrypOutCount;
 8002a52:	230c      	movs	r3, #12
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	5a52      	ldrh	r2, [r2, r1]
 8002a5c:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002a5e:	e010      	b.n	8002a82 <CRYP_AES_Decrypt+0x196>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f830 	bl	8002acc <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8002a6c:	230e      	movs	r3, #14
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002a74:	801a      	strh	r2, [r3, #0]
    outcount = hcryp->CrypOutCount;
 8002a76:	230c      	movs	r3, #12
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	5a52      	ldrh	r2, [r2, r1]
 8002a80:	801a      	strh	r2, [r3, #0]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2242      	movs	r2, #66	; 0x42
 8002a86:	5a9b      	ldrh	r3, [r3, r2]
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	220e      	movs	r2, #14
 8002a8e:	18ba      	adds	r2, r7, r2
 8002a90:	8812      	ldrh	r2, [r2, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d209      	bcs.n	8002aaa <CRYP_AES_Decrypt+0x1be>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2242      	movs	r2, #66	; 0x42
 8002a9a:	5a9b      	ldrh	r3, [r3, r2]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	18ba      	adds	r2, r7, r2
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3da      	bcc.n	8002a60 <CRYP_AES_Decrypt+0x174>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2251      	movs	r2, #81	; 0x51
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}

08002acc <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	18d2      	adds	r2, r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	18d2      	adds	r2, r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	18d2      	adds	r2, r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	18d2      	adds	r2, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3301      	adds	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0011      	movs	r1, r2
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f000 fe0b 	bl	8003788 <CRYP_WaitOnCCFlag>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d019      	beq.n	8002baa <CRYP_AES_ProcessData+0xde>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	438a      	bics	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2251      	movs	r2, #81	; 0x51
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2250      	movs	r2, #80	; 0x50
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5499      	strb	r1, [r3, r2]
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff fe11 	bl	80027cc <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e00a      	b.n	8002bd6 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68d9      	ldr	r1, [r3, #12]
 8002bc6:	230c      	movs	r3, #12
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < 4U; i++)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d9f1      	bls.n	8002bc0 <CRYP_AES_ProcessData+0xf4>
  }
  i= 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002be0:	e019      	b.n	8002c16 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2140      	movs	r1, #64	; 0x40
 8002bea:	5a5b      	ldrh	r3, [r3, r1]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	18d3      	adds	r3, r2, r3
 8002bf2:	220c      	movs	r2, #12
 8002bf4:	18ba      	adds	r2, r7, r2
 8002bf6:	69f9      	ldr	r1, [r7, #28]
 8002bf8:	0089      	lsls	r1, r1, #2
 8002bfa:	588a      	ldr	r2, [r1, r2]
 8002bfc:	601a      	str	r2, [r3, #0]
    hcryp->CrypOutCount++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2240      	movs	r2, #64	; 0x40
 8002c02:	5a9b      	ldrh	r3, [r3, r2]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3301      	adds	r3, #1
 8002c08:	b299      	uxth	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	5299      	strh	r1, [r3, r2]
    i++;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	3301      	adds	r3, #1
 8002c14:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	5a9b      	ldrh	r3, [r3, r2]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	0019      	movs	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2242      	movs	r2, #66	; 0x42
 8002c24:	5a9b      	ldrh	r3, [r3, r2]
 8002c26:	3303      	adds	r3, #3
 8002c28:	089b      	lsrs	r3, r3, #2
 8002c2a:	4299      	cmp	r1, r3
 8002c2c:	d202      	bcs.n	8002c34 <CRYP_AES_ProcessData+0x168>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d9d6      	bls.n	8002be2 <CRYP_AES_ProcessData+0x116>
  }
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b008      	add	sp, #32
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d051      	beq.n	8002cf2 <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d035      	beq.n	8002cc0 <CRYP_SetKey+0x84>
 8002c54:	2280      	movs	r2, #128	; 0x80
 8002c56:	02d2      	lsls	r2, r2, #11
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d000      	beq.n	8002c5e <CRYP_SetKey+0x22>
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);

        break;
      default:
        break;
 8002c5c:	e04a      	b.n	8002cf4 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6852      	ldr	r2, [r2, #4]
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68d2      	ldr	r2, [r2, #12]
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6952      	ldr	r2, [r2, #20]
 8002ca4:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6992      	ldr	r2, [r2, #24]
 8002cb0:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d2      	ldr	r2, [r2, #28]
 8002cbc:	611a      	str	r2, [r3, #16]
        break;
 8002cbe:	e019      	b.n	8002cf4 <CRYP_SetKey+0xb8>
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6852      	ldr	r2, [r2, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6892      	ldr	r2, [r2, #8]
 8002ce2:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	611a      	str	r2, [r3, #16]
        break;
 8002cf0:	e000      	b.n	8002cf4 <CRYP_SetKey+0xb8>
    }
  }
 8002cf2:	46c0      	nop			; (mov r8, r8)
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08e      	sub	sp, #56	; 0x38
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2242      	movs	r2, #66	; 0x42
 8002d0a:	5a9b      	ldrh	r3, [r3, r2]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002d12:	2301      	movs	r3, #1
 8002d14:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d118      	bne.n	8002d50 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10a      	bne.n	8002d3c <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	2142      	movs	r1, #66	; 0x42
 8002d32:	5a52      	ldrh	r2, [r2, r1]
 8002d34:	189a      	adds	r2, r3, r2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d3a:	e00f      	b.n	8002d5c <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2242      	movs	r2, #66	; 0x42
 8002d46:	5a9b      	ldrh	r3, [r3, r2]
 8002d48:	001a      	movs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d4e:	e005      	b.n	8002d5c <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2242      	movs	r2, #66	; 0x42
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	001a      	movs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d171      	bne.n	8002e46 <CRYP_AESGCM_Process+0x14a>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	49b9      	ldr	r1, [pc, #740]	; (8003058 <CRYP_AESGCM_Process+0x35c>)
 8002d74:	400a      	ands	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0011      	movs	r1, r2
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff ff5b 	bl	8002c3c <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68d2      	ldr	r2, [r2, #12]
 8002db4:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0011      	movs	r1, r2
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f000 fcdb 	bl	8003788 <CRYP_WaitOnCCFlag>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d00f      	beq.n	8002df6 <CRYP_AESGCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	2210      	movs	r2, #16
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2251      	movs	r2, #81	; 0x51
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2250      	movs	r2, #80	; 0x50
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e12b      	b.n	800304e <CRYP_AESGCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f000 fadd 	bl	80033cc <CRYP_GCMCCM_SetHeaderPhase>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <CRYP_AESGCM_Process+0x11e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e119      	b.n	800304e <CRYP_AESGCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a8c      	ldr	r2, [pc, #560]	; (8003058 <CRYP_AESGCM_Process+0x35c>)
 8002e28:	401a      	ands	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	01c9      	lsls	r1, r1, #7
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4986      	ldr	r1, [pc, #536]	; (800305c <CRYP_AESGCM_Process+0x360>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2242      	movs	r2, #66	; 0x42
 8002e4a:	5a9b      	ldrh	r3, [r3, r2]
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <CRYP_AESGCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	2203      	movs	r2, #3
 8002e5a:	4393      	bics	r3, r2
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e5e:	f7ff f939 	bl	80020d4 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	5a9b      	ldrh	r3, [r3, r2]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002e78:	e034      	b.n	8002ee4 <CRYP_AESGCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff fe23 	bl	8002acc <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	d022      	beq.n	8002ed2 <CRYP_AESGCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8c:	f7ff f922 	bl	80020d4 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <CRYP_AESGCM_Process+0x1a6>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d117      	bne.n	8002ed2 <CRYP_AESGCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	438a      	bics	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	2210      	movs	r2, #16
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2251      	movs	r2, #81	; 0x51
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2250      	movs	r2, #80	; 0x50
 8002eca:	2100      	movs	r1, #0
 8002ecc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0bd      	b.n	800304e <CRYP_AESGCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2240      	movs	r2, #64	; 0x40
 8002ede:	5a9b      	ldrh	r3, [r3, r2]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d203      	bcs.n	8002ef4 <CRYP_AESGCM_Process+0x1f8>
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3c2      	bcc.n	8002e7a <CRYP_AESGCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2242      	movs	r2, #66	; 0x42
 8002ef8:	5a9b      	ldrh	r3, [r3, r2]
 8002efa:	220f      	movs	r2, #15
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d100      	bne.n	8002f06 <CRYP_AESGCM_Process+0x20a>
 8002f04:	e0a2      	b.n	800304c <CRYP_AESGCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2242      	movs	r2, #66	; 0x42
 8002f0a:	5a9b      	ldrh	r3, [r3, r2]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	2142      	movs	r1, #66	; 0x42
 8002f18:	5a52      	ldrh	r2, [r2, r1]
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2218      	movs	r2, #24
 8002f26:	4013      	ands	r3, r2
 8002f28:	d10b      	bne.n	8002f42 <CRYP_AESGCM_Process+0x246>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a4a      	ldr	r2, [pc, #296]	; (800305c <CRYP_AESGCM_Process+0x360>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	0019      	movs	r1, r3
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	051a      	lsls	r2, r3, #20
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4013      	ands	r3, r2
 8002f48:	d105      	bne.n	8002f56 <CRYP_AESGCM_Process+0x25a>
    {
      lastwordsize = (16U - npblb) / 4U;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f54:	e005      	b.n	8002f62 <CRYP_AESGCM_Process+0x266>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2210      	movs	r2, #16
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	089b      	lsrs	r3, r3, #2
 8002f5e:	3301      	adds	r3, #1
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	633b      	str	r3, [r7, #48]	; 0x30
 8002f66:	e014      	b.n	8002f92 <CRYP_AESGCM_Process+0x296>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	18d2      	adds	r2, r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	3301      	adds	r3, #1
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
 8002f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3e6      	bcc.n	8002f68 <CRYP_AESGCM_Process+0x26c>
    }
    while (index < 4U)
 8002f9a:	e006      	b.n	8002faa <CRYP_AESGCM_Process+0x2ae>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
      index++;
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d9f5      	bls.n	8002f9c <CRYP_AESGCM_Process+0x2a0>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 fbe6 	bl	8003788 <CRYP_WaitOnCCFlag>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d00b      	beq.n	8002fd8 <CRYP_AESGCM_Process+0x2dc>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2251      	movs	r2, #81	; 0x51
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hcryp);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2250      	movs	r2, #80	; 0x50
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff fbfa 	bl	80027cc <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
 8002fec:	e00a      	b.n	8003004 <CRYP_AESGCM_Process+0x308>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68d9      	ldr	r1, [r3, #12]
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	50d1      	str	r1, [r2, r3]
    for (index = 0U; index < 4U; index++)
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	3301      	adds	r3, #1
 8003002:	633b      	str	r3, [r7, #48]	; 0x30
 8003004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003006:	2b03      	cmp	r3, #3
 8003008:	d9f1      	bls.n	8002fee <CRYP_AESGCM_Process+0x2f2>
    }
    for (index = 0U; index < lastwordsize; index++)
 800300a:	2300      	movs	r3, #0
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
 800300e:	e019      	b.n	8003044 <CRYP_AESGCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2140      	movs	r1, #64	; 0x40
 8003018:	5a5b      	ldrh	r3, [r3, r1]
 800301a:	b29b      	uxth	r3, r3
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	2208      	movs	r2, #8
 8003022:	18ba      	adds	r2, r7, r2
 8003024:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003026:	0089      	lsls	r1, r1, #2
 8003028:	588a      	ldr	r2, [r1, r2]
 800302a:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	5a9b      	ldrh	r3, [r3, r2]
 8003032:	b29b      	uxth	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	b299      	uxth	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2240      	movs	r2, #64	; 0x40
 800303c:	5299      	strh	r1, [r3, r2]
    for (index = 0U; index < lastwordsize; index++)
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	3301      	adds	r3, #1
 8003042:	633b      	str	r3, [r7, #48]	; 0x30
 8003044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	429a      	cmp	r2, r3
 800304a:	d3e1      	bcc.n	8003010 <CRYP_AESGCM_Process+0x314>
    }
  }

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	0018      	movs	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	b00e      	add	sp, #56	; 0x38
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	ffff9fff 	.word	0xffff9fff
 800305c:	ff0fffff 	.word	0xff0fffff

08003060 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2242      	movs	r2, #66	; 0x42
 800306e:	5a9b      	ldrh	r3, [r3, r2]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	b29b      	uxth	r3, r3
 8003074:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003076:	2301      	movs	r3, #1
 8003078:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	2b01      	cmp	r3, #1
 8003080:	d118      	bne.n	80030b4 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	2b01      	cmp	r3, #1
 8003088:	d10a      	bne.n	80030a0 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	2142      	movs	r1, #66	; 0x42
 8003096:	5a52      	ldrh	r2, [r2, r1]
 8003098:	189a      	adds	r2, r3, r2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c
 800309e:	e00f      	b.n	80030c0 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2242      	movs	r2, #66	; 0x42
 80030aa:	5a9b      	ldrh	r3, [r3, r2]
 80030ac:	001a      	movs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80030b2:	e005      	b.n	80030c0 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2242      	movs	r2, #66	; 0x42
 80030b8:	5a9b      	ldrh	r3, [r3, r2]
 80030ba:	001a      	movs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d171      	bne.n	80031aa <CRYP_AESCCM_Process+0x14a>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	49bb      	ldr	r1, [pc, #748]	; (80033c4 <CRYP_AESCCM_Process+0x364>)
 80030d8:	400a      	ands	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0011      	movs	r1, r2
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff fda9 	bl	8002c3c <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1a      	ldr	r2, [r3, #32]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1a      	ldr	r2, [r3, #32]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6852      	ldr	r2, [r2, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6892      	ldr	r2, [r2, #8]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68d2      	ldr	r2, [r2, #12]
 8003118:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0011      	movs	r1, r2
 8003130:	0018      	movs	r0, r3
 8003132:	f000 fb29 	bl	8003788 <CRYP_WaitOnCCFlag>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d00f      	beq.n	800315a <CRYP_AESCCM_Process+0xfa>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	2210      	movs	r2, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2251      	movs	r2, #81	; 0x51
 800314a:	2101      	movs	r1, #1
 800314c:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2250      	movs	r2, #80	; 0x50
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e130      	b.n	80033bc <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0011      	movs	r1, r2
 8003170:	0018      	movs	r0, r3
 8003172:	f000 f92b 	bl	80033cc <CRYP_GCMCCM_SetHeaderPhase>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <CRYP_AESCCM_Process+0x11e>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e11e      	b.n	80033bc <CRYP_AESCCM_Process+0x35c>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a8e      	ldr	r2, [pc, #568]	; (80033c4 <CRYP_AESCCM_Process+0x364>)
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	01c9      	lsls	r1, r1, #7
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4988      	ldr	r1, [pc, #544]	; (80033c8 <CRYP_AESCCM_Process+0x368>)
 80031a6:	400a      	ands	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2242      	movs	r2, #66	; 0x42
 80031ae:	5a9b      	ldrh	r3, [r3, r2]
 80031b0:	220f      	movs	r2, #15
 80031b2:	4013      	ands	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <CRYP_AESCCM_Process+0x162>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031bc:	2203      	movs	r2, #3
 80031be:	4393      	bics	r3, r2
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80031c2:	f7fe ff87 	bl	80020d4 <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61fb      	str	r3, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2240      	movs	r2, #64	; 0x40
 80031d6:	5a9b      	ldrh	r3, [r3, r2]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80031dc:	e034      	b.n	8003248 <CRYP_AESCCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff fc71 	bl	8002acc <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	d022      	beq.n	8003236 <CRYP_AESCCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 80031f0:	f7fe ff70 	bl	80020d4 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <CRYP_AESCCM_Process+0x1a6>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d117      	bne.n	8003236 <CRYP_AESCCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2101      	movs	r1, #1
 8003212:	438a      	bics	r2, r1
 8003214:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321a:	2210      	movs	r2, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2251      	movs	r2, #81	; 0x51
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2250      	movs	r2, #80	; 0x50
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0c2      	b.n	80033bc <CRYP_AESCCM_Process+0x35c>
      }
    }
    incount = hcryp->CrypInCount;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	5a9b      	ldrh	r3, [r3, r2]
 8003244:	b29b      	uxth	r3, r3
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	429a      	cmp	r2, r3
 800324e:	d203      	bcs.n	8003258 <CRYP_AESCCM_Process+0x1f8>
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	429a      	cmp	r2, r3
 8003256:	d3c2      	bcc.n	80031de <CRYP_AESCCM_Process+0x17e>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2242      	movs	r2, #66	; 0x42
 800325c:	5a9b      	ldrh	r3, [r3, r2]
 800325e:	220f      	movs	r2, #15
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d100      	bne.n	800326a <CRYP_AESCCM_Process+0x20a>
 8003268:	e0a7      	b.n	80033ba <CRYP_AESCCM_Process+0x35a>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2242      	movs	r2, #66	; 0x42
 800326e:	5a9b      	ldrh	r3, [r3, r2]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	b29b      	uxth	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	2142      	movs	r1, #66	; 0x42
 800327c:	5a52      	ldrh	r2, [r2, r1]
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2218      	movs	r2, #24
 800328a:	4013      	ands	r3, r2
 800328c:	2b10      	cmp	r3, #16
 800328e:	d10b      	bne.n	80032a8 <CRYP_AESCCM_Process+0x248>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a4c      	ldr	r2, [pc, #304]	; (80033c8 <CRYP_AESCCM_Process+0x368>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	051a      	lsls	r2, r3, #20
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2203      	movs	r2, #3
 80032ac:	4013      	ands	r3, r2
 80032ae:	d105      	bne.n	80032bc <CRYP_AESCCM_Process+0x25c>
    {
      lastwordsize = (16U - npblb) / 4U;
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2210      	movs	r2, #16
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ba:	e005      	b.n	80032c8 <CRYP_AESCCM_Process+0x268>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2210      	movs	r2, #16
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3301      	adds	r3, #1
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
 80032cc:	e014      	b.n	80032f8 <CRYP_AESCCM_Process+0x298>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	18d2      	adds	r2, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6812      	ldr	r2, [r2, #0]
 80032e2:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	3301      	adds	r3, #1
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3e6      	bcc.n	80032ce <CRYP_AESCCM_Process+0x26e>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8003300:	e006      	b.n	8003310 <CRYP_AESCCM_Process+0x2b0>
    {
      hcryp->Instance->DINR  = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
      loopcounter++;
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	3301      	adds	r3, #1
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	2b03      	cmp	r3, #3
 8003314:	d9f5      	bls.n	8003302 <CRYP_AESCCM_Process+0x2a2>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fa33 	bl	8003788 <CRYP_WaitOnCCFlag>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d00f      	beq.n	8003346 <CRYP_AESCCM_Process+0x2e6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	2210      	movs	r2, #16
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2251      	movs	r2, #81	; 0x51
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2250      	movs	r2, #80	; 0x50
 800333e:	2100      	movs	r1, #0
 8003340:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e03a      	b.n	80033bc <CRYP_AESCCM_Process+0x35c>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003356:	2300      	movs	r3, #0
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
 800335a:	e00a      	b.n	8003372 <CRYP_AESCCM_Process+0x312>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68d9      	ldr	r1, [r3, #12]
 8003362:	2308      	movs	r3, #8
 8003364:	18fb      	adds	r3, r7, r3
 8003366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	50d1      	str	r1, [r2, r3]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	3301      	adds	r3, #1
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2b03      	cmp	r3, #3
 8003376:	d9f1      	bls.n	800335c <CRYP_AESCCM_Process+0x2fc>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003378:	2300      	movs	r3, #0
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
 800337c:	e019      	b.n	80033b2 <CRYP_AESCCM_Process+0x352>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2140      	movs	r1, #64	; 0x40
 8003386:	5a5b      	ldrh	r3, [r3, r1]
 8003388:	b29b      	uxth	r3, r3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	2208      	movs	r2, #8
 8003390:	18ba      	adds	r2, r7, r2
 8003392:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003394:	0089      	lsls	r1, r1, #2
 8003396:	588a      	ldr	r2, [r1, r2]
 8003398:	601a      	str	r2, [r3, #0]
      hcryp->CrypOutCount++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	5a9b      	ldrh	r3, [r3, r2]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	b299      	uxth	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2240      	movs	r2, #64	; 0x40
 80033aa:	5299      	strh	r1, [r3, r2]
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	3301      	adds	r3, #1
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
 80033b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3e1      	bcc.n	800337e <CRYP_AESCCM_Process+0x31e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b00e      	add	sp, #56	; 0x38
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	ffff9fff 	.word	0xffff9fff
 80033c8:	ff0fffff 	.word	0xff0fffff

080033cc <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b093      	sub	sp, #76	; 0x4c
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 80033d6:	230c      	movs	r3, #12
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	4ad6      	ldr	r2, [pc, #856]	; (8003734 <CRYP_GCMCCM_SetHeaderPhase+0x368>)
 80033dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033de:	c313      	stmia	r3!, {r0, r1, r4}
 80033e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033e2:	c313      	stmia	r3!, {r0, r1, r4}
 80033e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033e6:	c313      	stmia	r3!, {r0, r1, r4}
 80033e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033ea:	c313      	stmia	r3!, {r0, r1, r4}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <CRYP_GCMCCM_SetHeaderPhase+0x32>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
 80033fc:	e002      	b.n	8003404 <CRYP_GCMCCM_SetHeaderPhase+0x38>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8003404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d100      	bne.n	800340c <CRYP_GCMCCM_SetHeaderPhase+0x40>
 800340a:	e197      	b.n	800373c <CRYP_GCMCCM_SetHeaderPhase+0x370>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4ac9      	ldr	r2, [pc, #804]	; (8003738 <CRYP_GCMCCM_SetHeaderPhase+0x36c>)
 8003414:	401a      	ands	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2180      	movs	r1, #128	; 0x80
 800341c:	0189      	lsls	r1, r1, #6
 800341e:	430a      	orrs	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8003432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003434:	220f      	movs	r2, #15
 8003436:	4013      	ands	r3, r2
 8003438:	d000      	beq.n	800343c <CRYP_GCMCCM_SetHeaderPhase+0x70>
 800343a:	e07c      	b.n	8003536 <CRYP_GCMCCM_SetHeaderPhase+0x16a>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 800343c:	2300      	movs	r3, #0
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
 8003440:	e072      	b.n	8003528 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800344a:	b29b      	uxth	r3, r3
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	18d2      	adds	r2, r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800345c:	b29b      	uxth	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800346e:	b29b      	uxth	r3, r3
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	18d2      	adds	r2, r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003480:	b29b      	uxth	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003492:	b29b      	uxth	r3, r3
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	18d2      	adds	r2, r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	18d2      	adds	r2, r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f955 	bl	8003788 <CRYP_WaitOnCCFlag>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d017      	beq.n	8003512 <CRYP_GCMCCM_SetHeaderPhase+0x146>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2101      	movs	r1, #1
 80034ee:	438a      	bics	r2, r1
 80034f0:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	2210      	movs	r2, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2251      	movs	r2, #81	; 0x51
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2250      	movs	r2, #80	; 0x50
 800350a:	2100      	movs	r1, #0
 800350c:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e134      	b.n	800377c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003524:	3304      	adds	r3, #4
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
 8003528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800352e:	429a      	cmp	r2, r3
 8003530:	d200      	bcs.n	8003534 <CRYP_GCMCCM_SetHeaderPhase+0x168>
 8003532:	e786      	b.n	8003442 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8003534:	e121      	b.n	800377a <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003536:	2300      	movs	r3, #0
 8003538:	647b      	str	r3, [r7, #68]	; 0x44
 800353a:	e072      	b.n	8003622 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003544:	b29b      	uxth	r3, r3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	18d2      	adds	r2, r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003556:	b29b      	uxth	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003568:	b29b      	uxth	r3, r3
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	18d2      	adds	r2, r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800357a:	b29b      	uxth	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800358c:	b29b      	uxth	r3, r3
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	18d2      	adds	r2, r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3301      	adds	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	18d2      	adds	r2, r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0011      	movs	r1, r2
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f8d8 	bl	8003788 <CRYP_WaitOnCCFlag>
 80035d8:	1e03      	subs	r3, r0, #0
 80035da:	d017      	beq.n	800360c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	2210      	movs	r2, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2251      	movs	r2, #81	; 0x51
 80035fc:	2101      	movs	r1, #1
 80035fe:	5499      	strb	r1, [r3, r2]

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2250      	movs	r2, #80	; 0x50
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b7      	b.n	800377c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2180      	movs	r1, #128	; 0x80
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800361c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800361e:	3304      	adds	r3, #4
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
 8003622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800362a:	429a      	cmp	r2, r3
 800362c:	d200      	bcs.n	8003630 <CRYP_GCMCCM_SetHeaderPhase+0x264>
 800362e:	e785      	b.n	800353c <CRYP_GCMCCM_SetHeaderPhase+0x170>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003630:	2300      	movs	r3, #0
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
 8003634:	e014      	b.n	8003660 <CRYP_GCMCCM_SetHeaderPhase+0x294>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800363e:	b29b      	uxth	r3, r3
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	18d2      	adds	r2, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003650:	b29b      	uxth	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 800365a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365c:	3301      	adds	r3, #1
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
 8003660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	2203      	movs	r2, #3
 8003666:	4013      	ands	r3, r2
 8003668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800366a:	429a      	cmp	r2, r3
 800366c:	d3e3      	bcc.n	8003636 <CRYP_GCMCCM_SetHeaderPhase+0x26a>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 800366e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003670:	2203      	movs	r2, #3
 8003672:	4013      	ands	r3, r2
 8003674:	d10b      	bne.n	800368e <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003676:	e006      	b.n	8003686 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	3301      	adds	r3, #1
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8003686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003688:	2b03      	cmp	r3, #3
 800368a:	d9f5      	bls.n	8003678 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 800368c:	e028      	b.n	80036e0 <CRYP_GCMCCM_SetHeaderPhase+0x314>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699a      	ldr	r2, [r3, #24]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003696:	b29b      	uxth	r3, r3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	18d3      	adds	r3, r2, r3
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	005a      	lsls	r2, r3, #1
 80036a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a8:	2103      	movs	r1, #3
 80036aa:	400b      	ands	r3, r1
 80036ac:	18d2      	adds	r2, r2, r3
 80036ae:	230c      	movs	r3, #12
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	58d2      	ldr	r2, [r2, r3]
 80036b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b8:	4013      	ands	r3, r2
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036c2:	609a      	str	r2, [r3, #8]
         loopcounter++;
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	3301      	adds	r3, #1
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 80036ca:	e006      	b.n	80036da <CRYP_GCMCCM_SetHeaderPhase+0x30e>
         {
           hcryp->Instance->DINR = 0x0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
           loopcounter++;
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	3301      	adds	r3, #1
 80036d8:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d9f5      	bls.n	80036cc <CRYP_GCMCCM_SetHeaderPhase+0x300>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	0011      	movs	r1, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f84e 	bl	8003788 <CRYP_WaitOnCCFlag>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d017      	beq.n	8003720 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	438a      	bics	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003704:	2210      	movs	r2, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2251      	movs	r2, #81	; 0x51
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2250      	movs	r2, #80	; 0x50
 8003718:	2100      	movs	r1, #0
 800371a:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e02d      	b.n	800377c <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e023      	b.n	800377a <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	08009498 	.word	0x08009498
 8003738:	ffff9fff 	.word	0xffff9fff
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2206      	movs	r2, #6
 8003744:	4393      	bics	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <CRYP_GCMCCM_SetHeaderPhase+0x3b8>)
 800375c:	401a      	ands	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	0189      	lsls	r1, r1, #6
 8003766:	430a      	orrs	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2101      	movs	r1, #1
 8003776:	430a      	orrs	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b013      	add	sp, #76	; 0x4c
 8003782:	bd90      	pop	{r4, r7, pc}
 8003784:	ffff9fff 	.word	0xffff9fff

08003788 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003792:	f7fe fc9f 	bl	80020d4 <HAL_GetTick>
 8003796:	0003      	movs	r3, r0
 8003798:	60fb      	str	r3, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800379a:	e00f      	b.n	80037bc <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	d00c      	beq.n	80037bc <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037a2:	f7fe fc97 	bl	80020d4 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <CRYP_WaitOnCCFlag+0x30>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e006      	b.n	80037ca <CRYP_WaitOnCCFlag+0x42>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d0e9      	beq.n	800379c <CRYP_WaitOnCCFlag+0x14>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	603a      	str	r2, [r7, #0]
 80037e0:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_FLASH_Program+0x98>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_FLASH_Program+0x1a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e03a      	b.n	8003864 <HAL_FLASH_Program+0x90>
 80037ee:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_FLASH_Program+0x98>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	; (800386c <HAL_FLASH_Program+0x98>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80037fa:	2517      	movs	r5, #23
 80037fc:	197c      	adds	r4, r7, r5
 80037fe:	23fa      	movs	r3, #250	; 0xfa
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	0018      	movs	r0, r3
 8003804:	f000 f876 	bl	80038f4 <FLASH_WaitForLastOperation>
 8003808:	0003      	movs	r3, r0
 800380a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800380c:	197b      	adds	r3, r7, r5
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d121      	bne.n	8003858 <HAL_FLASH_Program+0x84>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d108      	bne.n	800382c <HAL_FLASH_Program+0x58>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687c      	ldr	r4, [r7, #4]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	001a      	movs	r2, r3
 8003822:	0023      	movs	r3, r4
 8003824:	0008      	movs	r0, r1
 8003826:	f000 f8b3 	bl	8003990 <FLASH_Program_DoubleWord>
 800382a:	e005      	b.n	8003838 <HAL_FLASH_Program+0x64>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f005 fd90 	bl	8009358 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003838:	2317      	movs	r3, #23
 800383a:	18fc      	adds	r4, r7, r3
 800383c:	23fa      	movs	r3, #250	; 0xfa
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	0018      	movs	r0, r3
 8003842:	f000 f857 	bl	80038f4 <FLASH_WaitForLastOperation>
 8003846:	0003      	movs	r3, r0
 8003848:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800384a:	4b09      	ldr	r3, [pc, #36]	; (8003870 <HAL_FLASH_Program+0x9c>)
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	43d9      	mvns	r1, r3
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_FLASH_Program+0x9c>)
 8003854:	400a      	ands	r2, r1
 8003856:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_FLASH_Program+0x98>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800385e:	2317      	movs	r3, #23
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	781b      	ldrb	r3, [r3, #0]
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b006      	add	sp, #24
 800386a:	bdb0      	pop	{r4, r5, r7, pc}
 800386c:	20000528 	.word	0x20000528
 8003870:	40022000 	.word	0x40022000

08003874 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <HAL_FLASH_Unlock+0x3c>)
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	da0c      	bge.n	80038a2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003888:	4b09      	ldr	r3, [pc, #36]	; (80038b0 <HAL_FLASH_Unlock+0x3c>)
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <HAL_FLASH_Unlock+0x40>)
 800388c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_FLASH_Unlock+0x3c>)
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <HAL_FLASH_Unlock+0x44>)
 8003892:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_FLASH_Unlock+0x3c>)
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da02      	bge.n	80038a2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	40022000 	.word	0x40022000
 80038b4:	45670123 	.word	0x45670123
 80038b8:	cdef89ab 	.word	0xcdef89ab

080038bc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_FLASH_Lock+0x34>)
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_FLASH_Lock+0x34>)
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	0609      	lsls	r1, r1, #24
 80038d2:	430a      	orrs	r2, r1
 80038d4:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <HAL_FLASH_Lock+0x34>)
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	da02      	bge.n	80038e4 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80038de:	1dfb      	adds	r3, r7, #7
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40022000 	.word	0x40022000

080038f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 80038fc:	f7fe fbea 	bl	80020d4 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	189b      	adds	r3, r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	025b      	lsls	r3, r3, #9
 800390c:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 800390e:	e007      	b.n	8003920 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8003910:	f7fe fbe0 	bl	80020d4 <HAL_GetTick>
 8003914:	0002      	movs	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4293      	cmp	r3, r2
 800391a:	d801      	bhi.n	8003920 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e02a      	b.n	8003976 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <FLASH_WaitForLastOperation+0x8c>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	d1f2      	bne.n	8003910 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <FLASH_WaitForLastOperation+0x8c>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <FLASH_WaitForLastOperation+0x90>)
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8003934:	4b12      	ldr	r3, [pc, #72]	; (8003980 <FLASH_WaitForLastOperation+0x8c>)
 8003936:	4a14      	ldr	r2, [pc, #80]	; (8003988 <FLASH_WaitForLastOperation+0x94>)
 8003938:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003940:	4b12      	ldr	r3, [pc, #72]	; (800398c <FLASH_WaitForLastOperation+0x98>)
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e015      	b.n	8003976 <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800394a:	f7fe fbc3 	bl	80020d4 <HAL_GetTick>
 800394e:	0002      	movs	r2, r0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	189b      	adds	r3, r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003956:	e007      	b.n	8003968 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8003958:	f7fe fbbc 	bl	80020d4 <HAL_GetTick>
 800395c:	0002      	movs	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4293      	cmp	r3, r2
 8003962:	d801      	bhi.n	8003968 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e006      	b.n	8003976 <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <FLASH_WaitForLastOperation+0x8c>)
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	02db      	lsls	r3, r3, #11
 8003970:	4013      	ands	r3, r2
 8003972:	d1f1      	bne.n	8003958 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b004      	add	sp, #16
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	40022000 	.word	0x40022000
 8003984:	0000c3fa 	.word	0x0000c3fa
 8003988:	0000c3fb 	.word	0x0000c3fb
 800398c:	20000528 	.word	0x20000528

08003990 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	603a      	str	r2, [r7, #0]
 800399a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <FLASH_Program_DoubleWord+0x3c>)
 800399e:	695a      	ldr	r2, [r3, #20]
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <FLASH_Program_DoubleWord+0x3c>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	430a      	orrs	r2, r1
 80039a6:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80039ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	001c      	movs	r4, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	001d      	movs	r5, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3304      	adds	r3, #4
 80039be:	0022      	movs	r2, r4
 80039c0:	601a      	str	r2, [r3, #0]
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	40022000 	.word	0x40022000

080039d0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80039d0:	b5b0      	push	{r4, r5, r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80039da:	4b35      	ldr	r3, [pc, #212]	; (8003ab0 <HAL_FLASHEx_Erase+0xe0>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_FLASHEx_Erase+0x16>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e05f      	b.n	8003aa6 <HAL_FLASHEx_Erase+0xd6>
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_FLASHEx_Erase+0xe0>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_FLASHEx_Erase+0xe0>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80039f2:	250f      	movs	r5, #15
 80039f4:	197c      	adds	r4, r7, r5
 80039f6:	23fa      	movs	r3, #250	; 0xfa
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ff7a 	bl	80038f4 <FLASH_WaitForLastOperation>
 8003a00:	0003      	movs	r3, r0
 8003a02:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003a04:	197b      	adds	r3, r7, r5
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d146      	bne.n	8003a9a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d10e      	bne.n	8003a38 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 f84a 	bl	8003ab8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a24:	230f      	movs	r3, #15
 8003a26:	18fc      	adds	r4, r7, r3
 8003a28:	23fa      	movs	r3, #250	; 0xfa
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff ff61 	bl	80038f4 <FLASH_WaitForLastOperation>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]
 8003a36:	e030      	b.n	8003a9a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	4252      	negs	r2, r2
 8003a3e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	e01a      	b.n	8003a7e <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f845 	bl	8003ae0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003a56:	250f      	movs	r5, #15
 8003a58:	197c      	adds	r4, r7, r5
 8003a5a:	23fa      	movs	r3, #250	; 0xfa
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff ff48 	bl	80038f4 <FLASH_WaitForLastOperation>
 8003a64:	0003      	movs	r3, r0
 8003a66:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8003a68:	197b      	adds	r3, r7, r5
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	601a      	str	r2, [r3, #0]
          break;
 8003a76:	e00a      	b.n	8003a8e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	18d3      	adds	r3, r2, r3
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d3dc      	bcc.n	8003a48 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_FLASHEx_Erase+0xe4>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	4b08      	ldr	r3, [pc, #32]	; (8003ab4 <HAL_FLASHEx_Erase+0xe4>)
 8003a94:	2102      	movs	r1, #2
 8003a96:	438a      	bics	r2, r1
 8003a98:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_FLASHEx_Erase+0xe0>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003aa0:	230f      	movs	r3, #15
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	781b      	ldrb	r3, [r3, #0]
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b004      	add	sp, #16
 8003aac:	bdb0      	pop	{r4, r5, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	20000528 	.word	0x20000528
 8003ab4:	40022000 	.word	0x40022000

08003ab8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <FLASH_MassErase+0x24>)
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <FLASH_MassErase+0x24>)
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	0249      	lsls	r1, r1, #9
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	615a      	str	r2, [r3, #20]
}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b002      	add	sp, #8
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	40022000 	.word	0x40022000

08003ae0 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <FLASH_PageErase+0x2c>)
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <FLASH_PageErase+0x30>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	00da      	lsls	r2, r3, #3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <FLASH_PageErase+0x2c>)
 8003afe:	4905      	ldr	r1, [pc, #20]	; (8003b14 <FLASH_PageErase+0x34>)
 8003b00:	430a      	orrs	r2, r1
 8003b02:	615a      	str	r2, [r3, #20]
}
 8003b04:	46c0      	nop			; (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b004      	add	sp, #16
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40022000 	.word	0x40022000
 8003b10:	fffffe07 	.word	0xfffffe07
 8003b14:	00010002 	.word	0x00010002

08003b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b26:	e147      	b.n	8003db8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4091      	lsls	r1, r2
 8003b32:	000a      	movs	r2, r1
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d100      	bne.n	8003b40 <HAL_GPIO_Init+0x28>
 8003b3e:	e138      	b.n	8003db2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d00b      	beq.n	8003b60 <HAL_GPIO_Init+0x48>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d007      	beq.n	8003b60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b54:	2b11      	cmp	r3, #17
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b12      	cmp	r3, #18
 8003b5e:	d130      	bne.n	8003bc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	2201      	movs	r2, #1
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	0013      	movs	r3, r2
 8003bd2:	43da      	mvns	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	0013      	movs	r3, r2
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_Init+0xea>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b12      	cmp	r3, #18
 8003c00:	d123      	bne.n	8003c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	08da      	lsrs	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3208      	adds	r2, #8
 8003c0a:	0092      	lsls	r2, r2, #2
 8003c0c:	58d3      	ldr	r3, [r2, r3]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2207      	movs	r2, #7
 8003c14:	4013      	ands	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	0013      	movs	r3, r2
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2107      	movs	r1, #7
 8003c2e:	400b      	ands	r3, r1
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	409a      	lsls	r2, r3
 8003c34:	0013      	movs	r3, r2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	0092      	lsls	r2, r2, #2
 8003c46:	6939      	ldr	r1, [r7, #16]
 8003c48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	409a      	lsls	r2, r3
 8003c58:	0013      	movs	r3, r2
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	401a      	ands	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	055b      	lsls	r3, r3, #21
 8003c86:	4013      	ands	r3, r2
 8003c88:	d100      	bne.n	8003c8c <HAL_GPIO_Init+0x174>
 8003c8a:	e092      	b.n	8003db2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c8c:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3318      	adds	r3, #24
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	589b      	ldr	r3, [r3, r2]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	0013      	movs	r3, r2
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	23a0      	movs	r3, #160	; 0xa0
 8003cb4:	05db      	lsls	r3, r3, #23
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0x1ca>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a45      	ldr	r2, [pc, #276]	; (8003dd4 <HAL_GPIO_Init+0x2bc>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00d      	beq.n	8003cde <HAL_GPIO_Init+0x1c6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a44      	ldr	r2, [pc, #272]	; (8003dd8 <HAL_GPIO_Init+0x2c0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <HAL_GPIO_Init+0x1c2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a43      	ldr	r2, [pc, #268]	; (8003ddc <HAL_GPIO_Init+0x2c4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_GPIO_Init+0x1be>
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e006      	b.n	8003ce4 <HAL_GPIO_Init+0x1cc>
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e004      	b.n	8003ce4 <HAL_GPIO_Init+0x1cc>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_Init+0x1cc>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_GPIO_Init+0x1cc>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	400a      	ands	r2, r1
 8003cea:	00d2      	lsls	r2, r2, #3
 8003cec:	4093      	lsls	r3, r2
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cf4:	4936      	ldr	r1, [pc, #216]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d02:	4a33      	ldr	r2, [pc, #204]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	58d3      	ldr	r3, [r2, r3]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d28:	4929      	ldr	r1, [pc, #164]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d2a:	2280      	movs	r2, #128	; 0x80
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003d30:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d32:	2384      	movs	r3, #132	; 0x84
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d56:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d58:	2284      	movs	r2, #132	; 0x84
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43da      	mvns	r2, r3
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	035b      	lsls	r3, r3, #13
 8003d76:	4013      	ands	r3, r2
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	039b      	lsls	r3, r3, #14
 8003da0:	4013      	ands	r3, r2
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_GPIO_Init+0x2b8>)
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	3301      	adds	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	40da      	lsrs	r2, r3
 8003dc0:	1e13      	subs	r3, r2, #0
 8003dc2:	d000      	beq.n	8003dc6 <HAL_GPIO_Init+0x2ae>
 8003dc4:	e6b0      	b.n	8003b28 <HAL_GPIO_Init+0x10>
  }
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	40021800 	.word	0x40021800
 8003dd4:	50000400 	.word	0x50000400
 8003dd8:	50000800 	.word	0x50000800
 8003ddc:	50000c00 	.word	0x50000c00

08003de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	000a      	movs	r2, r1
 8003dea:	1cbb      	adds	r3, r7, #2
 8003dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	1cba      	adds	r2, r7, #2
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	4013      	ands	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	e003      	b.n	8003e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e04:	230f      	movs	r3, #15
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003e0c:	230f      	movs	r3, #15
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	0008      	movs	r0, r1
 8003e24:	0011      	movs	r1, r2
 8003e26:	1cbb      	adds	r3, r7, #2
 8003e28:	1c02      	adds	r2, r0, #0
 8003e2a:	801a      	strh	r2, [r3, #0]
 8003e2c:	1c7b      	adds	r3, r7, #1
 8003e2e:	1c0a      	adds	r2, r1, #0
 8003e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e32:	1c7b      	adds	r3, r7, #1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d004      	beq.n	8003e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e3a:	1cbb      	adds	r3, r7, #2
 8003e3c:	881a      	ldrh	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e42:	e003      	b.n	8003e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e44:	1cbb      	adds	r3, r7, #2
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b002      	add	sp, #8
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	000a      	movs	r2, r1
 8003e5e:	1cbb      	adds	r3, r7, #2
 8003e60:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e68:	1cbb      	adds	r3, r7, #2
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	041a      	lsls	r2, r3, #16
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	43db      	mvns	r3, r3
 8003e76:	1cb9      	adds	r1, r7, #2
 8003e78:	8809      	ldrh	r1, [r1, #0]
 8003e7a:	400b      	ands	r3, r1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	619a      	str	r2, [r3, #24]
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	0002      	movs	r2, r0
 8003e94:	1dbb      	adds	r3, r7, #6
 8003e96:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	1dba      	adds	r2, r7, #6
 8003e9e:	8812      	ldrh	r2, [r2, #0]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d008      	beq.n	8003eb6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ea6:	1dba      	adds	r2, r7, #6
 8003ea8:	8812      	ldrh	r2, [r2, #0]
 8003eaa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003eac:	1dbb      	adds	r3, r7, #6
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fc ff87 	bl	8000dc4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	1dba      	adds	r2, r7, #6
 8003ebc:	8812      	ldrh	r2, [r2, #0]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d008      	beq.n	8003ed4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ec4:	1dba      	adds	r2, r7, #6
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003eca:	1dbb      	adds	r3, r7, #6
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc ff42 	bl	8000d58 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021800 	.word	0x40021800

08003ee0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d11f      	bne.n	8003f44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	0013      	movs	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	4912      	ldr	r1, [pc, #72]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f7fc f8f8 	bl	8000108 <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f1e:	e008      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e009      	b.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	2380      	movs	r3, #128	; 0x80
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d0ed      	beq.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b004      	add	sp, #16
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	40007000 	.word	0x40007000
 8003f54:	fffff9ff 	.word	0xfffff9ff
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	000f4240 	.word	0x000f4240

08003f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e304      	b.n	800457c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2201      	movs	r2, #1
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d100      	bne.n	8003f7e <HAL_RCC_OscConfig+0x1e>
 8003f7c:	e07c      	b.n	8004078 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7e:	4bc3      	ldr	r3, [pc, #780]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2238      	movs	r2, #56	; 0x38
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f88:	4bc0      	ldr	r3, [pc, #768]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d102      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3e>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d002      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x44>
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa4:	4bb9      	ldr	r3, [pc, #740]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	029b      	lsls	r3, r3, #10
 8003fac:	4013      	ands	r3, r2
 8003fae:	d062      	beq.n	8004076 <HAL_RCC_OscConfig+0x116>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d15e      	bne.n	8004076 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e2df      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	025b      	lsls	r3, r3, #9
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x78>
 8003fc8:	4bb0      	ldr	r3, [pc, #704]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4baf      	ldr	r3, [pc, #700]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	0249      	lsls	r1, r1, #9
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e020      	b.n	800401a <HAL_RCC_OscConfig+0xba>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	23a0      	movs	r3, #160	; 0xa0
 8003fde:	02db      	lsls	r3, r3, #11
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d10e      	bne.n	8004002 <HAL_RCC_OscConfig+0xa2>
 8003fe4:	4ba9      	ldr	r3, [pc, #676]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4ba8      	ldr	r3, [pc, #672]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	02c9      	lsls	r1, r1, #11
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4ba6      	ldr	r3, [pc, #664]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4ba5      	ldr	r3, [pc, #660]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	0249      	lsls	r1, r1, #9
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e00b      	b.n	800401a <HAL_RCC_OscConfig+0xba>
 8004002:	4ba2      	ldr	r3, [pc, #648]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4ba1      	ldr	r3, [pc, #644]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004008:	49a1      	ldr	r1, [pc, #644]	; (8004290 <HAL_RCC_OscConfig+0x330>)
 800400a:	400a      	ands	r2, r1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	4b9f      	ldr	r3, [pc, #636]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b9e      	ldr	r3, [pc, #632]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004014:	499f      	ldr	r1, [pc, #636]	; (8004294 <HAL_RCC_OscConfig+0x334>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7fe f857 	bl	80020d4 <HAL_GetTick>
 8004026:	0003      	movs	r3, r0
 8004028:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f852 	bl	80020d4 <HAL_GetTick>
 8004030:	0002      	movs	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e29e      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403e:	4b93      	ldr	r3, [pc, #588]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	029b      	lsls	r3, r3, #10
 8004046:	4013      	ands	r3, r2
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xcc>
 800404a:	e015      	b.n	8004078 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f842 	bl	80020d4 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004056:	f7fe f83d 	bl	80020d4 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b64      	cmp	r3, #100	; 0x64
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e289      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004068:	4b88      	ldr	r3, [pc, #544]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	029b      	lsls	r3, r3, #10
 8004070:	4013      	ands	r3, r2
 8004072:	d1f0      	bne.n	8004056 <HAL_RCC_OscConfig+0xf6>
 8004074:	e000      	b.n	8004078 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004076:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d100      	bne.n	8004084 <HAL_RCC_OscConfig+0x124>
 8004082:	e099      	b.n	80041b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004084:	4b81      	ldr	r3, [pc, #516]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2238      	movs	r2, #56	; 0x38
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408e:	4b7f      	ldr	r3, [pc, #508]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2203      	movs	r2, #3
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b10      	cmp	r3, #16
 800409c:	d102      	bne.n	80040a4 <HAL_RCC_OscConfig+0x144>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d002      	beq.n	80040aa <HAL_RCC_OscConfig+0x14a>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d135      	bne.n	8004116 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040aa:	4b78      	ldr	r3, [pc, #480]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4013      	ands	r3, r2
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x162>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e25c      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b72      	ldr	r3, [pc, #456]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a74      	ldr	r2, [pc, #464]	; (8004298 <HAL_RCC_OscConfig+0x338>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	021a      	lsls	r2, r3, #8
 80040d2:	4b6e      	ldr	r3, [pc, #440]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d112      	bne.n	8004104 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040de:	4b6b      	ldr	r3, [pc, #428]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6e      	ldr	r2, [pc, #440]	; (800429c <HAL_RCC_OscConfig+0x33c>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	4b67      	ldr	r3, [pc, #412]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040f2:	4b66      	ldr	r3, [pc, #408]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	2207      	movs	r2, #7
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a68      	ldr	r2, [pc, #416]	; (80042a0 <HAL_RCC_OscConfig+0x340>)
 80040fe:	40da      	lsrs	r2, r3
 8004100:	4b68      	ldr	r3, [pc, #416]	; (80042a4 <HAL_RCC_OscConfig+0x344>)
 8004102:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004104:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_OscConfig+0x348>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0018      	movs	r0, r3
 800410a:	f7fd ff87 	bl	800201c <HAL_InitTick>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d051      	beq.n	80041b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e232      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d030      	beq.n	8004180 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800411e:	4b5b      	ldr	r3, [pc, #364]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5e      	ldr	r2, [pc, #376]	; (800429c <HAL_RCC_OscConfig+0x33c>)
 8004124:	4013      	ands	r3, r2
 8004126:	0019      	movs	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	4b57      	ldr	r3, [pc, #348]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800412e:	430a      	orrs	r2, r1
 8004130:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004132:	4b56      	ldr	r3, [pc, #344]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b55      	ldr	r3, [pc, #340]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004138:	2180      	movs	r1, #128	; 0x80
 800413a:	0049      	lsls	r1, r1, #1
 800413c:	430a      	orrs	r2, r1
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd ffc8 	bl	80020d4 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414a:	f7fd ffc3 	bl	80020d4 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e20f      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4013      	ands	r3, r2
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004168:	4b48      	ldr	r3, [pc, #288]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a4a      	ldr	r2, [pc, #296]	; (8004298 <HAL_RCC_OscConfig+0x338>)
 800416e:	4013      	ands	r3, r2
 8004170:	0019      	movs	r1, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	021a      	lsls	r2, r3, #8
 8004178:	4b44      	ldr	r3, [pc, #272]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	e01b      	b.n	80041b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b41      	ldr	r3, [pc, #260]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004186:	4949      	ldr	r1, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x34c>)
 8004188:	400a      	ands	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd ffa2 	bl	80020d4 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004196:	f7fd ff9d 	bl	80020d4 <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1e9      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a8:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4013      	ands	r3, r2
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x236>
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2208      	movs	r2, #8
 80041be:	4013      	ands	r3, r2
 80041c0:	d047      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041c2:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2238      	movs	r2, #56	; 0x38
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b18      	cmp	r3, #24
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80041ce:	4b2f      	ldr	r3, [pc, #188]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d03c      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d138      	bne.n	8004252 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e1cb      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d019      	beq.n	8004220 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80041ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041f0:	4b26      	ldr	r3, [pc, #152]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	430a      	orrs	r2, r1
 80041f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd ff6c 	bl	80020d4 <HAL_GetTick>
 80041fc:	0003      	movs	r3, r0
 80041fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004202:	f7fd ff67 	bl	80020d4 <HAL_GetTick>
 8004206:	0002      	movs	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e1b3      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	2202      	movs	r2, #2
 800421a:	4013      	ands	r3, r2
 800421c:	d0f1      	beq.n	8004202 <HAL_RCC_OscConfig+0x2a2>
 800421e:	e018      	b.n	8004252 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd ff52 	bl	80020d4 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004236:	f7fd ff4d 	bl	80020d4 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e199      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	2202      	movs	r2, #2
 800424e:	4013      	ands	r3, r2
 8004250:	d1f1      	bne.n	8004236 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2204      	movs	r2, #4
 8004258:	4013      	ands	r3, r2
 800425a:	d100      	bne.n	800425e <HAL_RCC_OscConfig+0x2fe>
 800425c:	e0c6      	b.n	80043ec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425e:	231f      	movs	r3, #31
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2238      	movs	r2, #56	; 0x38
 800426c:	4013      	ands	r3, r2
 800426e:	2b20      	cmp	r3, #32
 8004270:	d11e      	bne.n	80042b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004272:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_RCC_OscConfig+0x32c>)
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	2202      	movs	r2, #2
 8004278:	4013      	ands	r3, r2
 800427a:	d100      	bne.n	800427e <HAL_RCC_OscConfig+0x31e>
 800427c:	e0b6      	b.n	80043ec <HAL_RCC_OscConfig+0x48c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d000      	beq.n	8004288 <HAL_RCC_OscConfig+0x328>
 8004286:	e0b1      	b.n	80043ec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e177      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
 800428c:	40021000 	.word	0x40021000
 8004290:	fffeffff 	.word	0xfffeffff
 8004294:	fffbffff 	.word	0xfffbffff
 8004298:	ffff80ff 	.word	0xffff80ff
 800429c:	ffffc7ff 	.word	0xffffc7ff
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004
 80042ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042b0:	4bb4      	ldr	r3, [pc, #720]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80042b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	055b      	lsls	r3, r3, #21
 80042b8:	4013      	ands	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x360>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_RCC_OscConfig+0x362>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	4baf      	ldr	r3, [pc, #700]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80042c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042ca:	4bae      	ldr	r3, [pc, #696]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80042cc:	2180      	movs	r1, #128	; 0x80
 80042ce:	0549      	lsls	r1, r1, #21
 80042d0:	430a      	orrs	r2, r1
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80042d4:	4bab      	ldr	r3, [pc, #684]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	055b      	lsls	r3, r3, #21
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80042e2:	231f      	movs	r3, #31
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ea:	4ba7      	ldr	r3, [pc, #668]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f6:	4ba4      	ldr	r3, [pc, #656]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4ba3      	ldr	r3, [pc, #652]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	0049      	lsls	r1, r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004304:	f7fd fee6 	bl	80020d4 <HAL_GetTick>
 8004308:	0003      	movs	r3, r0
 800430a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800430e:	f7fd fee1 	bl	80020d4 <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e12d      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004320:	4b99      	ldr	r3, [pc, #612]	; (8004588 <HAL_RCC_OscConfig+0x628>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4013      	ands	r3, r2
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x3e2>
 8004334:	4b93      	ldr	r3, [pc, #588]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004336:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004338:	4b92      	ldr	r3, [pc, #584]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800433a:	2101      	movs	r1, #1
 800433c:	430a      	orrs	r2, r1
 800433e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004340:	e01c      	b.n	800437c <HAL_RCC_OscConfig+0x41c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b05      	cmp	r3, #5
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0x404>
 800434a:	4b8e      	ldr	r3, [pc, #568]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800434c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800434e:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004350:	2104      	movs	r1, #4
 8004352:	430a      	orrs	r2, r1
 8004354:	65da      	str	r2, [r3, #92]	; 0x5c
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800435a:	4b8a      	ldr	r3, [pc, #552]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800435c:	2101      	movs	r1, #1
 800435e:	430a      	orrs	r2, r1
 8004360:	65da      	str	r2, [r3, #92]	; 0x5c
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0x41c>
 8004364:	4b87      	ldr	r3, [pc, #540]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004368:	4b86      	ldr	r3, [pc, #536]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800436a:	2101      	movs	r1, #1
 800436c:	438a      	bics	r2, r1
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004372:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004374:	4b83      	ldr	r3, [pc, #524]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004376:	2104      	movs	r1, #4
 8004378:	438a      	bics	r2, r1
 800437a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d014      	beq.n	80043ae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fea6 	bl	80020d4 <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438c:	e009      	b.n	80043a2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fd fea1 	bl	80020d4 <HAL_GetTick>
 8004392:	0002      	movs	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x62c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e0ec      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	4b78      	ldr	r3, [pc, #480]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2202      	movs	r2, #2
 80043a8:	4013      	ands	r3, r2
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x42e>
 80043ac:	e013      	b.n	80043d6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd fe91 	bl	80020d4 <HAL_GetTick>
 80043b2:	0003      	movs	r3, r0
 80043b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043b6:	e009      	b.n	80043cc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b8:	f7fd fe8c 	bl	80020d4 <HAL_GetTick>
 80043bc:	0002      	movs	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	4a72      	ldr	r2, [pc, #456]	; (800458c <HAL_RCC_OscConfig+0x62c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0d7      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043cc:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	2202      	movs	r2, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80043d6:	231f      	movs	r3, #31
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80043e0:	4b68      	ldr	r3, [pc, #416]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80043e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80043e6:	496a      	ldr	r1, [pc, #424]	; (8004590 <HAL_RCC_OscConfig+0x630>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d100      	bne.n	80043f6 <HAL_RCC_OscConfig+0x496>
 80043f4:	e0c1      	b.n	800457a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043f6:	4b63      	ldr	r3, [pc, #396]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2238      	movs	r2, #56	; 0x38
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d100      	bne.n	8004404 <HAL_RCC_OscConfig+0x4a4>
 8004402:	e081      	b.n	8004508 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d156      	bne.n	80044ba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440c:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004412:	4960      	ldr	r1, [pc, #384]	; (8004594 <HAL_RCC_OscConfig+0x634>)
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fd fe5c 	bl	80020d4 <HAL_GetTick>
 800441c:	0003      	movs	r3, r0
 800441e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004422:	f7fd fe57 	bl	80020d4 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e0a3      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004434:	4b53      	ldr	r3, [pc, #332]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	049b      	lsls	r3, r3, #18
 800443c:	4013      	ands	r3, r2
 800443e:	d1f0      	bne.n	8004422 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a54      	ldr	r2, [pc, #336]	; (8004598 <HAL_RCC_OscConfig+0x638>)
 8004446:	4013      	ands	r3, r2
 8004448:	0019      	movs	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	431a      	orrs	r2, r3
 800446e:	4b45      	ldr	r3, [pc, #276]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004470:	430a      	orrs	r2, r1
 8004472:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	0449      	lsls	r1, r1, #17
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004482:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004488:	2180      	movs	r1, #128	; 0x80
 800448a:	0549      	lsls	r1, r1, #21
 800448c:	430a      	orrs	r2, r1
 800448e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd fe20 	bl	80020d4 <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449a:	f7fd fe1b 	bl	80020d4 <HAL_GetTick>
 800449e:	0002      	movs	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e067      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	049b      	lsls	r3, r3, #18
 80044b4:	4013      	ands	r3, r2
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x53a>
 80044b8:	e05f      	b.n	800457a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b32      	ldr	r3, [pc, #200]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b31      	ldr	r3, [pc, #196]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044c0:	4934      	ldr	r1, [pc, #208]	; (8004594 <HAL_RCC_OscConfig+0x634>)
 80044c2:	400a      	ands	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b2e      	ldr	r3, [pc, #184]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044cc:	2103      	movs	r1, #3
 80044ce:	438a      	bics	r2, r1
 80044d0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044d8:	4930      	ldr	r1, [pc, #192]	; (800459c <HAL_RCC_OscConfig+0x63c>)
 80044da:	400a      	ands	r2, r1
 80044dc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fd fdf9 	bl	80020d4 <HAL_GetTick>
 80044e2:	0003      	movs	r3, r0
 80044e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd fdf4 	bl	80020d4 <HAL_GetTick>
 80044ec:	0002      	movs	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e040      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fa:	4b22      	ldr	r3, [pc, #136]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	2380      	movs	r3, #128	; 0x80
 8004500:	049b      	lsls	r3, r3, #18
 8004502:	4013      	ands	r3, r2
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x588>
 8004506:	e038      	b.n	800457a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e033      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x624>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2203      	movs	r2, #3
 800451e:	401a      	ands	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	429a      	cmp	r2, r3
 8004526:	d126      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2270      	movs	r2, #112	; 0x70
 800452c:	401a      	ands	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d11f      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	23fe      	movs	r3, #254	; 0xfe
 800453a:	01db      	lsls	r3, r3, #7
 800453c:	401a      	ands	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004544:	429a      	cmp	r2, r3
 8004546:	d116      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	23f8      	movs	r3, #248	; 0xf8
 800454c:	039b      	lsls	r3, r3, #14
 800454e:	401a      	ands	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004554:	429a      	cmp	r2, r3
 8004556:	d10e      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	23e0      	movs	r3, #224	; 0xe0
 800455c:	051b      	lsls	r3, r3, #20
 800455e:	401a      	ands	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0f5b      	lsrs	r3, r3, #29
 800456c:	075a      	lsls	r2, r3, #29
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b008      	add	sp, #32
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
 800458c:	00001388 	.word	0x00001388
 8004590:	efffffff 	.word	0xefffffff
 8004594:	feffffff 	.word	0xfeffffff
 8004598:	11c1808c 	.word	0x11c1808c
 800459c:	eefeffff 	.word	0xeefeffff

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0e9      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2207      	movs	r2, #7
 80045ba:	4013      	ands	r3, r2
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d91e      	bls.n	8004600 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b73      	ldr	r3, [pc, #460]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2207      	movs	r2, #7
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	4b70      	ldr	r3, [pc, #448]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045d4:	f7fd fd7e 	bl	80020d4 <HAL_GetTick>
 80045d8:	0003      	movs	r3, r0
 80045da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045dc:	e009      	b.n	80045f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045de:	f7fd fd79 	bl	80020d4 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a6a      	ldr	r2, [pc, #424]	; (8004794 <HAL_RCC_ClockConfig+0x1f4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0ca      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045f2:	4b67      	ldr	r3, [pc, #412]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2207      	movs	r2, #7
 80045f8:	4013      	ands	r3, r2
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d1ee      	bne.n	80045de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	d015      	beq.n	8004636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2204      	movs	r2, #4
 8004610:	4013      	ands	r3, r2
 8004612:	d006      	beq.n	8004622 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004614:	4b60      	ldr	r3, [pc, #384]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 800461a:	21e0      	movs	r1, #224	; 0xe0
 800461c:	01c9      	lsls	r1, r1, #7
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b5d      	ldr	r3, [pc, #372]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_RCC_ClockConfig+0x1fc>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004632:	430a      	orrs	r2, r1
 8004634:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	4013      	ands	r3, r2
 800463e:	d057      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004648:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	4013      	ands	r3, r2
 8004652:	d12b      	bne.n	80046ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e097      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004660:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	049b      	lsls	r3, r3, #18
 8004668:	4013      	ands	r3, r2
 800466a:	d11f      	bne.n	80046ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e08b      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004678:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4013      	ands	r3, r2
 8004682:	d113      	bne.n	80046ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e07f      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d106      	bne.n	800469e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004690:	4b41      	ldr	r3, [pc, #260]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004694:	2202      	movs	r2, #2
 8004696:	4013      	ands	r3, r2
 8004698:	d108      	bne.n	80046ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e074      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800469e:	4b3e      	ldr	r3, [pc, #248]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 80046a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a2:	2202      	movs	r2, #2
 80046a4:	4013      	ands	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e06d      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2207      	movs	r2, #7
 80046b2:	4393      	bics	r3, r2
 80046b4:	0019      	movs	r1, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 80046bc:	430a      	orrs	r2, r1
 80046be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c0:	f7fd fd08 	bl	80020d4 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c8:	e009      	b.n	80046de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f7fd fd03 	bl	80020d4 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <HAL_RCC_ClockConfig+0x1f4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e054      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2238      	movs	r2, #56	; 0x38
 80046e4:	401a      	ands	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d1ec      	bne.n	80046ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f0:	4b27      	ldr	r3, [pc, #156]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2207      	movs	r2, #7
 80046f6:	4013      	ands	r3, r2
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d21e      	bcs.n	800473c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b24      	ldr	r3, [pc, #144]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2207      	movs	r2, #7
 8004704:	4393      	bics	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	4b21      	ldr	r3, [pc, #132]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004710:	f7fd fce0 	bl	80020d4 <HAL_GetTick>
 8004714:	0003      	movs	r3, r0
 8004716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004718:	e009      	b.n	800472e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471a:	f7fd fcdb 	bl	80020d4 <HAL_GetTick>
 800471e:	0002      	movs	r2, r0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_RCC_ClockConfig+0x1f4>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e02c      	b.n	8004788 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800472e:	4b18      	ldr	r3, [pc, #96]	; (8004790 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2207      	movs	r2, #7
 8004734:	4013      	ands	r3, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d1ee      	bne.n	800471a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2204      	movs	r2, #4
 8004742:	4013      	ands	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_RCC_ClockConfig+0x200>)
 800474c:	4013      	ands	r3, r2
 800474e:	0019      	movs	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4b10      	ldr	r3, [pc, #64]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800475a:	f000 f829 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800475e:	0001      	movs	r1, r0
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCC_ClockConfig+0x1f8>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	220f      	movs	r2, #15
 8004768:	401a      	ands	r2, r3
 800476a:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_RCC_ClockConfig+0x204>)
 800476c:	0092      	lsls	r2, r2, #2
 800476e:	58d3      	ldr	r3, [r2, r3]
 8004770:	221f      	movs	r2, #31
 8004772:	4013      	ands	r3, r2
 8004774:	000a      	movs	r2, r1
 8004776:	40da      	lsrs	r2, r3
 8004778:	4b0b      	ldr	r3, [pc, #44]	; (80047a8 <HAL_RCC_ClockConfig+0x208>)
 800477a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HAL_RCC_ClockConfig+0x20c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	0018      	movs	r0, r3
 8004782:	f7fd fc4b 	bl	800201c <HAL_InitTick>
 8004786:	0003      	movs	r3, r0
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	b004      	add	sp, #16
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40022000 	.word	0x40022000
 8004794:	00001388 	.word	0x00001388
 8004798:	40021000 	.word	0x40021000
 800479c:	fffff0ff 	.word	0xfffff0ff
 80047a0:	ffff8fff 	.word	0xffff8fff
 80047a4:	080094e4 	.word	0x080094e4
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000004 	.word	0x20000004

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047b6:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2238      	movs	r2, #56	; 0x38
 80047bc:	4013      	ands	r3, r2
 80047be:	d10f      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80047c0:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0adb      	lsrs	r3, r3, #11
 80047c6:	2207      	movs	r2, #7
 80047c8:	4013      	ands	r3, r2
 80047ca:	2201      	movs	r2, #1
 80047cc:	409a      	lsls	r2, r3
 80047ce:	0013      	movs	r3, r2
 80047d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	4835      	ldr	r0, [pc, #212]	; (80048ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80047d6:	f7fb fc97 	bl	8000108 <__udivsi3>
 80047da:	0003      	movs	r3, r0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e05d      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047e0:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2238      	movs	r2, #56	; 0x38
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e054      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2238      	movs	r2, #56	; 0x38
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d138      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2203      	movs	r2, #3
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	2207      	movs	r2, #7
 8004810:	4013      	ands	r3, r2
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d10d      	bne.n	8004838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4824      	ldr	r0, [pc, #144]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004820:	f7fb fc72 	bl	8000108 <__udivsi3>
 8004824:	0003      	movs	r3, r0
 8004826:	0019      	movs	r1, r3
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	227f      	movs	r2, #127	; 0x7f
 8004830:	4013      	ands	r3, r2
 8004832:	434b      	muls	r3, r1
 8004834:	617b      	str	r3, [r7, #20]
        break;
 8004836:	e00d      	b.n	8004854 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	481c      	ldr	r0, [pc, #112]	; (80048ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800483c:	f7fb fc64 	bl	8000108 <__udivsi3>
 8004840:	0003      	movs	r3, r0
 8004842:	0019      	movs	r1, r3
 8004844:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	227f      	movs	r2, #127	; 0x7f
 800484c:	4013      	ands	r3, r2
 800484e:	434b      	muls	r3, r1
 8004850:	617b      	str	r3, [r7, #20]
        break;
 8004852:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	0f5b      	lsrs	r3, r3, #29
 800485a:	2207      	movs	r2, #7
 800485c:	4013      	ands	r3, r2
 800485e:	3301      	adds	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	6978      	ldr	r0, [r7, #20]
 8004866:	f7fb fc4f 	bl	8000108 <__udivsi3>
 800486a:	0003      	movs	r3, r0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	e015      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2238      	movs	r2, #56	; 0x38
 8004876:	4013      	ands	r3, r2
 8004878:	2b20      	cmp	r3, #32
 800487a:	d103      	bne.n	8004884 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	021b      	lsls	r3, r3, #8
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	e00b      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2238      	movs	r2, #56	; 0x38
 800488a:	4013      	ands	r3, r2
 800488c:	2b18      	cmp	r3, #24
 800488e:	d103      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004890:	23fa      	movs	r3, #250	; 0xfa
 8004892:	01db      	lsls	r3, r3, #7
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	e001      	b.n	800489c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800489c:	693b      	ldr	r3, [r7, #16]
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b006      	add	sp, #24
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	40021000 	.word	0x40021000
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80048bc:	2313      	movs	r3, #19
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c4:	2312      	movs	r3, #18
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	029b      	lsls	r3, r3, #10
 80048d4:	4013      	ands	r3, r2
 80048d6:	d100      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80048d8:	e0af      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048da:	2311      	movs	r3, #17
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	2200      	movs	r2, #0
 80048e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b48      	ldr	r3, [pc, #288]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	055b      	lsls	r3, r3, #21
 80048ea:	4013      	ands	r3, r2
 80048ec:	d111      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f2:	4b44      	ldr	r3, [pc, #272]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048f4:	2180      	movs	r1, #128	; 0x80
 80048f6:	0549      	lsls	r1, r1, #21
 80048f8:	430a      	orrs	r2, r1
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80048fc:	4b41      	ldr	r3, [pc, #260]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	055b      	lsls	r3, r3, #21
 8004904:	4013      	ands	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2311      	movs	r3, #17
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0049      	lsls	r1, r1, #1
 800491c:	430a      	orrs	r2, r1
 800491e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004920:	f7fd fbd8 	bl	80020d4 <HAL_GetTick>
 8004924:	0003      	movs	r3, r0
 8004926:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004928:	e00b      	b.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492a:	f7fd fbd3 	bl	80020d4 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d904      	bls.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004938:	2313      	movs	r3, #19
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	2203      	movs	r2, #3
 800493e:	701a      	strb	r2, [r3, #0]
        break;
 8004940:	e005      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4013      	ands	r3, r2
 800494c:	d0ed      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800494e:	2313      	movs	r3, #19
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d15f      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004958:	4b2a      	ldr	r3, [pc, #168]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800495a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800495c:	23c0      	movs	r3, #192	; 0xc0
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4013      	ands	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d019      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	d014      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004974:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800497a:	4013      	ands	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	0249      	lsls	r1, r1, #9
 8004988:	430a      	orrs	r2, r1
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800498e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004992:	491f      	ldr	r1, [pc, #124]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004994:	400a      	ands	r2, r1
 8004996:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2201      	movs	r2, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	d016      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fd fb95 	bl	80020d4 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ae:	e00c      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b0:	f7fd fb90 	bl	80020d4 <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d904      	bls.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80049c0:	2313      	movs	r3, #19
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2203      	movs	r2, #3
 80049c6:	701a      	strb	r2, [r3, #0]
            break;
 80049c8:	e004      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2202      	movs	r2, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	d0ed      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80049d4:	2313      	movs	r3, #19
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80049ee:	430a      	orrs	r2, r1
 80049f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80049f2:	e017      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049f4:	2312      	movs	r3, #18
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	2213      	movs	r2, #19
 80049fa:	18ba      	adds	r2, r7, r2
 80049fc:	7812      	ldrb	r2, [r2, #0]
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e010      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40007000 	.word	0x40007000
 8004a0c:	fffffcff 	.word	0xfffffcff
 8004a10:	fffeffff 	.word	0xfffeffff
 8004a14:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	2312      	movs	r3, #18
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2213      	movs	r2, #19
 8004a1e:	18ba      	adds	r2, r7, r2
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a24:	2311      	movs	r3, #17
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d105      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2e:	4b84      	ldr	r3, [pc, #528]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a32:	4b83      	ldr	r3, [pc, #524]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a34:	4983      	ldr	r1, [pc, #524]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004a36:	400a      	ands	r2, r1
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4013      	ands	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a44:	4b7e      	ldr	r3, [pc, #504]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	2203      	movs	r2, #3
 8004a4a:	4393      	bics	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	4b7b      	ldr	r3, [pc, #492]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a54:	430a      	orrs	r2, r1
 8004a56:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2202      	movs	r2, #2
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a62:	4b77      	ldr	r3, [pc, #476]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	220c      	movs	r2, #12
 8004a68:	4393      	bics	r3, r2
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a72:	430a      	orrs	r2, r1
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d009      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a80:	4b6f      	ldr	r3, [pc, #444]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	4a70      	ldr	r2, [pc, #448]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	4b6c      	ldr	r3, [pc, #432]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004a90:	430a      	orrs	r2, r1
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d009      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aa0:	4b67      	ldr	r3, [pc, #412]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	4a69      	ldr	r2, [pc, #420]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4013      	ands	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac0:	4b5f      	ldr	r3, [pc, #380]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	4a62      	ldr	r2, [pc, #392]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69da      	ldr	r2, [r3, #28]
 8004ace:	4b5c      	ldr	r3, [pc, #368]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	4013      	ands	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ade:	4b58      	ldr	r3, [pc, #352]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	4a5c      	ldr	r2, [pc, #368]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	4b54      	ldr	r3, [pc, #336]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004aee:	430a      	orrs	r2, r1
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	2380      	movs	r3, #128	; 0x80
 8004af8:	02db      	lsls	r3, r3, #11
 8004afa:	4013      	ands	r3, r2
 8004afc:	d016      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004afe:	4b50      	ldr	r3, [pc, #320]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	4a55      	ldr	r2, [pc, #340]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1a      	ldr	r2, [r3, #32]
 8004b16:	23c0      	movs	r3, #192	; 0xc0
 8004b18:	051b      	lsls	r3, r3, #20
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d106      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b1e:	4b48      	ldr	r3, [pc, #288]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b47      	ldr	r3, [pc, #284]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b24:	2180      	movs	r1, #128	; 0x80
 8004b26:	0449      	lsls	r1, r1, #17
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	4013      	ands	r3, r2
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b38:	4b41      	ldr	r3, [pc, #260]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	0899      	lsrs	r1, r3, #2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b44:	4b3e      	ldr	r3, [pc, #248]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b46:	430a      	orrs	r2, r1
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	05db      	lsls	r3, r3, #23
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d106      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b56:	4b3a      	ldr	r3, [pc, #232]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	0249      	lsls	r1, r1, #9
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	2380      	movs	r3, #128	; 0x80
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b70:	4b33      	ldr	r3, [pc, #204]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	2240      	movs	r2, #64	; 0x40
 8004b76:	4393      	bics	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b7e:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	039b      	lsls	r3, r3, #14
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d016      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x30a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b90:	4b2b      	ldr	r3, [pc, #172]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	4a31      	ldr	r2, [pc, #196]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9e:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	03db      	lsls	r3, r3, #15
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x30a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bb0:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bb6:	2180      	movs	r1, #128	; 0x80
 8004bb8:	0449      	lsls	r1, r1, #17
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	03db      	lsls	r3, r3, #15
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d016      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004bca:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd8:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	045b      	lsls	r3, r3, #17
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004bf0:	2180      	movs	r1, #128	; 0x80
 8004bf2:	0449      	lsls	r1, r1, #17
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4013      	ands	r3, r2
 8004c02:	d016      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c04:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c08:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c14:	430a      	orrs	r2, r1
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695a      	ldr	r2, [r3, #20]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	01db      	lsls	r3, r3, #7
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d106      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004c2a:	2180      	movs	r1, #128	; 0x80
 8004c2c:	0249      	lsls	r1, r1, #9
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004c32:	2312      	movs	r3, #18
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	efffffff 	.word	0xefffffff
 8004c48:	fffff3ff 	.word	0xfffff3ff
 8004c4c:	fff3ffff 	.word	0xfff3ffff
 8004c50:	ffcfffff 	.word	0xffcfffff
 8004c54:	ffffcfff 	.word	0xffffcfff
 8004c58:	f3ffffff 	.word	0xf3ffffff
 8004c5c:	ffbfffff 	.word	0xffbfffff
 8004c60:	feffffff 	.word	0xfeffffff
 8004c64:	ffff3fff 	.word	0xffff3fff

08004c68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e029      	b.n	8004cce <HAL_RNG_Init+0x66>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7a5b      	ldrb	r3, [r3, #9]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fc ff87 	bl	8001ba0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	0019      	movs	r1, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2104      	movs	r1, #4
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b002      	add	sp, #8
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	230f      	movs	r3, #15
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	7a1b      	ldrb	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d101      	bne.n	8004cf4 <HAL_RNG_GenerateRandomNumber+0x1e>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e042      	b.n	8004d7a <HAL_RNG_GenerateRandomNumber+0xa4>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7a5b      	ldrb	r3, [r3, #9]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d12d      	bne.n	8004d60 <HAL_RNG_GenerateRandomNumber+0x8a>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0a:	f7fd f9e3 	bl	80020d4 <HAL_GetTick>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	60bb      	str	r3, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d12:	e011      	b.n	8004d38 <HAL_RNG_GenerateRandomNumber+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d14:	f7fd f9de 	bl	80020d4 <HAL_GetTick>
 8004d18:	0002      	movs	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d90a      	bls.n	8004d38 <HAL_RNG_GenerateRandomNumber+0x62>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e020      	b.n	8004d7a <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d1e6      	bne.n	8004d14 <HAL_RNG_GenerateRandomNumber+0x3e>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	725a      	strb	r2, [r3, #9]
 8004d5e:	e006      	b.n	8004d6e <HAL_RNG_GenerateRandomNumber+0x98>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2204      	movs	r2, #4
 8004d64:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004d66:	230f      	movs	r3, #15
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	721a      	strb	r2, [r3, #8]

  return status;
 8004d74:	230f      	movs	r3, #15
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	781b      	ldrb	r3, [r3, #0]
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0a8      	b.n	8004ee8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	2382      	movs	r3, #130	; 0x82
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d009      	beq.n	8004dbe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]
 8004db0:	e005      	b.n	8004dbe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	225d      	movs	r2, #93	; 0x5d
 8004dc8:	5c9b      	ldrb	r3, [r3, r2]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	225c      	movs	r2, #92	; 0x5c
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7fc ff00 	bl	8001be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	225d      	movs	r2, #93	; 0x5d
 8004de4:	2102      	movs	r1, #2
 8004de6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2140      	movs	r1, #64	; 0x40
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	23e0      	movs	r3, #224	; 0xe0
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d902      	bls.n	8004e0a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e002      	b.n	8004e10 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e0a:	2380      	movs	r3, #128	; 0x80
 8004e0c:	015b      	lsls	r3, r3, #5
 8004e0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	23f0      	movs	r3, #240	; 0xf0
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d008      	beq.n	8004e2e <HAL_SPI_Init+0xaa>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	23e0      	movs	r3, #224	; 0xe0
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	2382      	movs	r3, #130	; 0x82
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	401a      	ands	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6899      	ldr	r1, [r3, #8]
 8004e3c:	2384      	movs	r3, #132	; 0x84
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	400b      	ands	r3, r1
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2102      	movs	r1, #2
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2101      	movs	r1, #1
 8004e54:	400b      	ands	r3, r1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6999      	ldr	r1, [r3, #24]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	400b      	ands	r3, r1
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	2138      	movs	r1, #56	; 0x38
 8004e6a:	400b      	ands	r3, r1
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	400b      	ands	r3, r1
 8004e76:	431a      	orrs	r2, r3
 8004e78:	0011      	movs	r1, r2
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	401a      	ands	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	2204      	movs	r2, #4
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	2108      	movs	r1, #8
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68d9      	ldr	r1, [r3, #12]
 8004eae:	23f0      	movs	r3, #240	; 0xf0
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	0011      	movs	r1, r2
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	015b      	lsls	r3, r3, #5
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4907      	ldr	r1, [pc, #28]	; (8004ef0 <HAL_SPI_Init+0x16c>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	225d      	movs	r2, #93	; 0x5d
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b004      	add	sp, #16
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	fffff7ff 	.word	0xfffff7ff

08004ef4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f04:	231f      	movs	r3, #31
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	225c      	movs	r2, #92	; 0x5c
 8004f10:	5c9b      	ldrb	r3, [r3, r2]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Transmit+0x26>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e140      	b.n	800519c <HAL_SPI_Transmit+0x2a8>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	225c      	movs	r2, #92	; 0x5c
 8004f1e:	2101      	movs	r1, #1
 8004f20:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f22:	f7fd f8d7 	bl	80020d4 <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f2a:	2316      	movs	r3, #22
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	1dba      	adds	r2, r7, #6
 8004f30:	8812      	ldrh	r2, [r2, #0]
 8004f32:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	225d      	movs	r2, #93	; 0x5d
 8004f38:	5c9b      	ldrb	r3, [r3, r2]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d004      	beq.n	8004f4a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004f40:	231f      	movs	r3, #31
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2202      	movs	r2, #2
 8004f46:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f48:	e11d      	b.n	8005186 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_SPI_Transmit+0x64>
 8004f50:	1dbb      	adds	r3, r7, #6
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004f58:	231f      	movs	r3, #31
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f60:	e111      	b.n	8005186 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	225d      	movs	r2, #93	; 0x5d
 8004f66:	2103      	movs	r1, #3
 8004f68:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1dba      	adds	r2, r7, #6
 8004f7a:	8812      	ldrh	r2, [r2, #0]
 8004f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1dba      	adds	r2, r7, #6
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2244      	movs	r2, #68	; 0x44
 8004f90:	2100      	movs	r1, #0
 8004f92:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2246      	movs	r2, #70	; 0x46
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d110      	bne.n	8004fd6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	01c9      	lsls	r1, r1, #7
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b40      	cmp	r3, #64	; 0x40
 8004fe2:	d007      	beq.n	8004ff4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2140      	movs	r1, #64	; 0x40
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	23e0      	movs	r3, #224	; 0xe0
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d94e      	bls.n	800509e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <HAL_SPI_Transmit+0x11e>
 8005008:	2316      	movs	r3, #22
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d13f      	bne.n	8005092 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	881a      	ldrh	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005036:	e02c      	b.n	8005092 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d112      	bne.n	800506c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	881a      	ldrh	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	87da      	strh	r2, [r3, #62]	; 0x3e
 800506a:	e012      	b.n	8005092 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506c:	f7fd f832 	bl	80020d4 <HAL_GetTick>
 8005070:	0002      	movs	r2, r0
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d802      	bhi.n	8005082 <HAL_SPI_Transmit+0x18e>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	3301      	adds	r3, #1
 8005080:	d102      	bne.n	8005088 <HAL_SPI_Transmit+0x194>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d104      	bne.n	8005092 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005088:	231f      	movs	r3, #31
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2203      	movs	r2, #3
 800508e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005090:	e079      	b.n	8005186 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1cd      	bne.n	8005038 <HAL_SPI_Transmit+0x144>
 800509c:	e04f      	b.n	800513e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d004      	beq.n	80050b0 <HAL_SPI_Transmit+0x1bc>
 80050a6:	2316      	movs	r3, #22
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d141      	bne.n	8005134 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	7812      	ldrb	r2, [r2, #0]
 80050bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80050d6:	e02d      	b.n	8005134 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	2202      	movs	r2, #2
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d113      	bne.n	800510e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	330c      	adds	r3, #12
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800510c:	e012      	b.n	8005134 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510e:	f7fc ffe1 	bl	80020d4 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d802      	bhi.n	8005124 <HAL_SPI_Transmit+0x230>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	d102      	bne.n	800512a <HAL_SPI_Transmit+0x236>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800512a:	231f      	movs	r3, #31
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2203      	movs	r2, #3
 8005130:	701a      	strb	r2, [r3, #0]
          goto error;
 8005132:	e028      	b.n	8005186 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1cc      	bne.n	80050d8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	0018      	movs	r0, r3
 8005146:	f000 fccf 	bl	8005ae8 <SPI_EndRxTxTransaction>
 800514a:	1e03      	subs	r3, r0, #0
 800514c:	d002      	beq.n	8005154 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005176:	2b00      	cmp	r3, #0
 8005178:	d004      	beq.n	8005184 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800517a:	231f      	movs	r3, #31
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	2201      	movs	r2, #1
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e000      	b.n	8005186 <HAL_SPI_Transmit+0x292>
  }

error:
 8005184:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	225d      	movs	r2, #93	; 0x5d
 800518a:	2101      	movs	r1, #1
 800518c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	225c      	movs	r2, #92	; 0x5c
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005196:	231f      	movs	r3, #31
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	781b      	ldrb	r3, [r3, #0]
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b008      	add	sp, #32
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	1dbb      	adds	r3, r7, #6
 80051b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051b4:	2317      	movs	r3, #23
 80051b6:	18fb      	adds	r3, r7, r3
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	2382      	movs	r3, #130	; 0x82
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d113      	bne.n	80051f0 <HAL_SPI_Receive+0x4c>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10f      	bne.n	80051f0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	225d      	movs	r2, #93	; 0x5d
 80051d4:	2104      	movs	r1, #4
 80051d6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80051d8:	1dbb      	adds	r3, r7, #6
 80051da:	881c      	ldrh	r4, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	0023      	movs	r3, r4
 80051e8:	f000 f928 	bl	800543c <HAL_SPI_TransmitReceive>
 80051ec:	0003      	movs	r3, r0
 80051ee:	e11c      	b.n	800542a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	225c      	movs	r2, #92	; 0x5c
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_SPI_Receive+0x5a>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e115      	b.n	800542a <HAL_SPI_Receive+0x286>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	225c      	movs	r2, #92	; 0x5c
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005206:	f7fc ff65 	bl	80020d4 <HAL_GetTick>
 800520a:	0003      	movs	r3, r0
 800520c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	225d      	movs	r2, #93	; 0x5d
 8005212:	5c9b      	ldrb	r3, [r3, r2]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b01      	cmp	r3, #1
 8005218:	d004      	beq.n	8005224 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800521a:	2317      	movs	r3, #23
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	2202      	movs	r2, #2
 8005220:	701a      	strb	r2, [r3, #0]
    goto error;
 8005222:	e0f7      	b.n	8005414 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_SPI_Receive+0x8e>
 800522a:	1dbb      	adds	r3, r7, #6
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d104      	bne.n	800523c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005232:	2317      	movs	r3, #23
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	2201      	movs	r2, #1
 8005238:	701a      	strb	r2, [r3, #0]
    goto error;
 800523a:	e0eb      	b.n	8005414 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	225d      	movs	r2, #93	; 0x5d
 8005240:	2104      	movs	r1, #4
 8005242:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1dba      	adds	r2, r7, #6
 8005254:	2144      	movs	r1, #68	; 0x44
 8005256:	8812      	ldrh	r2, [r2, #0]
 8005258:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1dba      	adds	r2, r7, #6
 800525e:	2146      	movs	r1, #70	; 0x46
 8005260:	8812      	ldrh	r2, [r2, #0]
 8005262:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	23e0      	movs	r3, #224	; 0xe0
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	429a      	cmp	r2, r3
 800528c:	d908      	bls.n	80052a0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4966      	ldr	r1, [pc, #408]	; (8005434 <HAL_SPI_Receive+0x290>)
 800529a:	400a      	ands	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e008      	b.n	80052b2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	0149      	lsls	r1, r1, #5
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d10f      	bne.n	80052de <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2140      	movs	r1, #64	; 0x40
 80052ca:	438a      	bics	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4957      	ldr	r1, [pc, #348]	; (8005438 <HAL_SPI_Receive+0x294>)
 80052da:	400a      	ands	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2240      	movs	r2, #64	; 0x40
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d007      	beq.n	80052fc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2140      	movs	r1, #64	; 0x40
 80052f8:	430a      	orrs	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	23e0      	movs	r3, #224	; 0xe0
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	429a      	cmp	r2, r3
 8005306:	d900      	bls.n	800530a <HAL_SPI_Receive+0x166>
 8005308:	e069      	b.n	80053de <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800530a:	e031      	b.n	8005370 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	2b01      	cmp	r3, #1
 8005318:	d117      	bne.n	800534a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	001a      	movs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2246      	movs	r2, #70	; 0x46
 800533a:	5a9b      	ldrh	r3, [r3, r2]
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b299      	uxth	r1, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2246      	movs	r2, #70	; 0x46
 8005346:	5299      	strh	r1, [r3, r2]
 8005348:	e012      	b.n	8005370 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800534a:	f7fc fec3 	bl	80020d4 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d802      	bhi.n	8005360 <HAL_SPI_Receive+0x1bc>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	3301      	adds	r3, #1
 800535e:	d102      	bne.n	8005366 <HAL_SPI_Receive+0x1c2>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005366:	2317      	movs	r3, #23
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	2203      	movs	r2, #3
 800536c:	701a      	strb	r2, [r3, #0]
          goto error;
 800536e:	e051      	b.n	8005414 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2246      	movs	r2, #70	; 0x46
 8005374:	5a9b      	ldrh	r3, [r3, r2]
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1c7      	bne.n	800530c <HAL_SPI_Receive+0x168>
 800537c:	e035      	b.n	80053ea <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2201      	movs	r2, #1
 8005386:	4013      	ands	r3, r2
 8005388:	2b01      	cmp	r3, #1
 800538a:	d115      	bne.n	80053b8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	b292      	uxth	r2, r2
 8005398:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	1c9a      	adds	r2, r3, #2
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2246      	movs	r2, #70	; 0x46
 80053a8:	5a9b      	ldrh	r3, [r3, r2]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b299      	uxth	r1, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2246      	movs	r2, #70	; 0x46
 80053b4:	5299      	strh	r1, [r3, r2]
 80053b6:	e012      	b.n	80053de <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b8:	f7fc fe8c 	bl	80020d4 <HAL_GetTick>
 80053bc:	0002      	movs	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d802      	bhi.n	80053ce <HAL_SPI_Receive+0x22a>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_Receive+0x230>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80053d4:	2317      	movs	r3, #23
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2203      	movs	r2, #3
 80053da:	701a      	strb	r2, [r3, #0]
          goto error;
 80053dc:	e01a      	b.n	8005414 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2246      	movs	r2, #70	; 0x46
 80053e2:	5a9b      	ldrh	r3, [r3, r2]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1c9      	bne.n	800537e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 fb1b 	bl	8005a2c <SPI_EndRxTransaction>
 80053f6:	1e03      	subs	r3, r0, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2220      	movs	r2, #32
 80053fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	2b00      	cmp	r3, #0
 8005406:	d004      	beq.n	8005412 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005408:	2317      	movs	r3, #23
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e000      	b.n	8005414 <HAL_SPI_Receive+0x270>
  }

error :
 8005412:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	225d      	movs	r2, #93	; 0x5d
 8005418:	2101      	movs	r1, #1
 800541a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	225c      	movs	r2, #92	; 0x5c
 8005420:	2100      	movs	r1, #0
 8005422:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005424:	2317      	movs	r3, #23
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
}
 800542a:	0018      	movs	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	b007      	add	sp, #28
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	ffffefff 	.word	0xffffefff
 8005438:	ffffbfff 	.word	0xffffbfff

0800543c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	001a      	movs	r2, r3
 800544a:	1cbb      	adds	r3, r7, #2
 800544c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544e:	2301      	movs	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005452:	2323      	movs	r3, #35	; 0x23
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	225c      	movs	r2, #92	; 0x5c
 800545e:	5c9b      	ldrb	r3, [r3, r2]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_SPI_TransmitReceive+0x2c>
 8005464:	2302      	movs	r3, #2
 8005466:	e1b6      	b.n	80057d6 <HAL_SPI_TransmitReceive+0x39a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	225c      	movs	r2, #92	; 0x5c
 800546c:	2101      	movs	r1, #1
 800546e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005470:	f7fc fe30 	bl	80020d4 <HAL_GetTick>
 8005474:	0003      	movs	r3, r0
 8005476:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005478:	201b      	movs	r0, #27
 800547a:	183b      	adds	r3, r7, r0
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	215d      	movs	r1, #93	; 0x5d
 8005480:	5c52      	ldrb	r2, [r2, r1]
 8005482:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800548a:	2312      	movs	r3, #18
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	1cba      	adds	r2, r7, #2
 8005490:	8812      	ldrh	r2, [r2, #0]
 8005492:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005494:	183b      	adds	r3, r7, r0
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d012      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x86>
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	2382      	movs	r3, #130	; 0x82
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d108      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x7c>
 80054ae:	231b      	movs	r3, #27
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	d004      	beq.n	80054c2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80054b8:	2323      	movs	r3, #35	; 0x23
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2202      	movs	r2, #2
 80054be:	701a      	strb	r2, [r3, #0]
    goto error;
 80054c0:	e17e      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x9a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x9a>
 80054ce:	1cbb      	adds	r3, r7, #2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d104      	bne.n	80054e0 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80054d6:	2323      	movs	r3, #35	; 0x23
 80054d8:	18fb      	adds	r3, r7, r3
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80054de:	e16f      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	225d      	movs	r2, #93	; 0x5d
 80054e4:	5c9b      	ldrb	r3, [r3, r2]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d003      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	225d      	movs	r2, #93	; 0x5d
 80054f0:	2105      	movs	r1, #5
 80054f2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1cba      	adds	r2, r7, #2
 8005504:	2146      	movs	r1, #70	; 0x46
 8005506:	8812      	ldrh	r2, [r2, #0]
 8005508:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1cba      	adds	r2, r7, #2
 800550e:	2144      	movs	r1, #68	; 0x44
 8005510:	8812      	ldrh	r2, [r2, #0]
 8005512:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1cba      	adds	r2, r7, #2
 800551e:	8812      	ldrh	r2, [r2, #0]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1cba      	adds	r2, r7, #2
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	23e0      	movs	r3, #224	; 0xe0
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	429a      	cmp	r2, r3
 8005540:	d908      	bls.n	8005554 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	49a4      	ldr	r1, [pc, #656]	; (80057e0 <HAL_SPI_TransmitReceive+0x3a4>)
 800554e:	400a      	ands	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e008      	b.n	8005566 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	0149      	lsls	r1, r1, #5
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2240      	movs	r2, #64	; 0x40
 800556e:	4013      	ands	r3, r2
 8005570:	2b40      	cmp	r3, #64	; 0x40
 8005572:	d007      	beq.n	8005584 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2140      	movs	r1, #64	; 0x40
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	23e0      	movs	r3, #224	; 0xe0
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	429a      	cmp	r2, r3
 800558e:	d800      	bhi.n	8005592 <HAL_SPI_TransmitReceive+0x156>
 8005590:	e07f      	b.n	8005692 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x16a>
 800559a:	2312      	movs	r3, #18
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d000      	beq.n	80055a6 <HAL_SPI_TransmitReceive+0x16a>
 80055a4:	e069      	b.n	800567a <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	1c9a      	adds	r2, r3, #2
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ca:	e056      	b.n	800567a <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2202      	movs	r2, #2
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d11b      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x1d6>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d016      	beq.n	8005612 <HAL_SPI_TransmitReceive+0x1d6>
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d113      	bne.n	8005612 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ee:	881a      	ldrh	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	1c9a      	adds	r2, r3, #2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	2b01      	cmp	r3, #1
 800561e:	d11c      	bne.n	800565a <HAL_SPI_TransmitReceive+0x21e>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2246      	movs	r2, #70	; 0x46
 8005624:	5a9b      	ldrh	r3, [r3, r2]
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d016      	beq.n	800565a <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	b292      	uxth	r2, r2
 8005638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	1c9a      	adds	r2, r3, #2
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2246      	movs	r2, #70	; 0x46
 8005648:	5a9b      	ldrh	r3, [r3, r2]
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b299      	uxth	r1, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2246      	movs	r2, #70	; 0x46
 8005654:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005656:	2301      	movs	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800565a:	f7fc fd3b 	bl	80020d4 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005666:	429a      	cmp	r2, r3
 8005668:	d807      	bhi.n	800567a <HAL_SPI_TransmitReceive+0x23e>
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	3301      	adds	r3, #1
 800566e:	d004      	beq.n	800567a <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8005670:	2323      	movs	r3, #35	; 0x23
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2203      	movs	r2, #3
 8005676:	701a      	strb	r2, [r3, #0]
        goto error;
 8005678:	e0a2      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1a3      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x190>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2246      	movs	r2, #70	; 0x46
 8005688:	5a9b      	ldrh	r3, [r3, r2]
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d19d      	bne.n	80055cc <HAL_SPI_TransmitReceive+0x190>
 8005690:	e085      	b.n	800579e <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x26a>
 800569a:	2312      	movs	r3, #18
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d000      	beq.n	80056a6 <HAL_SPI_TransmitReceive+0x26a>
 80056a4:	e070      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056cc:	e05c      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2202      	movs	r2, #2
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d11c      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x2da>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d017      	beq.n	8005716 <HAL_SPI_TransmitReceive+0x2da>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d114      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	7812      	ldrb	r2, [r2, #0]
 80056f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2201      	movs	r2, #1
 800571e:	4013      	ands	r3, r2
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11e      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x326>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2246      	movs	r2, #70	; 0x46
 8005728:	5a9b      	ldrh	r3, [r3, r2]
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d018      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	330c      	adds	r3, #12
 8005736:	001a      	movs	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	b2d2      	uxtb	r2, r2
 8005740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2246      	movs	r2, #70	; 0x46
 8005750:	5a9b      	ldrh	r3, [r3, r2]
 8005752:	b29b      	uxth	r3, r3
 8005754:	3b01      	subs	r3, #1
 8005756:	b299      	uxth	r1, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2246      	movs	r2, #70	; 0x46
 800575c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800575e:	2301      	movs	r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005762:	f7fc fcb7 	bl	80020d4 <HAL_GetTick>
 8005766:	0002      	movs	r2, r0
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576e:	429a      	cmp	r2, r3
 8005770:	d802      	bhi.n	8005778 <HAL_SPI_TransmitReceive+0x33c>
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	3301      	adds	r3, #1
 8005776:	d102      	bne.n	800577e <HAL_SPI_TransmitReceive+0x342>
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 800577e:	2323      	movs	r3, #35	; 0x23
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	2203      	movs	r2, #3
 8005784:	701a      	strb	r2, [r3, #0]
        goto error;
 8005786:	e01b      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d19d      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x292>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2246      	movs	r2, #70	; 0x46
 8005796:	5a9b      	ldrh	r3, [r3, r2]
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d197      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f99f 	bl	8005ae8 <SPI_EndRxTxTransaction>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d007      	beq.n	80057be <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 80057ae:	2323      	movs	r3, #35	; 0x23
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	2201      	movs	r2, #1
 80057b4:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	661a      	str	r2, [r3, #96]	; 0x60
 80057bc:	e000      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 80057be:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	225d      	movs	r2, #93	; 0x5d
 80057c4:	2101      	movs	r1, #1
 80057c6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	225c      	movs	r2, #92	; 0x5c
 80057cc:	2100      	movs	r1, #0
 80057ce:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80057d0:	2323      	movs	r3, #35	; 0x23
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	781b      	ldrb	r3, [r3, #0]
}
 80057d6:	0018      	movs	r0, r3
 80057d8:	46bd      	mov	sp, r7
 80057da:	b00a      	add	sp, #40	; 0x28
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	ffffefff 	.word	0xffffefff

080057e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057f4:	f7fc fc6e 	bl	80020d4 <HAL_GetTick>
 80057f8:	0002      	movs	r2, r0
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	1a9b      	subs	r3, r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	18d3      	adds	r3, r2, r3
 8005802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005804:	f7fc fc66 	bl	80020d4 <HAL_GetTick>
 8005808:	0003      	movs	r3, r0
 800580a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	015b      	lsls	r3, r3, #5
 8005812:	0d1b      	lsrs	r3, r3, #20
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	4353      	muls	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800581a:	e058      	b.n	80058ce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	3301      	adds	r3, #1
 8005820:	d055      	beq.n	80058ce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005822:	f7fc fc57 	bl	80020d4 <HAL_GetTick>
 8005826:	0002      	movs	r2, r0
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	429a      	cmp	r2, r3
 8005830:	d902      	bls.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d142      	bne.n	80058be <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	21e0      	movs	r1, #224	; 0xe0
 8005844:	438a      	bics	r2, r1
 8005846:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	2382      	movs	r3, #130	; 0x82
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	429a      	cmp	r2, r3
 8005852:	d113      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x98>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	429a      	cmp	r2, r3
 800585e:	d005      	beq.n	800586c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	429a      	cmp	r2, r3
 800586a:	d107      	bne.n	800587c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	438a      	bics	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	019b      	lsls	r3, r3, #6
 8005884:	429a      	cmp	r2, r3
 8005886:	d110      	bne.n	80058aa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	491a      	ldr	r1, [pc, #104]	; (80058fc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005894:	400a      	ands	r2, r1
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	0189      	lsls	r1, r1, #6
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	225d      	movs	r2, #93	; 0x5d
 80058ae:	2101      	movs	r1, #1
 80058b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	225c      	movs	r2, #92	; 0x5c
 80058b6:	2100      	movs	r1, #0
 80058b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e017      	b.n	80058ee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	4013      	ands	r3, r2
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	425a      	negs	r2, r3
 80058de:	4153      	adcs	r3, r2
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	001a      	movs	r2, r3
 80058e4:	1dfb      	adds	r3, r7, #7
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d197      	bne.n	800581c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b008      	add	sp, #32
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	20000000 	.word	0x20000000
 80058fc:	ffffdfff 	.word	0xffffdfff

08005900 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800590e:	f7fc fbe1 	bl	80020d4 <HAL_GetTick>
 8005912:	0002      	movs	r2, r0
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	18d3      	adds	r3, r2, r3
 800591c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800591e:	f7fc fbd9 	bl	80020d4 <HAL_GetTick>
 8005922:	0003      	movs	r3, r0
 8005924:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005926:	4b3f      	ldr	r3, [pc, #252]	; (8005a24 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	0013      	movs	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	189b      	adds	r3, r3, r2
 8005930:	00da      	lsls	r2, r3, #3
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	0d1b      	lsrs	r3, r3, #20
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	4353      	muls	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800593c:	e064      	b.n	8005a08 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	23c0      	movs	r3, #192	; 0xc0
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	429a      	cmp	r2, r3
 8005946:	d106      	bne.n	8005956 <SPI_WaitFifoStateUntilTimeout+0x56>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	d055      	beq.n	8005a08 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800595c:	f7fc fbba 	bl	80020d4 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	69fa      	ldr	r2, [r7, #28]
 8005968:	429a      	cmp	r2, r3
 800596a:	d902      	bls.n	8005972 <SPI_WaitFifoStateUntilTimeout+0x72>
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d142      	bne.n	80059f8 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	21e0      	movs	r1, #224	; 0xe0
 800597e:	438a      	bics	r2, r1
 8005980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	2382      	movs	r3, #130	; 0x82
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	429a      	cmp	r2, r3
 800598c:	d113      	bne.n	80059b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	429a      	cmp	r2, r3
 8005998:	d005      	beq.n	80059a6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d107      	bne.n	80059b6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	438a      	bics	r2, r1
 80059b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	019b      	lsls	r3, r3, #6
 80059be:	429a      	cmp	r2, r3
 80059c0:	d110      	bne.n	80059e4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059ce:	400a      	ands	r2, r1
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2180      	movs	r1, #128	; 0x80
 80059de:	0189      	lsls	r1, r1, #6
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	225d      	movs	r2, #93	; 0x5d
 80059e8:	2101      	movs	r1, #1
 80059ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	225c      	movs	r2, #92	; 0x5c
 80059f0:	2100      	movs	r1, #0
 80059f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e010      	b.n	8005a1a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d192      	bne.n	800593e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b008      	add	sp, #32
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	20000000 	.word	0x20000000
 8005a28:	ffffdfff 	.word	0xffffdfff

08005a2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	2382      	movs	r3, #130	; 0x82
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d113      	bne.n	8005a6c <SPI_EndRxTransaction+0x40>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d005      	beq.n	8005a5c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d107      	bne.n	8005a6c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2140      	movs	r1, #64	; 0x40
 8005a68:	438a      	bics	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	0013      	movs	r3, r2
 8005a76:	2200      	movs	r2, #0
 8005a78:	2180      	movs	r1, #128	; 0x80
 8005a7a:	f7ff feb3 	bl	80057e4 <SPI_WaitFlagStateUntilTimeout>
 8005a7e:	1e03      	subs	r3, r0, #0
 8005a80:	d007      	beq.n	8005a92 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a86:	2220      	movs	r2, #32
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e026      	b.n	8005ae0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	2382      	movs	r3, #130	; 0x82
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d11f      	bne.n	8005ade <SPI_EndRxTransaction+0xb2>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d005      	beq.n	8005ab6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	2380      	movs	r3, #128	; 0x80
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d113      	bne.n	8005ade <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	23c0      	movs	r3, #192	; 0xc0
 8005aba:	00d9      	lsls	r1, r3, #3
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	0013      	movs	r3, r2
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f7ff ff1b 	bl	8005900 <SPI_WaitFifoStateUntilTimeout>
 8005aca:	1e03      	subs	r3, r0, #0
 8005acc:	d007      	beq.n	8005ade <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e000      	b.n	8005ae0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b004      	add	sp, #16
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	23c0      	movs	r3, #192	; 0xc0
 8005af8:	0159      	lsls	r1, r3, #5
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	0013      	movs	r3, r2
 8005b02:	2200      	movs	r2, #0
 8005b04:	f7ff fefc 	bl	8005900 <SPI_WaitFifoStateUntilTimeout>
 8005b08:	1e03      	subs	r3, r0, #0
 8005b0a:	d007      	beq.n	8005b1c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b10:	2220      	movs	r2, #32
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e027      	b.n	8005b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	0013      	movs	r3, r2
 8005b26:	2200      	movs	r2, #0
 8005b28:	2180      	movs	r1, #128	; 0x80
 8005b2a:	f7ff fe5b 	bl	80057e4 <SPI_WaitFlagStateUntilTimeout>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d007      	beq.n	8005b42 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	2220      	movs	r2, #32
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e014      	b.n	8005b6c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	23c0      	movs	r3, #192	; 0xc0
 8005b46:	00d9      	lsls	r1, r3, #3
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	0013      	movs	r3, r2
 8005b50:	2200      	movs	r2, #0
 8005b52:	f7ff fed5 	bl	8005900 <SPI_WaitFifoStateUntilTimeout>
 8005b56:	1e03      	subs	r3, r0, #0
 8005b58:	d007      	beq.n	8005b6a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5e:	2220      	movs	r2, #32
 8005b60:	431a      	orrs	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e000      	b.n	8005b6c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	b004      	add	sp, #16
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e04a      	b.n	8005c1c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223d      	movs	r2, #61	; 0x3d
 8005b8a:	5c9b      	ldrb	r3, [r3, r2]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	223c      	movs	r2, #60	; 0x3c
 8005b96:	2100      	movs	r1, #0
 8005b98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f7fc f889 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	223d      	movs	r2, #61	; 0x3d
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	0010      	movs	r0, r2
 8005bb6:	f000 fc1b 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2248      	movs	r2, #72	; 0x48
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	223e      	movs	r2, #62	; 0x3e
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	223f      	movs	r2, #63	; 0x3f
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2240      	movs	r2, #64	; 0x40
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5499      	strb	r1, [r3, r2]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2241      	movs	r2, #65	; 0x41
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2242      	movs	r2, #66	; 0x42
 8005be6:	2101      	movs	r1, #1
 8005be8:	5499      	strb	r1, [r3, r2]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2243      	movs	r2, #67	; 0x43
 8005bee:	2101      	movs	r1, #1
 8005bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2244      	movs	r2, #68	; 0x44
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2245      	movs	r2, #69	; 0x45
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5499      	strb	r1, [r3, r2]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2246      	movs	r2, #70	; 0x46
 8005c06:	2101      	movs	r1, #1
 8005c08:	5499      	strb	r1, [r3, r2]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2247      	movs	r2, #71	; 0x47
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	223d      	movs	r2, #61	; 0x3d
 8005c16:	2101      	movs	r1, #1
 8005c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	223d      	movs	r2, #61	; 0x3d
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e042      	b.n	8005cc2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	223d      	movs	r2, #61	; 0x3d
 8005c40:	2102      	movs	r1, #2
 8005c42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2101      	movs	r1, #1
 8005c50:	430a      	orrs	r2, r1
 8005c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <HAL_TIM_Base_Start_IT+0xa8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <HAL_TIM_Base_Start_IT+0x5a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	05db      	lsls	r3, r3, #23
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d009      	beq.n	8005c7e <HAL_TIM_Base_Start_IT+0x5a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a18      	ldr	r2, [pc, #96]	; (8005cd0 <HAL_TIM_Base_Start_IT+0xac>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d004      	beq.n	8005c7e <HAL_TIM_Base_Start_IT+0x5a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d116      	bne.n	8005cac <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b06      	cmp	r3, #6
 8005c8e:	d016      	beq.n	8005cbe <HAL_TIM_Base_Start_IT+0x9a>
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	2380      	movs	r3, #128	; 0x80
 8005c94:	025b      	lsls	r3, r3, #9
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d011      	beq.n	8005cbe <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005caa:	e008      	b.n	8005cbe <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b004      	add	sp, #16
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	46c0      	nop			; (mov r8, r8)
 8005ccc:	40012c00 	.word	0x40012c00
 8005cd0:	40000400 	.word	0x40000400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	00010007 	.word	0x00010007

08005cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e04a      	b.n	8005d84 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	223d      	movs	r2, #61	; 0x3d
 8005cf2:	5c9b      	ldrb	r3, [r3, r2]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	223c      	movs	r2, #60	; 0x3c
 8005cfe:	2100      	movs	r1, #0
 8005d00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7fb ffb5 	bl	8001c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	223d      	movs	r2, #61	; 0x3d
 8005d0e:	2102      	movs	r1, #2
 8005d10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	0010      	movs	r0, r2
 8005d1e:	f000 fb67 	bl	80063f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2248      	movs	r2, #72	; 0x48
 8005d26:	2101      	movs	r1, #1
 8005d28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	223e      	movs	r2, #62	; 0x3e
 8005d2e:	2101      	movs	r1, #1
 8005d30:	5499      	strb	r1, [r3, r2]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	223f      	movs	r2, #63	; 0x3f
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2240      	movs	r2, #64	; 0x40
 8005d3e:	2101      	movs	r1, #1
 8005d40:	5499      	strb	r1, [r3, r2]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2241      	movs	r2, #65	; 0x41
 8005d46:	2101      	movs	r1, #1
 8005d48:	5499      	strb	r1, [r3, r2]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2242      	movs	r2, #66	; 0x42
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2243      	movs	r2, #67	; 0x43
 8005d56:	2101      	movs	r1, #1
 8005d58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2244      	movs	r2, #68	; 0x44
 8005d5e:	2101      	movs	r1, #1
 8005d60:	5499      	strb	r1, [r3, r2]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2245      	movs	r2, #69	; 0x45
 8005d66:	2101      	movs	r1, #1
 8005d68:	5499      	strb	r1, [r3, r2]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2246      	movs	r2, #70	; 0x46
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2247      	movs	r2, #71	; 0x47
 8005d76:	2101      	movs	r1, #1
 8005d78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	223d      	movs	r2, #61	; 0x3d
 8005d7e:	2101      	movs	r1, #1
 8005d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <HAL_TIM_PWM_Start+0x22>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	223e      	movs	r2, #62	; 0x3e
 8005da0:	5c9b      	ldrb	r3, [r3, r2]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	1e5a      	subs	r2, r3, #1
 8005da8:	4193      	sbcs	r3, r2
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e037      	b.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d108      	bne.n	8005dc6 <HAL_TIM_PWM_Start+0x3a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	223f      	movs	r2, #63	; 0x3f
 8005db8:	5c9b      	ldrb	r3, [r3, r2]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	4193      	sbcs	r3, r2
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	e02b      	b.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b08      	cmp	r3, #8
 8005dca:	d108      	bne.n	8005dde <HAL_TIM_PWM_Start+0x52>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	5c9b      	ldrb	r3, [r3, r2]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	1e5a      	subs	r2, r3, #1
 8005dd8:	4193      	sbcs	r3, r2
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	e01f      	b.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b0c      	cmp	r3, #12
 8005de2:	d108      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x6a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2241      	movs	r2, #65	; 0x41
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	1e5a      	subs	r2, r3, #1
 8005df0:	4193      	sbcs	r3, r2
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e013      	b.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d108      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x82>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2242      	movs	r2, #66	; 0x42
 8005e00:	5c9b      	ldrb	r3, [r3, r2]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	1e5a      	subs	r2, r3, #1
 8005e08:	4193      	sbcs	r3, r2
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e007      	b.n	8005e1e <HAL_TIM_PWM_Start+0x92>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2243      	movs	r2, #67	; 0x43
 8005e12:	5c9b      	ldrb	r3, [r3, r2]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	1e5a      	subs	r2, r3, #1
 8005e1a:	4193      	sbcs	r3, r2
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e08b      	b.n	8005f3e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PWM_Start+0xaa>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	223e      	movs	r2, #62	; 0x3e
 8005e30:	2102      	movs	r1, #2
 8005e32:	5499      	strb	r1, [r3, r2]
 8005e34:	e023      	b.n	8005e7e <HAL_TIM_PWM_Start+0xf2>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d104      	bne.n	8005e46 <HAL_TIM_PWM_Start+0xba>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	223f      	movs	r2, #63	; 0x3f
 8005e40:	2102      	movs	r1, #2
 8005e42:	5499      	strb	r1, [r3, r2]
 8005e44:	e01b      	b.n	8005e7e <HAL_TIM_PWM_Start+0xf2>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b08      	cmp	r3, #8
 8005e4a:	d104      	bne.n	8005e56 <HAL_TIM_PWM_Start+0xca>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2240      	movs	r2, #64	; 0x40
 8005e50:	2102      	movs	r1, #2
 8005e52:	5499      	strb	r1, [r3, r2]
 8005e54:	e013      	b.n	8005e7e <HAL_TIM_PWM_Start+0xf2>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b0c      	cmp	r3, #12
 8005e5a:	d104      	bne.n	8005e66 <HAL_TIM_PWM_Start+0xda>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2241      	movs	r2, #65	; 0x41
 8005e60:	2102      	movs	r1, #2
 8005e62:	5499      	strb	r1, [r3, r2]
 8005e64:	e00b      	b.n	8005e7e <HAL_TIM_PWM_Start+0xf2>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Start+0xea>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2242      	movs	r2, #66	; 0x42
 8005e70:	2102      	movs	r1, #2
 8005e72:	5499      	strb	r1, [r3, r2]
 8005e74:	e003      	b.n	8005e7e <HAL_TIM_PWM_Start+0xf2>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2243      	movs	r2, #67	; 0x43
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	2201      	movs	r2, #1
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 fdf6 	bl	8006a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <HAL_TIM_PWM_Start+0x1bc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00e      	beq.n	8005eb4 <HAL_TIM_PWM_Start+0x128>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <HAL_TIM_PWM_Start+0x1c0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_TIM_PWM_Start+0x128>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_TIM_PWM_Start+0x1c4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_TIM_PWM_Start+0x128>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a29      	ldr	r2, [pc, #164]	; (8005f54 <HAL_TIM_PWM_Start+0x1c8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIM_PWM_Start+0x12c>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <HAL_TIM_PWM_Start+0x12e>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	0209      	lsls	r1, r1, #8
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <HAL_TIM_PWM_Start+0x1bc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <HAL_TIM_PWM_Start+0x16e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	2380      	movs	r3, #128	; 0x80
 8005ee0:	05db      	lsls	r3, r3, #23
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d009      	beq.n	8005efa <HAL_TIM_PWM_Start+0x16e>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <HAL_TIM_PWM_Start+0x1cc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d004      	beq.n	8005efa <HAL_TIM_PWM_Start+0x16e>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <HAL_TIM_PWM_Start+0x1c0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d116      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <HAL_TIM_PWM_Start+0x1d0>)
 8005f02:	4013      	ands	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b06      	cmp	r3, #6
 8005f0a:	d016      	beq.n	8005f3a <HAL_TIM_PWM_Start+0x1ae>
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	025b      	lsls	r3, r3, #9
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d011      	beq.n	8005f3a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2101      	movs	r1, #1
 8005f22:	430a      	orrs	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	e008      	b.n	8005f3a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2101      	movs	r1, #1
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	0018      	movs	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b004      	add	sp, #16
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	00010007 	.word	0x00010007

08005f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d124      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	4013      	ands	r3, r2
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d11d      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	4252      	negs	r2, r2
 8005f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 fa0c 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e007      	b.n	8005fba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0018      	movs	r0, r3
 8005fae:	f000 f9ff 	bl	80063b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	f000 fa0b 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b04      	cmp	r3, #4
 8005fcc:	d125      	bne.n	800601a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d11e      	bne.n	800601a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	4252      	negs	r2, r2
 8005fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	23c0      	movs	r3, #192	; 0xc0
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d004      	beq.n	8006004 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 f9df 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 8006002:	e007      	b.n	8006014 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 f9d2 	bl	80063b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 f9de 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2208      	movs	r2, #8
 8006022:	4013      	ands	r3, r2
 8006024:	2b08      	cmp	r3, #8
 8006026:	d124      	bne.n	8006072 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2208      	movs	r2, #8
 8006030:	4013      	ands	r3, r2
 8006032:	2b08      	cmp	r3, #8
 8006034:	d11d      	bne.n	8006072 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2209      	movs	r2, #9
 800603c:	4252      	negs	r2, r2
 800603e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2204      	movs	r2, #4
 8006044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2203      	movs	r2, #3
 800604e:	4013      	ands	r3, r2
 8006050:	d004      	beq.n	800605c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0018      	movs	r0, r3
 8006056:	f000 f9b3 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 800605a:	e007      	b.n	800606c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	0018      	movs	r0, r3
 8006060:	f000 f9a6 	bl	80063b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0018      	movs	r0, r3
 8006068:	f000 f9b2 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2210      	movs	r2, #16
 800607a:	4013      	ands	r3, r2
 800607c:	2b10      	cmp	r3, #16
 800607e:	d125      	bne.n	80060cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2210      	movs	r2, #16
 8006088:	4013      	ands	r3, r2
 800608a:	2b10      	cmp	r3, #16
 800608c:	d11e      	bne.n	80060cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2211      	movs	r2, #17
 8006094:	4252      	negs	r2, r2
 8006096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2208      	movs	r2, #8
 800609c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	23c0      	movs	r3, #192	; 0xc0
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4013      	ands	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 f986 	bl	80063c0 <HAL_TIM_IC_CaptureCallback>
 80060b4:	e007      	b.n	80060c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0018      	movs	r0, r3
 80060ba:	f000 f979 	bl	80063b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	0018      	movs	r0, r3
 80060c2:	f000 f985 	bl	80063d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2201      	movs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10f      	bne.n	80060fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d108      	bne.n	80060fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2202      	movs	r2, #2
 80060ee:	4252      	negs	r2, r2
 80060f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fa fe75 	bl	8000de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	4013      	ands	r3, r2
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d10f      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2280      	movs	r2, #128	; 0x80
 8006110:	4013      	ands	r3, r2
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d108      	bne.n	8006128 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2281      	movs	r2, #129	; 0x81
 800611c:	4252      	negs	r2, r2
 800611e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	0018      	movs	r0, r3
 8006124:	f000 fde8 	bl	8006cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	401a      	ands	r2, r3
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	429a      	cmp	r2, r3
 800613a:	d10e      	bne.n	800615a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2280      	movs	r2, #128	; 0x80
 8006144:	4013      	ands	r3, r2
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d107      	bne.n	800615a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_TIM_IRQHandler+0x260>)
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	0018      	movs	r0, r3
 8006156:	f000 fdd7 	bl	8006d08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2240      	movs	r2, #64	; 0x40
 8006162:	4013      	ands	r3, r2
 8006164:	2b40      	cmp	r3, #64	; 0x40
 8006166:	d10f      	bne.n	8006188 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2240      	movs	r2, #64	; 0x40
 8006170:	4013      	ands	r3, r2
 8006172:	2b40      	cmp	r3, #64	; 0x40
 8006174:	d108      	bne.n	8006188 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2241      	movs	r2, #65	; 0x41
 800617c:	4252      	negs	r2, r2
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f92c 	bl	80063e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2220      	movs	r2, #32
 8006190:	4013      	ands	r3, r2
 8006192:	2b20      	cmp	r3, #32
 8006194:	d10f      	bne.n	80061b6 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	4013      	ands	r3, r2
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d108      	bne.n	80061b6 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2221      	movs	r2, #33	; 0x21
 80061aa:	4252      	negs	r2, r2
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fd99 	bl	8006ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b002      	add	sp, #8
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	fffffeff 	.word	0xfffffeff

080061c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	223c      	movs	r2, #60	; 0x3c
 80061d4:	5c9b      	ldrb	r3, [r3, r2]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e0df      	b.n	800639e <HAL_TIM_PWM_ConfigChannel+0x1da>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	223c      	movs	r2, #60	; 0x3c
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b14      	cmp	r3, #20
 80061ea:	d900      	bls.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x2a>
 80061ec:	e0d1      	b.n	8006392 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	009a      	lsls	r2, r3, #2
 80061f2:	4b6d      	ldr	r3, [pc, #436]	; (80063a8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80061f4:	18d3      	adds	r3, r2, r3
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0011      	movs	r1, r2
 8006202:	0018      	movs	r0, r3
 8006204:	f000 f974 	bl	80064f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2108      	movs	r1, #8
 8006214:	430a      	orrs	r2, r1
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2104      	movs	r1, #4
 8006224:	438a      	bics	r2, r1
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	619a      	str	r2, [r3, #24]
      break;
 800623a:	e0ab      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	0011      	movs	r1, r2
 8006244:	0018      	movs	r0, r3
 8006246:	f000 f9dd 	bl	8006604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0109      	lsls	r1, r1, #4
 8006258:	430a      	orrs	r2, r1
 800625a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4951      	ldr	r1, [pc, #324]	; (80063ac <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006268:	400a      	ands	r2, r1
 800626a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6999      	ldr	r1, [r3, #24]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	619a      	str	r2, [r3, #24]
      break;
 8006280:	e088      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	0011      	movs	r1, r2
 800628a:	0018      	movs	r0, r3
 800628c:	f000 fa3e 	bl	800670c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69da      	ldr	r2, [r3, #28]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2108      	movs	r1, #8
 800629c:	430a      	orrs	r2, r1
 800629e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2104      	movs	r1, #4
 80062ac:	438a      	bics	r2, r1
 80062ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69d9      	ldr	r1, [r3, #28]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	61da      	str	r2, [r3, #28]
      break;
 80062c2:	e067      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	0011      	movs	r1, r2
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 faa5 	bl	800681c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	0109      	lsls	r1, r1, #4
 80062e0:	430a      	orrs	r2, r1
 80062e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	492f      	ldr	r1, [pc, #188]	; (80063ac <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69d9      	ldr	r1, [r3, #28]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	021a      	lsls	r2, r3, #8
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	61da      	str	r2, [r3, #28]
      break;
 8006308:	e044      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	0011      	movs	r1, r2
 8006312:	0018      	movs	r0, r3
 8006314:	f000 faec 	bl	80068f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2108      	movs	r1, #8
 8006324:	430a      	orrs	r2, r1
 8006326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2104      	movs	r1, #4
 8006334:	438a      	bics	r2, r1
 8006336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800634a:	e023      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	0011      	movs	r1, r2
 8006354:	0018      	movs	r0, r3
 8006356:	f000 fb2b 	bl	80069b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2180      	movs	r1, #128	; 0x80
 8006366:	0109      	lsls	r1, r1, #4
 8006368:	430a      	orrs	r2, r1
 800636a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	490d      	ldr	r1, [pc, #52]	; (80063ac <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006378:	400a      	ands	r2, r1
 800637a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006390:	e000      	b.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8006392:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	223c      	movs	r2, #60	; 0x3c
 8006398:	2100      	movs	r1, #0
 800639a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	0018      	movs	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b004      	add	sp, #16
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	08009524 	.word	0x08009524
 80063ac:	fffffbff 	.word	0xfffffbff

080063b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b8:	46c0      	nop			; (mov r8, r8)
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b002      	add	sp, #8
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d8:	46c0      	nop			; (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b002      	add	sp, #8
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b002      	add	sp, #8
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <TIM_Base_SetConfig+0xe4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d008      	beq.n	800641a <TIM_Base_SetConfig+0x2a>
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	05db      	lsls	r3, r3, #23
 800640e:	429a      	cmp	r2, r3
 8006410:	d003      	beq.n	800641a <TIM_Base_SetConfig+0x2a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a30      	ldr	r2, [pc, #192]	; (80064d8 <TIM_Base_SetConfig+0xe8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2270      	movs	r2, #112	; 0x70
 800641e:	4393      	bics	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <TIM_Base_SetConfig+0xe4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	05db      	lsls	r3, r3, #23
 800643a:	429a      	cmp	r2, r3
 800643c:	d013      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <TIM_Base_SetConfig+0xe8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a24      	ldr	r2, [pc, #144]	; (80064dc <TIM_Base_SetConfig+0xec>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a23      	ldr	r2, [pc, #140]	; (80064e0 <TIM_Base_SetConfig+0xf0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a22      	ldr	r2, [pc, #136]	; (80064e4 <TIM_Base_SetConfig+0xf4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d003      	beq.n	8006466 <TIM_Base_SetConfig+0x76>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a21      	ldr	r2, [pc, #132]	; (80064e8 <TIM_Base_SetConfig+0xf8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d108      	bne.n	8006478 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a20      	ldr	r2, [pc, #128]	; (80064ec <TIM_Base_SetConfig+0xfc>)
 800646a:	4013      	ands	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	4393      	bics	r3, r2
 800647e:	001a      	movs	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a0c      	ldr	r2, [pc, #48]	; (80064d4 <TIM_Base_SetConfig+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_Base_SetConfig+0xce>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <TIM_Base_SetConfig+0xf0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_Base_SetConfig+0xce>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a0c      	ldr	r2, [pc, #48]	; (80064e4 <TIM_Base_SetConfig+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_Base_SetConfig+0xce>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a0b      	ldr	r2, [pc, #44]	; (80064e8 <TIM_Base_SetConfig+0xf8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d103      	bne.n	80064c6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	615a      	str	r2, [r3, #20]
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b004      	add	sp, #16
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40002000 	.word	0x40002000
 80064e0:	40014000 	.word	0x40014000
 80064e4:	40014400 	.word	0x40014400
 80064e8:	40014800 	.word	0x40014800
 80064ec:	fffffcff 	.word	0xfffffcff

080064f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	2201      	movs	r2, #1
 8006500:	4393      	bics	r3, r2
 8006502:	001a      	movs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a32      	ldr	r2, [pc, #200]	; (80065e8 <TIM_OC1_SetConfig+0xf8>)
 800651e:	4013      	ands	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2203      	movs	r2, #3
 8006526:	4393      	bics	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2202      	movs	r2, #2
 8006538:	4393      	bics	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a28      	ldr	r2, [pc, #160]	; (80065ec <TIM_OC1_SetConfig+0xfc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_OC1_SetConfig+0x76>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a27      	ldr	r2, [pc, #156]	; (80065f0 <TIM_OC1_SetConfig+0x100>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_OC1_SetConfig+0x76>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <TIM_OC1_SetConfig+0x104>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_OC1_SetConfig+0x76>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <TIM_OC1_SetConfig+0x108>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d10c      	bne.n	8006580 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2208      	movs	r2, #8
 800656a:	4393      	bics	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2204      	movs	r2, #4
 800657c:	4393      	bics	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <TIM_OC1_SetConfig+0xfc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC1_SetConfig+0xb0>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a19      	ldr	r2, [pc, #100]	; (80065f0 <TIM_OC1_SetConfig+0x100>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC1_SetConfig+0xb0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a18      	ldr	r2, [pc, #96]	; (80065f4 <TIM_OC1_SetConfig+0x104>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC1_SetConfig+0xb0>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <TIM_OC1_SetConfig+0x108>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d111      	bne.n	80065c4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4a16      	ldr	r2, [pc, #88]	; (80065fc <TIM_OC1_SetConfig+0x10c>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4a15      	ldr	r2, [pc, #84]	; (8006600 <TIM_OC1_SetConfig+0x110>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	621a      	str	r2, [r3, #32]
}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b006      	add	sp, #24
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	fffeff8f 	.word	0xfffeff8f
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800
 80065fc:	fffffeff 	.word	0xfffffeff
 8006600:	fffffdff 	.word	0xfffffdff

08006604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	2210      	movs	r2, #16
 8006614:	4393      	bics	r3, r2
 8006616:	001a      	movs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a2e      	ldr	r2, [pc, #184]	; (80066ec <TIM_OC2_SetConfig+0xe8>)
 8006632:	4013      	ands	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a2d      	ldr	r2, [pc, #180]	; (80066f0 <TIM_OC2_SetConfig+0xec>)
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2220      	movs	r2, #32
 800664e:	4393      	bics	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a24      	ldr	r2, [pc, #144]	; (80066f4 <TIM_OC2_SetConfig+0xf0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d10d      	bne.n	8006682 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2280      	movs	r2, #128	; 0x80
 800666a:	4393      	bics	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2240      	movs	r2, #64	; 0x40
 800667e:	4393      	bics	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <TIM_OC2_SetConfig+0xf0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_OC2_SetConfig+0x9e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a1a      	ldr	r2, [pc, #104]	; (80066f8 <TIM_OC2_SetConfig+0xf4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <TIM_OC2_SetConfig+0x9e>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <TIM_OC2_SetConfig+0xf8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC2_SetConfig+0x9e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <TIM_OC2_SetConfig+0xfc>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d113      	bne.n	80066ca <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC2_SetConfig+0x100>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4a16      	ldr	r2, [pc, #88]	; (8006708 <TIM_OC2_SetConfig+0x104>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b006      	add	sp, #24
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	feff8fff 	.word	0xfeff8fff
 80066f0:	fffffcff 	.word	0xfffffcff
 80066f4:	40012c00 	.word	0x40012c00
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	fffffbff 	.word	0xfffffbff
 8006708:	fffff7ff 	.word	0xfffff7ff

0800670c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	4a35      	ldr	r2, [pc, #212]	; (80067f0 <TIM_OC3_SetConfig+0xe4>)
 800671c:	401a      	ands	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a2f      	ldr	r2, [pc, #188]	; (80067f4 <TIM_OC3_SetConfig+0xe8>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2203      	movs	r2, #3
 8006740:	4393      	bics	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4a29      	ldr	r2, [pc, #164]	; (80067f8 <TIM_OC3_SetConfig+0xec>)
 8006752:	4013      	ands	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a25      	ldr	r2, [pc, #148]	; (80067fc <TIM_OC3_SetConfig+0xf0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10d      	bne.n	8006786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	4a24      	ldr	r2, [pc, #144]	; (8006800 <TIM_OC3_SetConfig+0xf4>)
 800676e:	4013      	ands	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	021b      	lsls	r3, r3, #8
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4a20      	ldr	r2, [pc, #128]	; (8006804 <TIM_OC3_SetConfig+0xf8>)
 8006782:	4013      	ands	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1c      	ldr	r2, [pc, #112]	; (80067fc <TIM_OC3_SetConfig+0xf0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d00b      	beq.n	80067a6 <TIM_OC3_SetConfig+0x9a>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <TIM_OC3_SetConfig+0xfc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d007      	beq.n	80067a6 <TIM_OC3_SetConfig+0x9a>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <TIM_OC3_SetConfig+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x9a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <TIM_OC3_SetConfig+0x104>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d113      	bne.n	80067ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <TIM_OC3_SetConfig+0x108>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4a19      	ldr	r2, [pc, #100]	; (8006818 <TIM_OC3_SetConfig+0x10c>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	621a      	str	r2, [r3, #32]
}
 80067e8:	46c0      	nop			; (mov r8, r8)
 80067ea:	46bd      	mov	sp, r7
 80067ec:	b006      	add	sp, #24
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	fffffeff 	.word	0xfffffeff
 80067f4:	fffeff8f 	.word	0xfffeff8f
 80067f8:	fffffdff 	.word	0xfffffdff
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	fffff7ff 	.word	0xfffff7ff
 8006804:	fffffbff 	.word	0xfffffbff
 8006808:	40014000 	.word	0x40014000
 800680c:	40014400 	.word	0x40014400
 8006810:	40014800 	.word	0x40014800
 8006814:	ffffefff 	.word	0xffffefff
 8006818:	ffffdfff 	.word	0xffffdfff

0800681c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	4a28      	ldr	r2, [pc, #160]	; (80068cc <TIM_OC4_SetConfig+0xb0>)
 800682c:	401a      	ands	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a22      	ldr	r2, [pc, #136]	; (80068d0 <TIM_OC4_SetConfig+0xb4>)
 8006848:	4013      	ands	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a21      	ldr	r2, [pc, #132]	; (80068d4 <TIM_OC4_SetConfig+0xb8>)
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <TIM_OC4_SetConfig+0xbc>)
 8006864:	4013      	ands	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a19      	ldr	r2, [pc, #100]	; (80068dc <TIM_OC4_SetConfig+0xc0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_OC4_SetConfig+0x78>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <TIM_OC4_SetConfig+0xc4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC4_SetConfig+0x78>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <TIM_OC4_SetConfig+0xc8>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC4_SetConfig+0x78>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a16      	ldr	r2, [pc, #88]	; (80068e8 <TIM_OC4_SetConfig+0xcc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d109      	bne.n	80068a8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	4a15      	ldr	r2, [pc, #84]	; (80068ec <TIM_OC4_SetConfig+0xd0>)
 8006898:	4013      	ands	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b006      	add	sp, #24
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	ffffefff 	.word	0xffffefff
 80068d0:	feff8fff 	.word	0xfeff8fff
 80068d4:	fffffcff 	.word	0xfffffcff
 80068d8:	ffffdfff 	.word	0xffffdfff
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800
 80068ec:	ffffbfff 	.word	0xffffbfff

080068f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	4a25      	ldr	r2, [pc, #148]	; (8006994 <TIM_OC5_SetConfig+0xa4>)
 8006900:	401a      	ands	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4a1f      	ldr	r2, [pc, #124]	; (8006998 <TIM_OC5_SetConfig+0xa8>)
 800691c:	4013      	ands	r3, r2
 800691e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4a1b      	ldr	r2, [pc, #108]	; (800699c <TIM_OC5_SetConfig+0xac>)
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	041b      	lsls	r3, r3, #16
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a17      	ldr	r2, [pc, #92]	; (80069a0 <TIM_OC5_SetConfig+0xb0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00b      	beq.n	800695e <TIM_OC5_SetConfig+0x6e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <TIM_OC5_SetConfig+0xb4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_OC5_SetConfig+0x6e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a15      	ldr	r2, [pc, #84]	; (80069a8 <TIM_OC5_SetConfig+0xb8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_OC5_SetConfig+0x6e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a14      	ldr	r2, [pc, #80]	; (80069ac <TIM_OC5_SetConfig+0xbc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d109      	bne.n	8006972 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <TIM_OC5_SetConfig+0xa4>)
 8006962:	4013      	ands	r3, r2
 8006964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	021b      	lsls	r3, r3, #8
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	621a      	str	r2, [r3, #32]
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	b006      	add	sp, #24
 8006992:	bd80      	pop	{r7, pc}
 8006994:	fffeffff 	.word	0xfffeffff
 8006998:	fffeff8f 	.word	0xfffeff8f
 800699c:	fffdffff 	.word	0xfffdffff
 80069a0:	40012c00 	.word	0x40012c00
 80069a4:	40014000 	.word	0x40014000
 80069a8:	40014400 	.word	0x40014400
 80069ac:	40014800 	.word	0x40014800

080069b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <TIM_OC6_SetConfig+0xa8>)
 80069c0:	401a      	ands	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4a20      	ldr	r2, [pc, #128]	; (8006a5c <TIM_OC6_SetConfig+0xac>)
 80069dc:	4013      	ands	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4a1c      	ldr	r2, [pc, #112]	; (8006a60 <TIM_OC6_SetConfig+0xb0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	051b      	lsls	r3, r3, #20
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a18      	ldr	r2, [pc, #96]	; (8006a64 <TIM_OC6_SetConfig+0xb4>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00b      	beq.n	8006a20 <TIM_OC6_SetConfig+0x70>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <TIM_OC6_SetConfig+0xb8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d007      	beq.n	8006a20 <TIM_OC6_SetConfig+0x70>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a16      	ldr	r2, [pc, #88]	; (8006a6c <TIM_OC6_SetConfig+0xbc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d003      	beq.n	8006a20 <TIM_OC6_SetConfig+0x70>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <TIM_OC6_SetConfig+0xc0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d109      	bne.n	8006a34 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	4a14      	ldr	r2, [pc, #80]	; (8006a74 <TIM_OC6_SetConfig+0xc4>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	029b      	lsls	r3, r3, #10
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	46bd      	mov	sp, r7
 8006a52:	b006      	add	sp, #24
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	ffefffff 	.word	0xffefffff
 8006a5c:	feff8fff 	.word	0xfeff8fff
 8006a60:	ffdfffff 	.word	0xffdfffff
 8006a64:	40012c00 	.word	0x40012c00
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40014400 	.word	0x40014400
 8006a70:	40014800 	.word	0x40014800
 8006a74:	fffbffff 	.word	0xfffbffff

08006a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	221f      	movs	r2, #31
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	0013      	movs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	43d2      	mvns	r2, r2
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	211f      	movs	r1, #31
 8006aa8:	400b      	ands	r3, r1
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4099      	lsls	r1, r3
 8006aae:	000b      	movs	r3, r1
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b006      	add	sp, #24
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	223c      	movs	r2, #60	; 0x3c
 8006ace:	5c9b      	ldrb	r3, [r3, r2]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d101      	bne.n	8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e055      	b.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	223c      	movs	r2, #60	; 0x3c
 8006adc:	2101      	movs	r1, #1
 8006ade:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	223d      	movs	r2, #61	; 0x3d
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a23      	ldr	r2, [pc, #140]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d108      	bne.n	8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b06:	4013      	ands	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2270      	movs	r2, #112	; 0x70
 8006b18:	4393      	bics	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00f      	beq.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	05db      	lsls	r3, r3, #23
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d009      	beq.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a11      	ldr	r2, [pc, #68]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d10c      	bne.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2280      	movs	r2, #128	; 0x80
 8006b5c:	4393      	bics	r3, r2
 8006b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	223d      	movs	r2, #61	; 0x3d
 8006b76:	2101      	movs	r1, #1
 8006b78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	223c      	movs	r2, #60	; 0x3c
 8006b7e:	2100      	movs	r1, #0
 8006b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	0018      	movs	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b004      	add	sp, #16
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40012c00 	.word	0x40012c00
 8006b90:	ff0fffff 	.word	0xff0fffff
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40014000 	.word	0x40014000

08006b9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	223c      	movs	r2, #60	; 0x3c
 8006bae:	5c9b      	ldrb	r3, [r3, r2]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e079      	b.n	8006cac <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	223c      	movs	r2, #60	; 0x3c
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	22ff      	movs	r2, #255	; 0xff
 8006bc4:	4393      	bics	r3, r2
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a38      	ldr	r2, [pc, #224]	; (8006cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006bd4:	401a      	ands	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4a35      	ldr	r2, [pc, #212]	; (8006cb8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006be2:	401a      	ands	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006bf0:	401a      	ands	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006bfe:	401a      	ands	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a2e      	ldr	r2, [pc, #184]	; (8006cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006c28:	401a      	ands	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	041b      	lsls	r3, r3, #16
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006c42:	401a      	ands	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d121      	bne.n	8006c9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a1f      	ldr	r2, [pc, #124]	; (8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	051b      	lsls	r3, r3, #20
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a1c      	ldr	r2, [pc, #112]	; (8006cdc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006c78:	401a      	ands	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a12      	ldr	r2, [pc, #72]	; (8006cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d106      	bne.n	8006c9a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a15      	ldr	r2, [pc, #84]	; (8006ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006c90:	401a      	ands	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	223c      	movs	r2, #60	; 0x3c
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	fffffcff 	.word	0xfffffcff
 8006cb8:	fffffbff 	.word	0xfffffbff
 8006cbc:	fffff7ff 	.word	0xfffff7ff
 8006cc0:	ffffefff 	.word	0xffffefff
 8006cc4:	ffffdfff 	.word	0xffffdfff
 8006cc8:	ffffbfff 	.word	0xffffbfff
 8006ccc:	fff0ffff 	.word	0xfff0ffff
 8006cd0:	40012c00 	.word	0x40012c00
 8006cd4:	efffffff 	.word	0xefffffff
 8006cd8:	ff0fffff 	.word	0xff0fffff
 8006cdc:	feffffff 	.word	0xfeffffff
 8006ce0:	fdffffff 	.word	0xfdffffff
 8006ce4:	dfffffff 	.word	0xdfffffff

08006ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <fe25519_unpack>:
 8006d18:	788b      	ldrb	r3, [r1, #2]
 8006d1a:	78ca      	ldrb	r2, [r1, #3]
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	0612      	lsls	r2, r2, #24
 8006d20:	4313      	orrs	r3, r2
 8006d22:	780a      	ldrb	r2, [r1, #0]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	784a      	ldrb	r2, [r1, #1]
 8006d28:	0212      	lsls	r2, r2, #8
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	6003      	str	r3, [r0, #0]
 8006d2e:	79cb      	ldrb	r3, [r1, #7]
 8006d30:	798a      	ldrb	r2, [r1, #6]
 8006d32:	061b      	lsls	r3, r3, #24
 8006d34:	0412      	lsls	r2, r2, #16
 8006d36:	4313      	orrs	r3, r2
 8006d38:	790a      	ldrb	r2, [r1, #4]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	794a      	ldrb	r2, [r1, #5]
 8006d3e:	0212      	lsls	r2, r2, #8
 8006d40:	4313      	orrs	r3, r2
 8006d42:	6043      	str	r3, [r0, #4]
 8006d44:	7acb      	ldrb	r3, [r1, #11]
 8006d46:	7a8a      	ldrb	r2, [r1, #10]
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	0412      	lsls	r2, r2, #16
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	7a0a      	ldrb	r2, [r1, #8]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	7a4a      	ldrb	r2, [r1, #9]
 8006d54:	0212      	lsls	r2, r2, #8
 8006d56:	4313      	orrs	r3, r2
 8006d58:	6083      	str	r3, [r0, #8]
 8006d5a:	7bcb      	ldrb	r3, [r1, #15]
 8006d5c:	7b8a      	ldrb	r2, [r1, #14]
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	0412      	lsls	r2, r2, #16
 8006d62:	4313      	orrs	r3, r2
 8006d64:	7b0a      	ldrb	r2, [r1, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	7b4a      	ldrb	r2, [r1, #13]
 8006d6a:	0212      	lsls	r2, r2, #8
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60c3      	str	r3, [r0, #12]
 8006d70:	7ccb      	ldrb	r3, [r1, #19]
 8006d72:	7c8a      	ldrb	r2, [r1, #18]
 8006d74:	061b      	lsls	r3, r3, #24
 8006d76:	0412      	lsls	r2, r2, #16
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	7c0a      	ldrb	r2, [r1, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	7c4a      	ldrb	r2, [r1, #17]
 8006d80:	0212      	lsls	r2, r2, #8
 8006d82:	4313      	orrs	r3, r2
 8006d84:	6103      	str	r3, [r0, #16]
 8006d86:	7dcb      	ldrb	r3, [r1, #23]
 8006d88:	7d8a      	ldrb	r2, [r1, #22]
 8006d8a:	061b      	lsls	r3, r3, #24
 8006d8c:	0412      	lsls	r2, r2, #16
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	7d0a      	ldrb	r2, [r1, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	7d4a      	ldrb	r2, [r1, #21]
 8006d96:	0212      	lsls	r2, r2, #8
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	6143      	str	r3, [r0, #20]
 8006d9c:	7ecb      	ldrb	r3, [r1, #27]
 8006d9e:	7e8a      	ldrb	r2, [r1, #26]
 8006da0:	061b      	lsls	r3, r3, #24
 8006da2:	0412      	lsls	r2, r2, #16
 8006da4:	4313      	orrs	r3, r2
 8006da6:	7e0a      	ldrb	r2, [r1, #24]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	7e4a      	ldrb	r2, [r1, #25]
 8006dac:	0212      	lsls	r2, r2, #8
 8006dae:	4313      	orrs	r3, r2
 8006db0:	6183      	str	r3, [r0, #24]
 8006db2:	7fcb      	ldrb	r3, [r1, #31]
 8006db4:	7f8a      	ldrb	r2, [r1, #30]
 8006db6:	061b      	lsls	r3, r3, #24
 8006db8:	0412      	lsls	r2, r2, #16
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	7f0a      	ldrb	r2, [r1, #28]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	7f4a      	ldrb	r2, [r1, #29]
 8006dc2:	0212      	lsls	r2, r2, #8
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	005b      	lsls	r3, r3, #1
 8006dc8:	085b      	lsrs	r3, r3, #1
 8006dca:	61c3      	str	r3, [r0, #28]
 8006dcc:	4770      	bx	lr
 8006dce:	46c0      	nop			; (mov r8, r8)

08006dd0 <fe25519_cmov>:
 8006dd0:	680b      	ldr	r3, [r1, #0]
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	6804      	ldr	r4, [r0, #0]
 8006dd6:	4252      	negs	r2, r2
 8006dd8:	4063      	eors	r3, r4
 8006dda:	4013      	ands	r3, r2
 8006ddc:	4063      	eors	r3, r4
 8006dde:	6003      	str	r3, [r0, #0]
 8006de0:	684b      	ldr	r3, [r1, #4]
 8006de2:	6844      	ldr	r4, [r0, #4]
 8006de4:	4063      	eors	r3, r4
 8006de6:	4013      	ands	r3, r2
 8006de8:	4063      	eors	r3, r4
 8006dea:	6043      	str	r3, [r0, #4]
 8006dec:	688b      	ldr	r3, [r1, #8]
 8006dee:	6884      	ldr	r4, [r0, #8]
 8006df0:	4063      	eors	r3, r4
 8006df2:	4013      	ands	r3, r2
 8006df4:	4063      	eors	r3, r4
 8006df6:	6083      	str	r3, [r0, #8]
 8006df8:	68cb      	ldr	r3, [r1, #12]
 8006dfa:	68c4      	ldr	r4, [r0, #12]
 8006dfc:	4063      	eors	r3, r4
 8006dfe:	4013      	ands	r3, r2
 8006e00:	4063      	eors	r3, r4
 8006e02:	60c3      	str	r3, [r0, #12]
 8006e04:	690b      	ldr	r3, [r1, #16]
 8006e06:	6904      	ldr	r4, [r0, #16]
 8006e08:	4063      	eors	r3, r4
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	4063      	eors	r3, r4
 8006e0e:	6103      	str	r3, [r0, #16]
 8006e10:	6944      	ldr	r4, [r0, #20]
 8006e12:	694b      	ldr	r3, [r1, #20]
 8006e14:	4063      	eors	r3, r4
 8006e16:	4013      	ands	r3, r2
 8006e18:	4063      	eors	r3, r4
 8006e1a:	6143      	str	r3, [r0, #20]
 8006e1c:	6984      	ldr	r4, [r0, #24]
 8006e1e:	698b      	ldr	r3, [r1, #24]
 8006e20:	4063      	eors	r3, r4
 8006e22:	4013      	ands	r3, r2
 8006e24:	4063      	eors	r3, r4
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	69c4      	ldr	r4, [r0, #28]
 8006e2a:	69cb      	ldr	r3, [r1, #28]
 8006e2c:	4063      	eors	r3, r4
 8006e2e:	401a      	ands	r2, r3
 8006e30:	4062      	eors	r2, r4
 8006e32:	61c2      	str	r2, [r0, #28]
 8006e34:	bd10      	pop	{r4, pc}
 8006e36:	46c0      	nop			; (mov r8, r8)

08006e38 <fe25519_copy>:
 8006e38:	680b      	ldr	r3, [r1, #0]
 8006e3a:	6003      	str	r3, [r0, #0]
 8006e3c:	684b      	ldr	r3, [r1, #4]
 8006e3e:	6043      	str	r3, [r0, #4]
 8006e40:	688b      	ldr	r3, [r1, #8]
 8006e42:	6083      	str	r3, [r0, #8]
 8006e44:	68cb      	ldr	r3, [r1, #12]
 8006e46:	60c3      	str	r3, [r0, #12]
 8006e48:	690b      	ldr	r3, [r1, #16]
 8006e4a:	6103      	str	r3, [r0, #16]
 8006e4c:	694b      	ldr	r3, [r1, #20]
 8006e4e:	6143      	str	r3, [r0, #20]
 8006e50:	698b      	ldr	r3, [r1, #24]
 8006e52:	6183      	str	r3, [r0, #24]
 8006e54:	69cb      	ldr	r3, [r1, #28]
 8006e56:	61c3      	str	r3, [r0, #28]
 8006e58:	4770      	bx	lr
 8006e5a:	46c0      	nop			; (mov r8, r8)

08006e5c <fe25519_setone>:
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	6003      	str	r3, [r0, #0]
 8006e60:	2300      	movs	r3, #0
 8006e62:	6043      	str	r3, [r0, #4]
 8006e64:	6083      	str	r3, [r0, #8]
 8006e66:	60c3      	str	r3, [r0, #12]
 8006e68:	6103      	str	r3, [r0, #16]
 8006e6a:	6143      	str	r3, [r0, #20]
 8006e6c:	6183      	str	r3, [r0, #24]
 8006e6e:	61c3      	str	r3, [r0, #28]
 8006e70:	4770      	bx	lr
 8006e72:	46c0      	nop			; (mov r8, r8)

08006e74 <fe25519_setzero>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	2220      	movs	r2, #32
 8006e78:	2100      	movs	r1, #0
 8006e7a:	f001 faf8 	bl	800846e <memset>
 8006e7e:	bd10      	pop	{r4, pc}

08006e80 <fe25519_add>:
 8006e80:	000b      	movs	r3, r1
 8006e82:	6809      	ldr	r1, [r1, #0]
 8006e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e86:	464f      	mov	r7, r9
 8006e88:	4689      	mov	r9, r1
 8006e8a:	6811      	ldr	r1, [r2, #0]
 8006e8c:	46d6      	mov	lr, sl
 8006e8e:	4646      	mov	r6, r8
 8006e90:	000c      	movs	r4, r1
 8006e92:	4680      	mov	r8, r0
 8006e94:	468a      	mov	sl, r1
 8006e96:	2500      	movs	r5, #0
 8006e98:	4648      	mov	r0, r9
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	1900      	adds	r0, r0, r4
 8006e9e:	4169      	adcs	r1, r5
 8006ea0:	b5c0      	push	{r6, r7, lr}
 8006ea2:	000c      	movs	r4, r1
 8006ea4:	2700      	movs	r7, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	6850      	ldr	r0, [r2, #4]
 8006eaa:	685e      	ldr	r6, [r3, #4]
 8006eac:	2500      	movs	r5, #0
 8006eae:	1980      	adds	r0, r0, r6
 8006eb0:	4179      	adcs	r1, r7
 8006eb2:	1900      	adds	r0, r0, r4
 8006eb4:	4169      	adcs	r1, r5
 8006eb6:	b08c      	sub	sp, #48	; 0x30
 8006eb8:	9000      	str	r0, [sp, #0]
 8006eba:	9101      	str	r1, [sp, #4]
 8006ebc:	000c      	movs	r4, r1
 8006ebe:	2700      	movs	r7, #0
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	6890      	ldr	r0, [r2, #8]
 8006ec4:	689e      	ldr	r6, [r3, #8]
 8006ec6:	2500      	movs	r5, #0
 8006ec8:	1980      	adds	r0, r0, r6
 8006eca:	4179      	adcs	r1, r7
 8006ecc:	0006      	movs	r6, r0
 8006ece:	000f      	movs	r7, r1
 8006ed0:	1936      	adds	r6, r6, r4
 8006ed2:	416f      	adcs	r7, r5
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	9602      	str	r6, [sp, #8]
 8006ed8:	9703      	str	r7, [sp, #12]
 8006eda:	003c      	movs	r4, r7
 8006edc:	2700      	movs	r7, #0
 8006ede:	68d6      	ldr	r6, [r2, #12]
 8006ee0:	68d8      	ldr	r0, [r3, #12]
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	1980      	adds	r0, r0, r6
 8006ee6:	4179      	adcs	r1, r7
 8006ee8:	1900      	adds	r0, r0, r4
 8006eea:	4169      	adcs	r1, r5
 8006eec:	2700      	movs	r7, #0
 8006eee:	9004      	str	r0, [sp, #16]
 8006ef0:	9105      	str	r1, [sp, #20]
 8006ef2:	000c      	movs	r4, r1
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	6916      	ldr	r6, [r2, #16]
 8006ef8:	6918      	ldr	r0, [r3, #16]
 8006efa:	2500      	movs	r5, #0
 8006efc:	1980      	adds	r0, r0, r6
 8006efe:	4179      	adcs	r1, r7
 8006f00:	0006      	movs	r6, r0
 8006f02:	000f      	movs	r7, r1
 8006f04:	1936      	adds	r6, r6, r4
 8006f06:	416f      	adcs	r7, r5
 8006f08:	2100      	movs	r1, #0
 8006f0a:	9606      	str	r6, [sp, #24]
 8006f0c:	9707      	str	r7, [sp, #28]
 8006f0e:	003c      	movs	r4, r7
 8006f10:	2700      	movs	r7, #0
 8006f12:	6956      	ldr	r6, [r2, #20]
 8006f14:	6958      	ldr	r0, [r3, #20]
 8006f16:	2500      	movs	r5, #0
 8006f18:	1980      	adds	r0, r0, r6
 8006f1a:	4179      	adcs	r1, r7
 8006f1c:	1900      	adds	r0, r0, r4
 8006f1e:	4169      	adcs	r1, r5
 8006f20:	2700      	movs	r7, #0
 8006f22:	9008      	str	r0, [sp, #32]
 8006f24:	9109      	str	r1, [sp, #36]	; 0x24
 8006f26:	000c      	movs	r4, r1
 8006f28:	2100      	movs	r1, #0
 8006f2a:	6996      	ldr	r6, [r2, #24]
 8006f2c:	6998      	ldr	r0, [r3, #24]
 8006f2e:	2500      	movs	r5, #0
 8006f30:	1980      	adds	r0, r0, r6
 8006f32:	4179      	adcs	r1, r7
 8006f34:	0006      	movs	r6, r0
 8006f36:	000f      	movs	r7, r1
 8006f38:	1936      	adds	r6, r6, r4
 8006f3a:	416f      	adcs	r7, r5
 8006f3c:	003d      	movs	r5, r7
 8006f3e:	0034      	movs	r4, r6
 8006f40:	2100      	movs	r1, #0
 8006f42:	940a      	str	r4, [sp, #40]	; 0x28
 8006f44:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f46:	002e      	movs	r6, r5
 8006f48:	2500      	movs	r5, #0
 8006f4a:	69d4      	ldr	r4, [r2, #28]
 8006f4c:	69d8      	ldr	r0, [r3, #28]
 8006f4e:	2700      	movs	r7, #0
 8006f50:	1900      	adds	r0, r0, r4
 8006f52:	4169      	adcs	r1, r5
 8006f54:	1836      	adds	r6, r6, r0
 8006f56:	414f      	adcs	r7, r1
 8006f58:	2226      	movs	r2, #38	; 0x26
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	0038      	movs	r0, r7
 8006f5e:	44ca      	add	sl, r9
 8006f60:	2100      	movs	r1, #0
 8006f62:	f7f9 f95d 	bl	8000220 <__aeabi_lmul>
 8006f66:	4652      	mov	r2, sl
 8006f68:	2300      	movs	r3, #0
 8006f6a:	1880      	adds	r0, r0, r2
 8006f6c:	4159      	adcs	r1, r3
 8006f6e:	2500      	movs	r5, #0
 8006f70:	000c      	movs	r4, r1
 8006f72:	2300      	movs	r3, #0
 8006f74:	9a00      	ldr	r2, [sp, #0]
 8006f76:	1912      	adds	r2, r2, r4
 8006f78:	416b      	adcs	r3, r5
 8006f7a:	4645      	mov	r5, r8
 8006f7c:	001c      	movs	r4, r3
 8006f7e:	606a      	str	r2, [r5, #4]
 8006f80:	2300      	movs	r3, #0
 8006f82:	2500      	movs	r5, #0
 8006f84:	9a02      	ldr	r2, [sp, #8]
 8006f86:	1912      	adds	r2, r2, r4
 8006f88:	416b      	adcs	r3, r5
 8006f8a:	4645      	mov	r5, r8
 8006f8c:	001c      	movs	r4, r3
 8006f8e:	60aa      	str	r2, [r5, #8]
 8006f90:	2300      	movs	r3, #0
 8006f92:	2500      	movs	r5, #0
 8006f94:	9a04      	ldr	r2, [sp, #16]
 8006f96:	1912      	adds	r2, r2, r4
 8006f98:	416b      	adcs	r3, r5
 8006f9a:	4645      	mov	r5, r8
 8006f9c:	001c      	movs	r4, r3
 8006f9e:	60ea      	str	r2, [r5, #12]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	9a06      	ldr	r2, [sp, #24]
 8006fa6:	1912      	adds	r2, r2, r4
 8006fa8:	416b      	adcs	r3, r5
 8006faa:	4645      	mov	r5, r8
 8006fac:	001c      	movs	r4, r3
 8006fae:	612a      	str	r2, [r5, #16]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2500      	movs	r5, #0
 8006fb4:	9a08      	ldr	r2, [sp, #32]
 8006fb6:	1912      	adds	r2, r2, r4
 8006fb8:	416b      	adcs	r3, r5
 8006fba:	4645      	mov	r5, r8
 8006fbc:	001c      	movs	r4, r3
 8006fbe:	616a      	str	r2, [r5, #20]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc6:	1912      	adds	r2, r2, r4
 8006fc8:	416b      	adcs	r3, r5
 8006fca:	4644      	mov	r4, r8
 8006fcc:	2500      	movs	r5, #0
 8006fce:	61a2      	str	r2, [r4, #24]
 8006fd0:	0032      	movs	r2, r6
 8006fd2:	001c      	movs	r4, r3
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	18a4      	adds	r4, r4, r2
 8006fd8:	415d      	adcs	r5, r3
 8006fda:	2226      	movs	r2, #38	; 0x26
 8006fdc:	4643      	mov	r3, r8
 8006fde:	436a      	muls	r2, r5
 8006fe0:	1810      	adds	r0, r2, r0
 8006fe2:	61dc      	str	r4, [r3, #28]
 8006fe4:	6018      	str	r0, [r3, #0]
 8006fe6:	b00c      	add	sp, #48	; 0x30
 8006fe8:	bc1c      	pop	{r2, r3, r4}
 8006fea:	4690      	mov	r8, r2
 8006fec:	4699      	mov	r9, r3
 8006fee:	46a2      	mov	sl, r4
 8006ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)

08006ff4 <fe25519_sub>:
 8006ff4:	000b      	movs	r3, r1
 8006ff6:	6809      	ldr	r1, [r1, #0]
 8006ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ffa:	46d6      	mov	lr, sl
 8006ffc:	468a      	mov	sl, r1
 8006ffe:	6811      	ldr	r1, [r2, #0]
 8007000:	464f      	mov	r7, r9
 8007002:	4689      	mov	r9, r1
 8007004:	4646      	mov	r6, r8
 8007006:	464c      	mov	r4, r9
 8007008:	4680      	mov	r8, r0
 800700a:	2500      	movs	r5, #0
 800700c:	4650      	mov	r0, sl
 800700e:	2100      	movs	r1, #0
 8007010:	1b00      	subs	r0, r0, r4
 8007012:	41a9      	sbcs	r1, r5
 8007014:	b5c0      	push	{r6, r7, lr}
 8007016:	000c      	movs	r4, r1
 8007018:	17cd      	asrs	r5, r1, #31
 800701a:	2700      	movs	r7, #0
 800701c:	2100      	movs	r1, #0
 800701e:	6856      	ldr	r6, [r2, #4]
 8007020:	6858      	ldr	r0, [r3, #4]
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	1b80      	subs	r0, r0, r6
 8007026:	41b9      	sbcs	r1, r7
 8007028:	1900      	adds	r0, r0, r4
 800702a:	4169      	adcs	r1, r5
 800702c:	2700      	movs	r7, #0
 800702e:	9000      	str	r0, [sp, #0]
 8007030:	9101      	str	r1, [sp, #4]
 8007032:	000c      	movs	r4, r1
 8007034:	17cd      	asrs	r5, r1, #31
 8007036:	2100      	movs	r1, #0
 8007038:	6896      	ldr	r6, [r2, #8]
 800703a:	6898      	ldr	r0, [r3, #8]
 800703c:	1b80      	subs	r0, r0, r6
 800703e:	41b9      	sbcs	r1, r7
 8007040:	0006      	movs	r6, r0
 8007042:	000f      	movs	r7, r1
 8007044:	1936      	adds	r6, r6, r4
 8007046:	416f      	adcs	r7, r5
 8007048:	2100      	movs	r1, #0
 800704a:	9602      	str	r6, [sp, #8]
 800704c:	9703      	str	r7, [sp, #12]
 800704e:	003c      	movs	r4, r7
 8007050:	17fd      	asrs	r5, r7, #31
 8007052:	2700      	movs	r7, #0
 8007054:	68d6      	ldr	r6, [r2, #12]
 8007056:	68d8      	ldr	r0, [r3, #12]
 8007058:	1b80      	subs	r0, r0, r6
 800705a:	41b9      	sbcs	r1, r7
 800705c:	1900      	adds	r0, r0, r4
 800705e:	4169      	adcs	r1, r5
 8007060:	2700      	movs	r7, #0
 8007062:	9004      	str	r0, [sp, #16]
 8007064:	9105      	str	r1, [sp, #20]
 8007066:	000c      	movs	r4, r1
 8007068:	17cd      	asrs	r5, r1, #31
 800706a:	2100      	movs	r1, #0
 800706c:	6916      	ldr	r6, [r2, #16]
 800706e:	6918      	ldr	r0, [r3, #16]
 8007070:	1b80      	subs	r0, r0, r6
 8007072:	41b9      	sbcs	r1, r7
 8007074:	0006      	movs	r6, r0
 8007076:	000f      	movs	r7, r1
 8007078:	1936      	adds	r6, r6, r4
 800707a:	416f      	adcs	r7, r5
 800707c:	2100      	movs	r1, #0
 800707e:	9606      	str	r6, [sp, #24]
 8007080:	9707      	str	r7, [sp, #28]
 8007082:	003c      	movs	r4, r7
 8007084:	17fd      	asrs	r5, r7, #31
 8007086:	2700      	movs	r7, #0
 8007088:	6956      	ldr	r6, [r2, #20]
 800708a:	6958      	ldr	r0, [r3, #20]
 800708c:	1b80      	subs	r0, r0, r6
 800708e:	41b9      	sbcs	r1, r7
 8007090:	1900      	adds	r0, r0, r4
 8007092:	4169      	adcs	r1, r5
 8007094:	2700      	movs	r7, #0
 8007096:	9008      	str	r0, [sp, #32]
 8007098:	9109      	str	r1, [sp, #36]	; 0x24
 800709a:	000c      	movs	r4, r1
 800709c:	17cd      	asrs	r5, r1, #31
 800709e:	2100      	movs	r1, #0
 80070a0:	6996      	ldr	r6, [r2, #24]
 80070a2:	6998      	ldr	r0, [r3, #24]
 80070a4:	1b80      	subs	r0, r0, r6
 80070a6:	41b9      	sbcs	r1, r7
 80070a8:	0006      	movs	r6, r0
 80070aa:	000f      	movs	r7, r1
 80070ac:	1936      	adds	r6, r6, r4
 80070ae:	416f      	adcs	r7, r5
 80070b0:	0034      	movs	r4, r6
 80070b2:	003d      	movs	r5, r7
 80070b4:	0038      	movs	r0, r7
 80070b6:	940a      	str	r4, [sp, #40]	; 0x28
 80070b8:	950b      	str	r5, [sp, #44]	; 0x2c
 80070ba:	17f9      	asrs	r1, r7, #31
 80070bc:	2500      	movs	r5, #0
 80070be:	2700      	movs	r7, #0
 80070c0:	69d4      	ldr	r4, [r2, #28]
 80070c2:	69de      	ldr	r6, [r3, #28]
 80070c4:	2226      	movs	r2, #38	; 0x26
 80070c6:	1b36      	subs	r6, r6, r4
 80070c8:	41af      	sbcs	r7, r5
 80070ca:	1836      	adds	r6, r6, r0
 80070cc:	414f      	adcs	r7, r1
 80070ce:	4655      	mov	r5, sl
 80070d0:	464c      	mov	r4, r9
 80070d2:	17f9      	asrs	r1, r7, #31
 80070d4:	2300      	movs	r3, #0
 80070d6:	0038      	movs	r0, r7
 80070d8:	f7f9 f8a2 	bl	8000220 <__aeabi_lmul>
 80070dc:	2300      	movs	r3, #0
 80070de:	1b2a      	subs	r2, r5, r4
 80070e0:	1880      	adds	r0, r0, r2
 80070e2:	4159      	adcs	r1, r3
 80070e4:	2500      	movs	r5, #0
 80070e6:	000a      	movs	r2, r1
 80070e8:	9c00      	ldr	r4, [sp, #0]
 80070ea:	17cb      	asrs	r3, r1, #31
 80070ec:	1912      	adds	r2, r2, r4
 80070ee:	416b      	adcs	r3, r5
 80070f0:	4645      	mov	r5, r8
 80070f2:	001c      	movs	r4, r3
 80070f4:	606a      	str	r2, [r5, #4]
 80070f6:	17dd      	asrs	r5, r3, #31
 80070f8:	2300      	movs	r3, #0
 80070fa:	9a02      	ldr	r2, [sp, #8]
 80070fc:	18a4      	adds	r4, r4, r2
 80070fe:	415d      	adcs	r5, r3
 8007100:	4643      	mov	r3, r8
 8007102:	002a      	movs	r2, r5
 8007104:	609c      	str	r4, [r3, #8]
 8007106:	17eb      	asrs	r3, r5, #31
 8007108:	2500      	movs	r5, #0
 800710a:	9c04      	ldr	r4, [sp, #16]
 800710c:	18a4      	adds	r4, r4, r2
 800710e:	415d      	adcs	r5, r3
 8007110:	4643      	mov	r3, r8
 8007112:	002a      	movs	r2, r5
 8007114:	60dc      	str	r4, [r3, #12]
 8007116:	17eb      	asrs	r3, r5, #31
 8007118:	2500      	movs	r5, #0
 800711a:	9c06      	ldr	r4, [sp, #24]
 800711c:	1912      	adds	r2, r2, r4
 800711e:	416b      	adcs	r3, r5
 8007120:	4645      	mov	r5, r8
 8007122:	001c      	movs	r4, r3
 8007124:	612a      	str	r2, [r5, #16]
 8007126:	17dd      	asrs	r5, r3, #31
 8007128:	2300      	movs	r3, #0
 800712a:	9a08      	ldr	r2, [sp, #32]
 800712c:	1912      	adds	r2, r2, r4
 800712e:	416b      	adcs	r3, r5
 8007130:	4645      	mov	r5, r8
 8007132:	001c      	movs	r4, r3
 8007134:	616a      	str	r2, [r5, #20]
 8007136:	17dd      	asrs	r5, r3, #31
 8007138:	2300      	movs	r3, #0
 800713a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800713c:	1912      	adds	r2, r2, r4
 800713e:	416b      	adcs	r3, r5
 8007140:	4644      	mov	r4, r8
 8007142:	17dd      	asrs	r5, r3, #31
 8007144:	61a2      	str	r2, [r4, #24]
 8007146:	0032      	movs	r2, r6
 8007148:	001c      	movs	r4, r3
 800714a:	2300      	movs	r3, #0
 800714c:	18a4      	adds	r4, r4, r2
 800714e:	415d      	adcs	r5, r3
 8007150:	2226      	movs	r2, #38	; 0x26
 8007152:	4643      	mov	r3, r8
 8007154:	436a      	muls	r2, r5
 8007156:	1810      	adds	r0, r2, r0
 8007158:	61dc      	str	r4, [r3, #28]
 800715a:	6018      	str	r0, [r3, #0]
 800715c:	b00c      	add	sp, #48	; 0x30
 800715e:	bc1c      	pop	{r2, r3, r4}
 8007160:	4690      	mov	r8, r2
 8007162:	4699      	mov	r9, r3
 8007164:	46a2      	mov	sl, r4
 8007166:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007168 <fe25519_freeze>:
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	4684      	mov	ip, r0
 800716c:	2413      	movs	r4, #19
 800716e:	69c3      	ldr	r3, [r0, #28]
 8007170:	2100      	movs	r1, #0
 8007172:	17db      	asrs	r3, r3, #31
 8007174:	401c      	ands	r4, r3
 8007176:	4663      	mov	r3, ip
 8007178:	0022      	movs	r2, r4
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	2300      	movs	r3, #0
 800717e:	1880      	adds	r0, r0, r2
 8007180:	4159      	adcs	r1, r3
 8007182:	4663      	mov	r3, ip
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4647      	mov	r7, r8
 8007188:	4698      	mov	r8, r3
 800718a:	44a0      	add	r8, r4
 800718c:	46ce      	mov	lr, r9
 800718e:	4663      	mov	r3, ip
 8007190:	4642      	mov	r2, r8
 8007192:	b580      	push	{r7, lr}
 8007194:	601a      	str	r2, [r3, #0]
 8007196:	000a      	movs	r2, r1
 8007198:	4661      	mov	r1, ip
 800719a:	2300      	movs	r3, #0
 800719c:	2500      	movs	r5, #0
 800719e:	684c      	ldr	r4, [r1, #4]
 80071a0:	2700      	movs	r7, #0
 80071a2:	18a4      	adds	r4, r4, r2
 80071a4:	415d      	adcs	r5, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	002a      	movs	r2, r5
 80071aa:	688e      	ldr	r6, [r1, #8]
 80071ac:	b093      	sub	sp, #76	; 0x4c
 80071ae:	18b6      	adds	r6, r6, r2
 80071b0:	415f      	adcs	r7, r3
 80071b2:	4663      	mov	r3, ip
 80071b4:	604c      	str	r4, [r1, #4]
 80071b6:	9600      	str	r6, [sp, #0]
 80071b8:	9701      	str	r7, [sp, #4]
 80071ba:	0038      	movs	r0, r7
 80071bc:	2100      	movs	r1, #0
 80071be:	2700      	movs	r7, #0
 80071c0:	609e      	str	r6, [r3, #8]
 80071c2:	68de      	ldr	r6, [r3, #12]
 80071c4:	2500      	movs	r5, #0
 80071c6:	1980      	adds	r0, r0, r6
 80071c8:	4179      	adcs	r1, r7
 80071ca:	9002      	str	r0, [sp, #8]
 80071cc:	9103      	str	r1, [sp, #12]
 80071ce:	000a      	movs	r2, r1
 80071d0:	4661      	mov	r1, ip
 80071d2:	60d8      	str	r0, [r3, #12]
 80071d4:	2700      	movs	r7, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	690e      	ldr	r6, [r1, #16]
 80071da:	18b6      	adds	r6, r6, r2
 80071dc:	415f      	adcs	r7, r3
 80071de:	0030      	movs	r0, r6
 80071e0:	0039      	movs	r1, r7
 80071e2:	4663      	mov	r3, ip
 80071e4:	9004      	str	r0, [sp, #16]
 80071e6:	9105      	str	r1, [sp, #20]
 80071e8:	4661      	mov	r1, ip
 80071ea:	611e      	str	r6, [r3, #16]
 80071ec:	003a      	movs	r2, r7
 80071ee:	2300      	movs	r3, #0
 80071f0:	2700      	movs	r7, #0
 80071f2:	694e      	ldr	r6, [r1, #20]
 80071f4:	4660      	mov	r0, ip
 80071f6:	18b6      	adds	r6, r6, r2
 80071f8:	415f      	adcs	r7, r3
 80071fa:	4663      	mov	r3, ip
 80071fc:	9606      	str	r6, [sp, #24]
 80071fe:	9707      	str	r7, [sp, #28]
 8007200:	615e      	str	r6, [r3, #20]
 8007202:	003a      	movs	r2, r7
 8007204:	2300      	movs	r3, #0
 8007206:	2700      	movs	r7, #0
 8007208:	698e      	ldr	r6, [r1, #24]
 800720a:	18b6      	adds	r6, r6, r2
 800720c:	415f      	adcs	r7, r3
 800720e:	003b      	movs	r3, r7
 8007210:	0032      	movs	r2, r6
 8007212:	618e      	str	r6, [r1, #24]
 8007214:	9208      	str	r2, [sp, #32]
 8007216:	9309      	str	r3, [sp, #36]	; 0x24
 8007218:	001e      	movs	r6, r3
 800721a:	2700      	movs	r7, #0
 800721c:	2300      	movs	r3, #0
 800721e:	69ca      	ldr	r2, [r1, #28]
 8007220:	1992      	adds	r2, r2, r6
 8007222:	417b      	adcs	r3, r7
 8007224:	0052      	lsls	r2, r2, #1
 8007226:	0853      	lsrs	r3, r2, #1
 8007228:	4699      	mov	r9, r3
 800722a:	4663      	mov	r3, ip
 800722c:	4649      	mov	r1, r9
 800722e:	4646      	mov	r6, r8
 8007230:	61d9      	str	r1, [r3, #28]
 8007232:	2700      	movs	r7, #0
 8007234:	2113      	movs	r1, #19
 8007236:	2200      	movs	r2, #0
 8007238:	4643      	mov	r3, r8
 800723a:	1989      	adds	r1, r1, r6
 800723c:	417a      	adcs	r2, r7
 800723e:	3313      	adds	r3, #19
 8007240:	930a      	str	r3, [sp, #40]	; 0x28
 8007242:	0016      	movs	r6, r2
 8007244:	2700      	movs	r7, #0
 8007246:	0022      	movs	r2, r4
 8007248:	2300      	movs	r3, #0
 800724a:	1992      	adds	r2, r2, r6
 800724c:	417b      	adcs	r3, r7
 800724e:	2700      	movs	r7, #0
 8007250:	001e      	movs	r6, r3
 8007252:	2300      	movs	r3, #0
 8007254:	920b      	str	r2, [sp, #44]	; 0x2c
 8007256:	9a00      	ldr	r2, [sp, #0]
 8007258:	18b6      	adds	r6, r6, r2
 800725a:	415f      	adcs	r7, r3
 800725c:	2300      	movs	r3, #0
 800725e:	003c      	movs	r4, r7
 8007260:	9a02      	ldr	r2, [sp, #8]
 8007262:	960c      	str	r6, [sp, #48]	; 0x30
 8007264:	18a4      	adds	r4, r4, r2
 8007266:	415d      	adcs	r5, r3
 8007268:	2300      	movs	r3, #0
 800726a:	002a      	movs	r2, r5
 800726c:	2500      	movs	r5, #0
 800726e:	940d      	str	r4, [sp, #52]	; 0x34
 8007270:	9c04      	ldr	r4, [sp, #16]
 8007272:	18a4      	adds	r4, r4, r2
 8007274:	415d      	adcs	r5, r3
 8007276:	2300      	movs	r3, #0
 8007278:	002a      	movs	r2, r5
 800727a:	2500      	movs	r5, #0
 800727c:	940e      	str	r4, [sp, #56]	; 0x38
 800727e:	9c06      	ldr	r4, [sp, #24]
 8007280:	18a4      	adds	r4, r4, r2
 8007282:	415d      	adcs	r5, r3
 8007284:	2300      	movs	r3, #0
 8007286:	002a      	movs	r2, r5
 8007288:	2500      	movs	r5, #0
 800728a:	940f      	str	r4, [sp, #60]	; 0x3c
 800728c:	9c08      	ldr	r4, [sp, #32]
 800728e:	1912      	adds	r2, r2, r4
 8007290:	416b      	adcs	r3, r5
 8007292:	2500      	movs	r5, #0
 8007294:	9210      	str	r2, [sp, #64]	; 0x40
 8007296:	001c      	movs	r4, r3
 8007298:	464a      	mov	r2, r9
 800729a:	2300      	movs	r3, #0
 800729c:	18a4      	adds	r4, r4, r2
 800729e:	415d      	adcs	r5, r3
 80072a0:	006b      	lsls	r3, r5, #1
 80072a2:	0061      	lsls	r1, r4, #1
 80072a4:	0fe2      	lsrs	r2, r4, #31
 80072a6:	431a      	orrs	r2, r3
 80072a8:	0849      	lsrs	r1, r1, #1
 80072aa:	9111      	str	r1, [sp, #68]	; 0x44
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	a90a      	add	r1, sp, #40	; 0x28
 80072b0:	f7ff fd8e 	bl	8006dd0 <fe25519_cmov>
 80072b4:	b013      	add	sp, #76	; 0x4c
 80072b6:	bc0c      	pop	{r2, r3}
 80072b8:	4690      	mov	r8, r2
 80072ba:	4699      	mov	r9, r3
 80072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072be:	46c0      	nop			; (mov r8, r8)

080072c0 <fe25519_pack>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	466d      	mov	r5, sp
 80072c6:	002b      	movs	r3, r5
 80072c8:	0004      	movs	r4, r0
 80072ca:	c945      	ldmia	r1!, {r0, r2, r6}
 80072cc:	c345      	stmia	r3!, {r0, r2, r6}
 80072ce:	c945      	ldmia	r1!, {r0, r2, r6}
 80072d0:	c345      	stmia	r3!, {r0, r2, r6}
 80072d2:	c905      	ldmia	r1!, {r0, r2}
 80072d4:	c305      	stmia	r3!, {r0, r2}
 80072d6:	0028      	movs	r0, r5
 80072d8:	f7ff ff46 	bl	8007168 <fe25519_freeze>
 80072dc:	9b00      	ldr	r3, [sp, #0]
 80072de:	0a1a      	lsrs	r2, r3, #8
 80072e0:	7023      	strb	r3, [r4, #0]
 80072e2:	7062      	strb	r2, [r4, #1]
 80072e4:	0c1a      	lsrs	r2, r3, #16
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	70e3      	strb	r3, [r4, #3]
 80072ea:	686b      	ldr	r3, [r5, #4]
 80072ec:	70a2      	strb	r2, [r4, #2]
 80072ee:	0a1a      	lsrs	r2, r3, #8
 80072f0:	7123      	strb	r3, [r4, #4]
 80072f2:	7162      	strb	r2, [r4, #5]
 80072f4:	0c1a      	lsrs	r2, r3, #16
 80072f6:	0e1b      	lsrs	r3, r3, #24
 80072f8:	71e3      	strb	r3, [r4, #7]
 80072fa:	68ab      	ldr	r3, [r5, #8]
 80072fc:	71a2      	strb	r2, [r4, #6]
 80072fe:	0a1a      	lsrs	r2, r3, #8
 8007300:	7223      	strb	r3, [r4, #8]
 8007302:	7262      	strb	r2, [r4, #9]
 8007304:	0c1a      	lsrs	r2, r3, #16
 8007306:	0e1b      	lsrs	r3, r3, #24
 8007308:	72e3      	strb	r3, [r4, #11]
 800730a:	68eb      	ldr	r3, [r5, #12]
 800730c:	72a2      	strb	r2, [r4, #10]
 800730e:	0a1a      	lsrs	r2, r3, #8
 8007310:	7323      	strb	r3, [r4, #12]
 8007312:	7362      	strb	r2, [r4, #13]
 8007314:	0c1a      	lsrs	r2, r3, #16
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	73e3      	strb	r3, [r4, #15]
 800731a:	692b      	ldr	r3, [r5, #16]
 800731c:	73a2      	strb	r2, [r4, #14]
 800731e:	0a1a      	lsrs	r2, r3, #8
 8007320:	7423      	strb	r3, [r4, #16]
 8007322:	7462      	strb	r2, [r4, #17]
 8007324:	0c1a      	lsrs	r2, r3, #16
 8007326:	0e1b      	lsrs	r3, r3, #24
 8007328:	74e3      	strb	r3, [r4, #19]
 800732a:	696b      	ldr	r3, [r5, #20]
 800732c:	74a2      	strb	r2, [r4, #18]
 800732e:	0a1a      	lsrs	r2, r3, #8
 8007330:	7523      	strb	r3, [r4, #20]
 8007332:	7562      	strb	r2, [r4, #21]
 8007334:	0c1a      	lsrs	r2, r3, #16
 8007336:	0e1b      	lsrs	r3, r3, #24
 8007338:	75e3      	strb	r3, [r4, #23]
 800733a:	69ab      	ldr	r3, [r5, #24]
 800733c:	75a2      	strb	r2, [r4, #22]
 800733e:	0a1a      	lsrs	r2, r3, #8
 8007340:	7623      	strb	r3, [r4, #24]
 8007342:	7662      	strb	r2, [r4, #25]
 8007344:	0c1a      	lsrs	r2, r3, #16
 8007346:	0e1b      	lsrs	r3, r3, #24
 8007348:	76e3      	strb	r3, [r4, #27]
 800734a:	69eb      	ldr	r3, [r5, #28]
 800734c:	76a2      	strb	r2, [r4, #26]
 800734e:	0a1a      	lsrs	r2, r3, #8
 8007350:	7723      	strb	r3, [r4, #28]
 8007352:	7762      	strb	r2, [r4, #29]
 8007354:	0c1a      	lsrs	r2, r3, #16
 8007356:	0e1b      	lsrs	r3, r3, #24
 8007358:	77a2      	strb	r2, [r4, #30]
 800735a:	77e3      	strb	r3, [r4, #31]
 800735c:	b008      	add	sp, #32
 800735e:	bd70      	pop	{r4, r5, r6, pc}

08007360 <fe25519_mul>:
 8007360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007362:	46de      	mov	lr, fp
 8007364:	4657      	mov	r7, sl
 8007366:	464e      	mov	r6, r9
 8007368:	4645      	mov	r5, r8
 800736a:	b5e0      	push	{r5, r6, r7, lr}
 800736c:	0015      	movs	r5, r2
 800736e:	b0bd      	sub	sp, #244	; 0xf4
 8007370:	4680      	mov	r8, r0
 8007372:	000e      	movs	r6, r1
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	2100      	movs	r1, #0
 8007378:	a82c      	add	r0, sp, #176	; 0xb0
 800737a:	f001 f878 	bl	800846e <memset>
 800737e:	682b      	ldr	r3, [r5, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	9323      	str	r3, [sp, #140]	; 0x8c
 8007384:	686b      	ldr	r3, [r5, #4]
 8007386:	2700      	movs	r7, #0
 8007388:	9324      	str	r3, [sp, #144]	; 0x90
 800738a:	68ab      	ldr	r3, [r5, #8]
 800738c:	9220      	str	r2, [sp, #128]	; 0x80
 800738e:	9325      	str	r3, [sp, #148]	; 0x94
 8007390:	68eb      	ldr	r3, [r5, #12]
 8007392:	4642      	mov	r2, r8
 8007394:	9326      	str	r3, [sp, #152]	; 0x98
 8007396:	692b      	ldr	r3, [r5, #16]
 8007398:	46b0      	mov	r8, r6
 800739a:	9327      	str	r3, [sp, #156]	; 0x9c
 800739c:	696b      	ldr	r3, [r5, #20]
 800739e:	ac2c      	add	r4, sp, #176	; 0xb0
 80073a0:	9328      	str	r3, [sp, #160]	; 0xa0
 80073a2:	69ab      	ldr	r3, [r5, #24]
 80073a4:	9721      	str	r7, [sp, #132]	; 0x84
 80073a6:	9329      	str	r3, [sp, #164]	; 0xa4
 80073a8:	69eb      	ldr	r3, [r5, #28]
 80073aa:	922b      	str	r2, [sp, #172]	; 0xac
 80073ac:	932a      	str	r3, [sp, #168]	; 0xa8
 80073ae:	2300      	movs	r3, #0
 80073b0:	469a      	mov	sl, r3
 80073b2:	469b      	mov	fp, r3
 80073b4:	4699      	mov	r9, r3
 80073b6:	931f      	str	r3, [sp, #124]	; 0x7c
 80073b8:	931e      	str	r3, [sp, #120]	; 0x78
 80073ba:	9322      	str	r3, [sp, #136]	; 0x88
 80073bc:	4643      	mov	r3, r8
 80073be:	cb20      	ldmia	r3!, {r5}
 80073c0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80073c2:	4698      	mov	r8, r3
 80073c4:	0028      	movs	r0, r5
 80073c6:	2300      	movs	r3, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	f7f8 ff29 	bl	8000220 <__aeabi_lmul>
 80073ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80073d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073d2:	930e      	str	r3, [sp, #56]	; 0x38
 80073d4:	2300      	movs	r3, #0
 80073d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073d8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80073da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80073dc:	1980      	adds	r0, r0, r6
 80073de:	4179      	adcs	r1, r7
 80073e0:	6020      	str	r0, [r4, #0]
 80073e2:	9100      	str	r1, [sp, #0]
 80073e4:	0028      	movs	r0, r5
 80073e6:	2100      	movs	r1, #0
 80073e8:	001e      	movs	r6, r3
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	f7f8 ff18 	bl	8000220 <__aeabi_lmul>
 80073f0:	464a      	mov	r2, r9
 80073f2:	9611      	str	r6, [sp, #68]	; 0x44
 80073f4:	9210      	str	r2, [sp, #64]	; 0x40
 80073f6:	0033      	movs	r3, r6
 80073f8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80073fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80073fc:	1980      	adds	r0, r0, r6
 80073fe:	4179      	adcs	r1, r7
 8007400:	9e00      	ldr	r6, [sp, #0]
 8007402:	9f01      	ldr	r7, [sp, #4]
 8007404:	1980      	adds	r0, r0, r6
 8007406:	4179      	adcs	r1, r7
 8007408:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800740a:	001e      	movs	r6, r3
 800740c:	6060      	str	r0, [r4, #4]
 800740e:	9020      	str	r0, [sp, #128]	; 0x80
 8007410:	9102      	str	r1, [sp, #8]
 8007412:	0028      	movs	r0, r5
 8007414:	2100      	movs	r1, #0
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	f7f8 ff02 	bl	8000220 <__aeabi_lmul>
 800741c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741e:	9613      	str	r6, [sp, #76]	; 0x4c
 8007420:	9312      	str	r3, [sp, #72]	; 0x48
 8007422:	0033      	movs	r3, r6
 8007424:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007426:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007428:	1980      	adds	r0, r0, r6
 800742a:	4179      	adcs	r1, r7
 800742c:	9e02      	ldr	r6, [sp, #8]
 800742e:	9f03      	ldr	r7, [sp, #12]
 8007430:	1980      	adds	r0, r0, r6
 8007432:	4179      	adcs	r1, r7
 8007434:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007436:	001f      	movs	r7, r3
 8007438:	60a0      	str	r0, [r4, #8]
 800743a:	9104      	str	r1, [sp, #16]
 800743c:	4681      	mov	r9, r0
 800743e:	2100      	movs	r1, #0
 8007440:	0028      	movs	r0, r5
 8007442:	9305      	str	r3, [sp, #20]
 8007444:	f7f8 feec 	bl	8000220 <__aeabi_lmul>
 8007448:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800744a:	9715      	str	r7, [sp, #84]	; 0x54
 800744c:	9314      	str	r3, [sp, #80]	; 0x50
 800744e:	003b      	movs	r3, r7
 8007450:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007452:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8007454:	1980      	adds	r0, r0, r6
 8007456:	4179      	adcs	r1, r7
 8007458:	9e04      	ldr	r6, [sp, #16]
 800745a:	9f05      	ldr	r7, [sp, #20]
 800745c:	1980      	adds	r0, r0, r6
 800745e:	4179      	adcs	r1, r7
 8007460:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007462:	60e0      	str	r0, [r4, #12]
 8007464:	9021      	str	r0, [sp, #132]	; 0x84
 8007466:	9106      	str	r1, [sp, #24]
 8007468:	0028      	movs	r0, r5
 800746a:	2100      	movs	r1, #0
 800746c:	001e      	movs	r6, r3
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	f7f8 fed6 	bl	8000220 <__aeabi_lmul>
 8007474:	465b      	mov	r3, fp
 8007476:	9617      	str	r6, [sp, #92]	; 0x5c
 8007478:	9316      	str	r3, [sp, #88]	; 0x58
 800747a:	0033      	movs	r3, r6
 800747c:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800747e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007480:	1980      	adds	r0, r0, r6
 8007482:	4179      	adcs	r1, r7
 8007484:	9e06      	ldr	r6, [sp, #24]
 8007486:	9f07      	ldr	r7, [sp, #28]
 8007488:	1980      	adds	r0, r0, r6
 800748a:	4179      	adcs	r1, r7
 800748c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800748e:	6120      	str	r0, [r4, #16]
 8007490:	9022      	str	r0, [sp, #136]	; 0x88
 8007492:	9108      	str	r1, [sp, #32]
 8007494:	0028      	movs	r0, r5
 8007496:	2100      	movs	r1, #0
 8007498:	001e      	movs	r6, r3
 800749a:	9309      	str	r3, [sp, #36]	; 0x24
 800749c:	f7f8 fec0 	bl	8000220 <__aeabi_lmul>
 80074a0:	4652      	mov	r2, sl
 80074a2:	9619      	str	r6, [sp, #100]	; 0x64
 80074a4:	9218      	str	r2, [sp, #96]	; 0x60
 80074a6:	0033      	movs	r3, r6
 80074a8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80074aa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80074ac:	1980      	adds	r0, r0, r6
 80074ae:	4179      	adcs	r1, r7
 80074b0:	9e08      	ldr	r6, [sp, #32]
 80074b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80074b4:	1980      	adds	r0, r0, r6
 80074b6:	4179      	adcs	r1, r7
 80074b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ba:	001e      	movs	r6, r3
 80074bc:	6160      	str	r0, [r4, #20]
 80074be:	910a      	str	r1, [sp, #40]	; 0x28
 80074c0:	4683      	mov	fp, r0
 80074c2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80074c4:	0028      	movs	r0, r5
 80074c6:	2100      	movs	r1, #0
 80074c8:	f7f8 feaa 	bl	8000220 <__aeabi_lmul>
 80074cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074ce:	961b      	str	r6, [sp, #108]	; 0x6c
 80074d0:	921a      	str	r2, [sp, #104]	; 0x68
 80074d2:	0033      	movs	r3, r6
 80074d4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80074d6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80074d8:	1980      	adds	r0, r0, r6
 80074da:	4179      	adcs	r1, r7
 80074dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80074e0:	1980      	adds	r0, r0, r6
 80074e2:	4179      	adcs	r1, r7
 80074e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80074e6:	61a0      	str	r0, [r4, #24]
 80074e8:	001e      	movs	r6, r3
 80074ea:	910c      	str	r1, [sp, #48]	; 0x30
 80074ec:	4682      	mov	sl, r0
 80074ee:	2100      	movs	r1, #0
 80074f0:	0028      	movs	r0, r5
 80074f2:	930d      	str	r3, [sp, #52]	; 0x34
 80074f4:	f7f8 fe94 	bl	8000220 <__aeabi_lmul>
 80074f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80074fa:	961d      	str	r6, [sp, #116]	; 0x74
 80074fc:	921c      	str	r2, [sp, #112]	; 0x70
 80074fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007500:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007502:	1880      	adds	r0, r0, r2
 8007504:	4159      	adcs	r1, r3
 8007506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750a:	1880      	adds	r0, r0, r2
 800750c:	4159      	adcs	r1, r3
 800750e:	3404      	adds	r4, #4
 8007510:	61a0      	str	r0, [r4, #24]
 8007512:	61e1      	str	r1, [r4, #28]
 8007514:	ab34      	add	r3, sp, #208	; 0xd0
 8007516:	901e      	str	r0, [sp, #120]	; 0x78
 8007518:	911f      	str	r1, [sp, #124]	; 0x7c
 800751a:	429c      	cmp	r4, r3
 800751c:	d000      	beq.n	8007520 <fe25519_mul+0x1c0>
 800751e:	e74d      	b.n	80073bc <fe25519_mul+0x5c>
 8007520:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007522:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8007524:	4698      	mov	r8, r3
 8007526:	2226      	movs	r2, #38	; 0x26
 8007528:	2300      	movs	r3, #0
 800752a:	2100      	movs	r1, #0
 800752c:	f7f8 fe78 	bl	8000220 <__aeabi_lmul>
 8007530:	2300      	movs	r3, #0
 8007532:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007534:	2500      	movs	r5, #0
 8007536:	1880      	adds	r0, r0, r2
 8007538:	4159      	adcs	r1, r3
 800753a:	2226      	movs	r2, #38	; 0x26
 800753c:	9000      	str	r0, [sp, #0]
 800753e:	9101      	str	r1, [sp, #4]
 8007540:	000c      	movs	r4, r1
 8007542:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8007544:	2300      	movs	r3, #0
 8007546:	2100      	movs	r1, #0
 8007548:	f7f8 fe6a 	bl	8000220 <__aeabi_lmul>
 800754c:	2300      	movs	r3, #0
 800754e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007550:	1880      	adds	r0, r0, r2
 8007552:	4159      	adcs	r1, r3
 8007554:	0002      	movs	r2, r0
 8007556:	000b      	movs	r3, r1
 8007558:	1912      	adds	r2, r2, r4
 800755a:	416b      	adcs	r3, r5
 800755c:	9836      	ldr	r0, [sp, #216]	; 0xd8
 800755e:	9202      	str	r2, [sp, #8]
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	001c      	movs	r4, r3
 8007564:	2226      	movs	r2, #38	; 0x26
 8007566:	2300      	movs	r3, #0
 8007568:	2100      	movs	r1, #0
 800756a:	f7f8 fe59 	bl	8000220 <__aeabi_lmul>
 800756e:	2300      	movs	r3, #0
 8007570:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007572:	2500      	movs	r5, #0
 8007574:	1880      	adds	r0, r0, r2
 8007576:	4159      	adcs	r1, r3
 8007578:	000a      	movs	r2, r1
 800757a:	0001      	movs	r1, r0
 800757c:	1909      	adds	r1, r1, r4
 800757e:	416a      	adcs	r2, r5
 8007580:	9837      	ldr	r0, [sp, #220]	; 0xdc
 8007582:	9104      	str	r1, [sp, #16]
 8007584:	9205      	str	r2, [sp, #20]
 8007586:	0014      	movs	r4, r2
 8007588:	2300      	movs	r3, #0
 800758a:	2226      	movs	r2, #38	; 0x26
 800758c:	2100      	movs	r1, #0
 800758e:	f7f8 fe47 	bl	8000220 <__aeabi_lmul>
 8007592:	2300      	movs	r3, #0
 8007594:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007596:	2500      	movs	r5, #0
 8007598:	1880      	adds	r0, r0, r2
 800759a:	4159      	adcs	r1, r3
 800759c:	0006      	movs	r6, r0
 800759e:	000f      	movs	r7, r1
 80075a0:	1936      	adds	r6, r6, r4
 80075a2:	416f      	adcs	r7, r5
 80075a4:	9838      	ldr	r0, [sp, #224]	; 0xe0
 80075a6:	2226      	movs	r2, #38	; 0x26
 80075a8:	2300      	movs	r3, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	9606      	str	r6, [sp, #24]
 80075ae:	9707      	str	r7, [sp, #28]
 80075b0:	f7f8 fe36 	bl	8000220 <__aeabi_lmul>
 80075b4:	2300      	movs	r3, #0
 80075b6:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80075b8:	003c      	movs	r4, r7
 80075ba:	1880      	adds	r0, r0, r2
 80075bc:	4159      	adcs	r1, r3
 80075be:	2500      	movs	r5, #0
 80075c0:	1900      	adds	r0, r0, r4
 80075c2:	4169      	adcs	r1, r5
 80075c4:	2226      	movs	r2, #38	; 0x26
 80075c6:	9008      	str	r0, [sp, #32]
 80075c8:	9109      	str	r1, [sp, #36]	; 0x24
 80075ca:	000c      	movs	r4, r1
 80075cc:	9839      	ldr	r0, [sp, #228]	; 0xe4
 80075ce:	2300      	movs	r3, #0
 80075d0:	2100      	movs	r1, #0
 80075d2:	f7f8 fe25 	bl	8000220 <__aeabi_lmul>
 80075d6:	2300      	movs	r3, #0
 80075d8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80075da:	2500      	movs	r5, #0
 80075dc:	1880      	adds	r0, r0, r2
 80075de:	4159      	adcs	r1, r3
 80075e0:	0002      	movs	r2, r0
 80075e2:	000b      	movs	r3, r1
 80075e4:	1912      	adds	r2, r2, r4
 80075e6:	416b      	adcs	r3, r5
 80075e8:	983a      	ldr	r0, [sp, #232]	; 0xe8
 80075ea:	920a      	str	r2, [sp, #40]	; 0x28
 80075ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ee:	001c      	movs	r4, r3
 80075f0:	2226      	movs	r2, #38	; 0x26
 80075f2:	2300      	movs	r3, #0
 80075f4:	2100      	movs	r1, #0
 80075f6:	f7f8 fe13 	bl	8000220 <__aeabi_lmul>
 80075fa:	2300      	movs	r3, #0
 80075fc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80075fe:	2500      	movs	r5, #0
 8007600:	1880      	adds	r0, r0, r2
 8007602:	4159      	adcs	r1, r3
 8007604:	000a      	movs	r2, r1
 8007606:	0001      	movs	r1, r0
 8007608:	1909      	adds	r1, r1, r4
 800760a:	416a      	adcs	r2, r5
 800760c:	983b      	ldr	r0, [sp, #236]	; 0xec
 800760e:	910c      	str	r1, [sp, #48]	; 0x30
 8007610:	920d      	str	r2, [sp, #52]	; 0x34
 8007612:	0014      	movs	r4, r2
 8007614:	2300      	movs	r3, #0
 8007616:	2226      	movs	r2, #38	; 0x26
 8007618:	2100      	movs	r1, #0
 800761a:	f7f8 fe01 	bl	8000220 <__aeabi_lmul>
 800761e:	2700      	movs	r7, #0
 8007620:	9e33      	ldr	r6, [sp, #204]	; 0xcc
 8007622:	2500      	movs	r5, #0
 8007624:	1836      	adds	r6, r6, r0
 8007626:	414f      	adcs	r7, r1
 8007628:	1936      	adds	r6, r6, r4
 800762a:	416f      	adcs	r7, r5
 800762c:	2226      	movs	r2, #38	; 0x26
 800762e:	2300      	movs	r3, #0
 8007630:	0038      	movs	r0, r7
 8007632:	2100      	movs	r1, #0
 8007634:	f7f8 fdf4 	bl	8000220 <__aeabi_lmul>
 8007638:	2300      	movs	r3, #0
 800763a:	9a00      	ldr	r2, [sp, #0]
 800763c:	2500      	movs	r5, #0
 800763e:	1880      	adds	r0, r0, r2
 8007640:	4159      	adcs	r1, r3
 8007642:	2300      	movs	r3, #0
 8007644:	000c      	movs	r4, r1
 8007646:	9a02      	ldr	r2, [sp, #8]
 8007648:	1912      	adds	r2, r2, r4
 800764a:	416b      	adcs	r3, r5
 800764c:	4644      	mov	r4, r8
 800764e:	2500      	movs	r5, #0
 8007650:	6062      	str	r2, [r4, #4]
 8007652:	001c      	movs	r4, r3
 8007654:	2300      	movs	r3, #0
 8007656:	9a04      	ldr	r2, [sp, #16]
 8007658:	1912      	adds	r2, r2, r4
 800765a:	416b      	adcs	r3, r5
 800765c:	4644      	mov	r4, r8
 800765e:	2500      	movs	r5, #0
 8007660:	60a2      	str	r2, [r4, #8]
 8007662:	001c      	movs	r4, r3
 8007664:	2300      	movs	r3, #0
 8007666:	9a06      	ldr	r2, [sp, #24]
 8007668:	1912      	adds	r2, r2, r4
 800766a:	416b      	adcs	r3, r5
 800766c:	4644      	mov	r4, r8
 800766e:	2500      	movs	r5, #0
 8007670:	60e2      	str	r2, [r4, #12]
 8007672:	001c      	movs	r4, r3
 8007674:	2300      	movs	r3, #0
 8007676:	9a08      	ldr	r2, [sp, #32]
 8007678:	1912      	adds	r2, r2, r4
 800767a:	416b      	adcs	r3, r5
 800767c:	4644      	mov	r4, r8
 800767e:	2500      	movs	r5, #0
 8007680:	6122      	str	r2, [r4, #16]
 8007682:	001c      	movs	r4, r3
 8007684:	2300      	movs	r3, #0
 8007686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007688:	1912      	adds	r2, r2, r4
 800768a:	416b      	adcs	r3, r5
 800768c:	4644      	mov	r4, r8
 800768e:	2500      	movs	r5, #0
 8007690:	6162      	str	r2, [r4, #20]
 8007692:	001c      	movs	r4, r3
 8007694:	2300      	movs	r3, #0
 8007696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007698:	1912      	adds	r2, r2, r4
 800769a:	416b      	adcs	r3, r5
 800769c:	4644      	mov	r4, r8
 800769e:	2500      	movs	r5, #0
 80076a0:	61a2      	str	r2, [r4, #24]
 80076a2:	0032      	movs	r2, r6
 80076a4:	001c      	movs	r4, r3
 80076a6:	2300      	movs	r3, #0
 80076a8:	18a4      	adds	r4, r4, r2
 80076aa:	415d      	adcs	r5, r3
 80076ac:	2226      	movs	r2, #38	; 0x26
 80076ae:	4643      	mov	r3, r8
 80076b0:	436a      	muls	r2, r5
 80076b2:	1810      	adds	r0, r2, r0
 80076b4:	61dc      	str	r4, [r3, #28]
 80076b6:	6018      	str	r0, [r3, #0]
 80076b8:	b03d      	add	sp, #244	; 0xf4
 80076ba:	bc3c      	pop	{r2, r3, r4, r5}
 80076bc:	4690      	mov	r8, r2
 80076be:	4699      	mov	r9, r3
 80076c0:	46a2      	mov	sl, r4
 80076c2:	46ab      	mov	fp, r5
 80076c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)

080076c8 <fe25519_square>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	000a      	movs	r2, r1
 80076cc:	f7ff fe48 	bl	8007360 <fe25519_mul>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	46c0      	nop			; (mov r8, r8)

080076d4 <fe25519_invert>:
 80076d4:	b530      	push	{r4, r5, lr}
 80076d6:	000c      	movs	r4, r1
 80076d8:	b0d1      	sub	sp, #324	; 0x144
 80076da:	0005      	movs	r5, r0
 80076dc:	4668      	mov	r0, sp
 80076de:	f7ff fff3 	bl	80076c8 <fe25519_square>
 80076e2:	4669      	mov	r1, sp
 80076e4:	a848      	add	r0, sp, #288	; 0x120
 80076e6:	f7ff ffef 	bl	80076c8 <fe25519_square>
 80076ea:	a948      	add	r1, sp, #288	; 0x120
 80076ec:	a840      	add	r0, sp, #256	; 0x100
 80076ee:	f7ff ffeb 	bl	80076c8 <fe25519_square>
 80076f2:	0022      	movs	r2, r4
 80076f4:	a940      	add	r1, sp, #256	; 0x100
 80076f6:	a808      	add	r0, sp, #32
 80076f8:	f7ff fe32 	bl	8007360 <fe25519_mul>
 80076fc:	466a      	mov	r2, sp
 80076fe:	a908      	add	r1, sp, #32
 8007700:	a810      	add	r0, sp, #64	; 0x40
 8007702:	f7ff fe2d 	bl	8007360 <fe25519_mul>
 8007706:	a910      	add	r1, sp, #64	; 0x40
 8007708:	a840      	add	r0, sp, #256	; 0x100
 800770a:	f7ff ffdd 	bl	80076c8 <fe25519_square>
 800770e:	aa08      	add	r2, sp, #32
 8007710:	a940      	add	r1, sp, #256	; 0x100
 8007712:	a818      	add	r0, sp, #96	; 0x60
 8007714:	f7ff fe24 	bl	8007360 <fe25519_mul>
 8007718:	a918      	add	r1, sp, #96	; 0x60
 800771a:	a840      	add	r0, sp, #256	; 0x100
 800771c:	f7ff ffd4 	bl	80076c8 <fe25519_square>
 8007720:	a940      	add	r1, sp, #256	; 0x100
 8007722:	a848      	add	r0, sp, #288	; 0x120
 8007724:	f7ff ffd0 	bl	80076c8 <fe25519_square>
 8007728:	a948      	add	r1, sp, #288	; 0x120
 800772a:	a840      	add	r0, sp, #256	; 0x100
 800772c:	f7ff ffcc 	bl	80076c8 <fe25519_square>
 8007730:	a940      	add	r1, sp, #256	; 0x100
 8007732:	a848      	add	r0, sp, #288	; 0x120
 8007734:	f7ff ffc8 	bl	80076c8 <fe25519_square>
 8007738:	a948      	add	r1, sp, #288	; 0x120
 800773a:	a840      	add	r0, sp, #256	; 0x100
 800773c:	f7ff ffc4 	bl	80076c8 <fe25519_square>
 8007740:	aa18      	add	r2, sp, #96	; 0x60
 8007742:	a940      	add	r1, sp, #256	; 0x100
 8007744:	a820      	add	r0, sp, #128	; 0x80
 8007746:	f7ff fe0b 	bl	8007360 <fe25519_mul>
 800774a:	a920      	add	r1, sp, #128	; 0x80
 800774c:	a840      	add	r0, sp, #256	; 0x100
 800774e:	f7ff ffbb 	bl	80076c8 <fe25519_square>
 8007752:	a940      	add	r1, sp, #256	; 0x100
 8007754:	a848      	add	r0, sp, #288	; 0x120
 8007756:	f7ff ffb7 	bl	80076c8 <fe25519_square>
 800775a:	2404      	movs	r4, #4
 800775c:	a948      	add	r1, sp, #288	; 0x120
 800775e:	a840      	add	r0, sp, #256	; 0x100
 8007760:	f7ff ffb2 	bl	80076c8 <fe25519_square>
 8007764:	3c01      	subs	r4, #1
 8007766:	a940      	add	r1, sp, #256	; 0x100
 8007768:	a848      	add	r0, sp, #288	; 0x120
 800776a:	f7ff ffad 	bl	80076c8 <fe25519_square>
 800776e:	2c00      	cmp	r4, #0
 8007770:	d1f4      	bne.n	800775c <fe25519_invert+0x88>
 8007772:	aa20      	add	r2, sp, #128	; 0x80
 8007774:	a948      	add	r1, sp, #288	; 0x120
 8007776:	a828      	add	r0, sp, #160	; 0xa0
 8007778:	f7ff fdf2 	bl	8007360 <fe25519_mul>
 800777c:	a928      	add	r1, sp, #160	; 0xa0
 800777e:	a840      	add	r0, sp, #256	; 0x100
 8007780:	f7ff ffa2 	bl	80076c8 <fe25519_square>
 8007784:	a940      	add	r1, sp, #256	; 0x100
 8007786:	a848      	add	r0, sp, #288	; 0x120
 8007788:	f7ff ff9e 	bl	80076c8 <fe25519_square>
 800778c:	3409      	adds	r4, #9
 800778e:	a948      	add	r1, sp, #288	; 0x120
 8007790:	a840      	add	r0, sp, #256	; 0x100
 8007792:	f7ff ff99 	bl	80076c8 <fe25519_square>
 8007796:	3c01      	subs	r4, #1
 8007798:	a940      	add	r1, sp, #256	; 0x100
 800779a:	a848      	add	r0, sp, #288	; 0x120
 800779c:	f7ff ff94 	bl	80076c8 <fe25519_square>
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d1f4      	bne.n	800778e <fe25519_invert+0xba>
 80077a4:	aa28      	add	r2, sp, #160	; 0xa0
 80077a6:	a948      	add	r1, sp, #288	; 0x120
 80077a8:	a840      	add	r0, sp, #256	; 0x100
 80077aa:	f7ff fdd9 	bl	8007360 <fe25519_mul>
 80077ae:	a940      	add	r1, sp, #256	; 0x100
 80077b0:	a848      	add	r0, sp, #288	; 0x120
 80077b2:	f7ff ff89 	bl	80076c8 <fe25519_square>
 80077b6:	a948      	add	r1, sp, #288	; 0x120
 80077b8:	a840      	add	r0, sp, #256	; 0x100
 80077ba:	f7ff ff85 	bl	80076c8 <fe25519_square>
 80077be:	3404      	adds	r4, #4
 80077c0:	a940      	add	r1, sp, #256	; 0x100
 80077c2:	a848      	add	r0, sp, #288	; 0x120
 80077c4:	f7ff ff80 	bl	80076c8 <fe25519_square>
 80077c8:	3c01      	subs	r4, #1
 80077ca:	a948      	add	r1, sp, #288	; 0x120
 80077cc:	a840      	add	r0, sp, #256	; 0x100
 80077ce:	f7ff ff7b 	bl	80076c8 <fe25519_square>
 80077d2:	2c00      	cmp	r4, #0
 80077d4:	d1f4      	bne.n	80077c0 <fe25519_invert+0xec>
 80077d6:	aa20      	add	r2, sp, #128	; 0x80
 80077d8:	a940      	add	r1, sp, #256	; 0x100
 80077da:	a830      	add	r0, sp, #192	; 0xc0
 80077dc:	f7ff fdc0 	bl	8007360 <fe25519_mul>
 80077e0:	a930      	add	r1, sp, #192	; 0xc0
 80077e2:	a840      	add	r0, sp, #256	; 0x100
 80077e4:	f7ff ff70 	bl	80076c8 <fe25519_square>
 80077e8:	a940      	add	r1, sp, #256	; 0x100
 80077ea:	a848      	add	r0, sp, #288	; 0x120
 80077ec:	f7ff ff6c 	bl	80076c8 <fe25519_square>
 80077f0:	3418      	adds	r4, #24
 80077f2:	a948      	add	r1, sp, #288	; 0x120
 80077f4:	a840      	add	r0, sp, #256	; 0x100
 80077f6:	f7ff ff67 	bl	80076c8 <fe25519_square>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	a940      	add	r1, sp, #256	; 0x100
 80077fe:	a848      	add	r0, sp, #288	; 0x120
 8007800:	f7ff ff62 	bl	80076c8 <fe25519_square>
 8007804:	2c00      	cmp	r4, #0
 8007806:	d1f4      	bne.n	80077f2 <fe25519_invert+0x11e>
 8007808:	aa30      	add	r2, sp, #192	; 0xc0
 800780a:	a948      	add	r1, sp, #288	; 0x120
 800780c:	a838      	add	r0, sp, #224	; 0xe0
 800780e:	f7ff fda7 	bl	8007360 <fe25519_mul>
 8007812:	a938      	add	r1, sp, #224	; 0xe0
 8007814:	a848      	add	r0, sp, #288	; 0x120
 8007816:	f7ff ff57 	bl	80076c8 <fe25519_square>
 800781a:	a948      	add	r1, sp, #288	; 0x120
 800781c:	a840      	add	r0, sp, #256	; 0x100
 800781e:	f7ff ff53 	bl	80076c8 <fe25519_square>
 8007822:	3431      	adds	r4, #49	; 0x31
 8007824:	a940      	add	r1, sp, #256	; 0x100
 8007826:	a848      	add	r0, sp, #288	; 0x120
 8007828:	f7ff ff4e 	bl	80076c8 <fe25519_square>
 800782c:	3c01      	subs	r4, #1
 800782e:	a948      	add	r1, sp, #288	; 0x120
 8007830:	a840      	add	r0, sp, #256	; 0x100
 8007832:	f7ff ff49 	bl	80076c8 <fe25519_square>
 8007836:	2c00      	cmp	r4, #0
 8007838:	d1f4      	bne.n	8007824 <fe25519_invert+0x150>
 800783a:	aa38      	add	r2, sp, #224	; 0xe0
 800783c:	a940      	add	r1, sp, #256	; 0x100
 800783e:	a848      	add	r0, sp, #288	; 0x120
 8007840:	f7ff fd8e 	bl	8007360 <fe25519_mul>
 8007844:	a948      	add	r1, sp, #288	; 0x120
 8007846:	a840      	add	r0, sp, #256	; 0x100
 8007848:	f7ff ff3e 	bl	80076c8 <fe25519_square>
 800784c:	a940      	add	r1, sp, #256	; 0x100
 800784e:	a848      	add	r0, sp, #288	; 0x120
 8007850:	f7ff ff3a 	bl	80076c8 <fe25519_square>
 8007854:	3418      	adds	r4, #24
 8007856:	a948      	add	r1, sp, #288	; 0x120
 8007858:	a840      	add	r0, sp, #256	; 0x100
 800785a:	f7ff ff35 	bl	80076c8 <fe25519_square>
 800785e:	3c01      	subs	r4, #1
 8007860:	a940      	add	r1, sp, #256	; 0x100
 8007862:	a848      	add	r0, sp, #288	; 0x120
 8007864:	f7ff ff30 	bl	80076c8 <fe25519_square>
 8007868:	2c00      	cmp	r4, #0
 800786a:	d1f4      	bne.n	8007856 <fe25519_invert+0x182>
 800786c:	aa30      	add	r2, sp, #192	; 0xc0
 800786e:	a948      	add	r1, sp, #288	; 0x120
 8007870:	a840      	add	r0, sp, #256	; 0x100
 8007872:	f7ff fd75 	bl	8007360 <fe25519_mul>
 8007876:	a940      	add	r1, sp, #256	; 0x100
 8007878:	a848      	add	r0, sp, #288	; 0x120
 800787a:	f7ff ff25 	bl	80076c8 <fe25519_square>
 800787e:	a948      	add	r1, sp, #288	; 0x120
 8007880:	a840      	add	r0, sp, #256	; 0x100
 8007882:	f7ff ff21 	bl	80076c8 <fe25519_square>
 8007886:	a940      	add	r1, sp, #256	; 0x100
 8007888:	a848      	add	r0, sp, #288	; 0x120
 800788a:	f7ff ff1d 	bl	80076c8 <fe25519_square>
 800788e:	a948      	add	r1, sp, #288	; 0x120
 8007890:	a840      	add	r0, sp, #256	; 0x100
 8007892:	f7ff ff19 	bl	80076c8 <fe25519_square>
 8007896:	a940      	add	r1, sp, #256	; 0x100
 8007898:	a848      	add	r0, sp, #288	; 0x120
 800789a:	f7ff ff15 	bl	80076c8 <fe25519_square>
 800789e:	aa10      	add	r2, sp, #64	; 0x40
 80078a0:	a948      	add	r1, sp, #288	; 0x120
 80078a2:	0028      	movs	r0, r5
 80078a4:	f7ff fd5c 	bl	8007360 <fe25519_mul>
 80078a8:	b051      	add	sp, #324	; 0x144
 80078aa:	bd30      	pop	{r4, r5, pc}

080078ac <fe25519_mult121665>:
 80078ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ae:	468c      	mov	ip, r1
 80078b0:	4647      	mov	r7, r8
 80078b2:	4680      	mov	r8, r0
 80078b4:	6808      	ldr	r0, [r1, #0]
 80078b6:	2100      	movs	r1, #0
 80078b8:	0e45      	lsrs	r5, r0, #25
 80078ba:	01c4      	lsls	r4, r0, #7
 80078bc:	1a24      	subs	r4, r4, r0
 80078be:	418d      	sbcs	r5, r1
 80078c0:	0fa6      	lsrs	r6, r4, #30
 80078c2:	00ab      	lsls	r3, r5, #2
 80078c4:	4333      	orrs	r3, r6
 80078c6:	00a2      	lsls	r2, r4, #2
 80078c8:	1a12      	subs	r2, r2, r0
 80078ca:	418b      	sbcs	r3, r1
 80078cc:	0014      	movs	r4, r2
 80078ce:	0f16      	lsrs	r6, r2, #28
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	4333      	orrs	r3, r6
 80078d4:	0122      	lsls	r2, r4, #4
 80078d6:	1a12      	subs	r2, r2, r0
 80078d8:	418b      	sbcs	r3, r1
 80078da:	0f14      	lsrs	r4, r2, #28
 80078dc:	0119      	lsls	r1, r3, #4
 80078de:	4321      	orrs	r1, r4
 80078e0:	0110      	lsls	r0, r2, #4
 80078e2:	46ce      	mov	lr, r9
 80078e4:	1a80      	subs	r0, r0, r2
 80078e6:	4199      	sbcs	r1, r3
 80078e8:	4642      	mov	r2, r8
 80078ea:	b580      	push	{r7, lr}
 80078ec:	6010      	str	r0, [r2, #0]
 80078ee:	4662      	mov	r2, ip
 80078f0:	000c      	movs	r4, r1
 80078f2:	0003      	movs	r3, r0
 80078f4:	2100      	movs	r1, #0
 80078f6:	6850      	ldr	r0, [r2, #4]
 80078f8:	b091      	sub	sp, #68	; 0x44
 80078fa:	9400      	str	r4, [sp, #0]
 80078fc:	930e      	str	r3, [sp, #56]	; 0x38
 80078fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8007900:	0e45      	lsrs	r5, r0, #25
 8007902:	01c4      	lsls	r4, r0, #7
 8007904:	1a24      	subs	r4, r4, r0
 8007906:	418d      	sbcs	r5, r1
 8007908:	0fa2      	lsrs	r2, r4, #30
 800790a:	00ab      	lsls	r3, r5, #2
 800790c:	4313      	orrs	r3, r2
 800790e:	00a2      	lsls	r2, r4, #2
 8007910:	1a12      	subs	r2, r2, r0
 8007912:	418b      	sbcs	r3, r1
 8007914:	0014      	movs	r4, r2
 8007916:	011b      	lsls	r3, r3, #4
 8007918:	0f12      	lsrs	r2, r2, #28
 800791a:	4313      	orrs	r3, r2
 800791c:	0122      	lsls	r2, r4, #4
 800791e:	1a12      	subs	r2, r2, r0
 8007920:	418b      	sbcs	r3, r1
 8007922:	0f14      	lsrs	r4, r2, #28
 8007924:	0119      	lsls	r1, r3, #4
 8007926:	2700      	movs	r7, #0
 8007928:	4321      	orrs	r1, r4
 800792a:	0110      	lsls	r0, r2, #4
 800792c:	1a80      	subs	r0, r0, r2
 800792e:	4199      	sbcs	r1, r3
 8007930:	9701      	str	r7, [sp, #4]
 8007932:	9b00      	ldr	r3, [sp, #0]
 8007934:	9c01      	ldr	r4, [sp, #4]
 8007936:	18c0      	adds	r0, r0, r3
 8007938:	4161      	adcs	r1, r4
 800793a:	0002      	movs	r2, r0
 800793c:	000b      	movs	r3, r1
 800793e:	4641      	mov	r1, r8
 8007940:	4664      	mov	r4, ip
 8007942:	604a      	str	r2, [r1, #4]
 8007944:	2100      	movs	r1, #0
 8007946:	68a0      	ldr	r0, [r4, #8]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	0e45      	lsrs	r5, r0, #25
 800794c:	01c4      	lsls	r4, r0, #7
 800794e:	1a24      	subs	r4, r4, r0
 8007950:	418d      	sbcs	r5, r1
 8007952:	9202      	str	r2, [sp, #8]
 8007954:	9303      	str	r3, [sp, #12]
 8007956:	0fa3      	lsrs	r3, r4, #30
 8007958:	4699      	mov	r9, r3
 800795a:	464e      	mov	r6, r9
 800795c:	00ab      	lsls	r3, r5, #2
 800795e:	4333      	orrs	r3, r6
 8007960:	00a2      	lsls	r2, r4, #2
 8007962:	0014      	movs	r4, r2
 8007964:	001d      	movs	r5, r3
 8007966:	1a24      	subs	r4, r4, r0
 8007968:	418d      	sbcs	r5, r1
 800796a:	0f26      	lsrs	r6, r4, #28
 800796c:	012b      	lsls	r3, r5, #4
 800796e:	4333      	orrs	r3, r6
 8007970:	0122      	lsls	r2, r4, #4
 8007972:	1a12      	subs	r2, r2, r0
 8007974:	418b      	sbcs	r3, r1
 8007976:	0f14      	lsrs	r4, r2, #28
 8007978:	0119      	lsls	r1, r3, #4
 800797a:	4321      	orrs	r1, r4
 800797c:	0110      	lsls	r0, r2, #4
 800797e:	1a80      	subs	r0, r0, r2
 8007980:	4199      	sbcs	r1, r3
 8007982:	9701      	str	r7, [sp, #4]
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	9c01      	ldr	r4, [sp, #4]
 8007988:	18c0      	adds	r0, r0, r3
 800798a:	4161      	adcs	r1, r4
 800798c:	000a      	movs	r2, r1
 800798e:	0001      	movs	r1, r0
 8007990:	4640      	mov	r0, r8
 8007992:	4664      	mov	r4, ip
 8007994:	6081      	str	r1, [r0, #8]
 8007996:	9104      	str	r1, [sp, #16]
 8007998:	9205      	str	r2, [sp, #20]
 800799a:	2100      	movs	r1, #0
 800799c:	68e0      	ldr	r0, [r4, #12]
 800799e:	9200      	str	r2, [sp, #0]
 80079a0:	0e45      	lsrs	r5, r0, #25
 80079a2:	01c4      	lsls	r4, r0, #7
 80079a4:	1a24      	subs	r4, r4, r0
 80079a6:	418d      	sbcs	r5, r1
 80079a8:	0fa3      	lsrs	r3, r4, #30
 80079aa:	4699      	mov	r9, r3
 80079ac:	464e      	mov	r6, r9
 80079ae:	00ab      	lsls	r3, r5, #2
 80079b0:	4333      	orrs	r3, r6
 80079b2:	00a2      	lsls	r2, r4, #2
 80079b4:	0014      	movs	r4, r2
 80079b6:	001d      	movs	r5, r3
 80079b8:	1a24      	subs	r4, r4, r0
 80079ba:	418d      	sbcs	r5, r1
 80079bc:	0f26      	lsrs	r6, r4, #28
 80079be:	012b      	lsls	r3, r5, #4
 80079c0:	4333      	orrs	r3, r6
 80079c2:	0122      	lsls	r2, r4, #4
 80079c4:	1a12      	subs	r2, r2, r0
 80079c6:	418b      	sbcs	r3, r1
 80079c8:	0f14      	lsrs	r4, r2, #28
 80079ca:	0119      	lsls	r1, r3, #4
 80079cc:	4321      	orrs	r1, r4
 80079ce:	0110      	lsls	r0, r2, #4
 80079d0:	1a80      	subs	r0, r0, r2
 80079d2:	4199      	sbcs	r1, r3
 80079d4:	9701      	str	r7, [sp, #4]
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	9c01      	ldr	r4, [sp, #4]
 80079da:	18c0      	adds	r0, r0, r3
 80079dc:	4161      	adcs	r1, r4
 80079de:	4644      	mov	r4, r8
 80079e0:	60e0      	str	r0, [r4, #12]
 80079e2:	4664      	mov	r4, ip
 80079e4:	9100      	str	r1, [sp, #0]
 80079e6:	9006      	str	r0, [sp, #24]
 80079e8:	9107      	str	r1, [sp, #28]
 80079ea:	2100      	movs	r1, #0
 80079ec:	6920      	ldr	r0, [r4, #16]
 80079ee:	9701      	str	r7, [sp, #4]
 80079f0:	0e45      	lsrs	r5, r0, #25
 80079f2:	01c4      	lsls	r4, r0, #7
 80079f4:	1a24      	subs	r4, r4, r0
 80079f6:	418d      	sbcs	r5, r1
 80079f8:	0fa3      	lsrs	r3, r4, #30
 80079fa:	4699      	mov	r9, r3
 80079fc:	464e      	mov	r6, r9
 80079fe:	00ab      	lsls	r3, r5, #2
 8007a00:	4333      	orrs	r3, r6
 8007a02:	00a2      	lsls	r2, r4, #2
 8007a04:	0014      	movs	r4, r2
 8007a06:	001d      	movs	r5, r3
 8007a08:	1a24      	subs	r4, r4, r0
 8007a0a:	418d      	sbcs	r5, r1
 8007a0c:	0f26      	lsrs	r6, r4, #28
 8007a0e:	012b      	lsls	r3, r5, #4
 8007a10:	4333      	orrs	r3, r6
 8007a12:	0122      	lsls	r2, r4, #4
 8007a14:	1a12      	subs	r2, r2, r0
 8007a16:	418b      	sbcs	r3, r1
 8007a18:	0f14      	lsrs	r4, r2, #28
 8007a1a:	0119      	lsls	r1, r3, #4
 8007a1c:	4321      	orrs	r1, r4
 8007a1e:	0110      	lsls	r0, r2, #4
 8007a20:	1a80      	subs	r0, r0, r2
 8007a22:	4199      	sbcs	r1, r3
 8007a24:	9a00      	ldr	r2, [sp, #0]
 8007a26:	9b01      	ldr	r3, [sp, #4]
 8007a28:	0004      	movs	r4, r0
 8007a2a:	000d      	movs	r5, r1
 8007a2c:	18a4      	adds	r4, r4, r2
 8007a2e:	415d      	adcs	r5, r3
 8007a30:	4646      	mov	r6, r8
 8007a32:	9408      	str	r4, [sp, #32]
 8007a34:	9509      	str	r5, [sp, #36]	; 0x24
 8007a36:	9500      	str	r5, [sp, #0]
 8007a38:	4665      	mov	r5, ip
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	6134      	str	r4, [r6, #16]
 8007a3e:	6968      	ldr	r0, [r5, #20]
 8007a40:	2700      	movs	r7, #0
 8007a42:	0e45      	lsrs	r5, r0, #25
 8007a44:	01c4      	lsls	r4, r0, #7
 8007a46:	1a24      	subs	r4, r4, r0
 8007a48:	418d      	sbcs	r5, r1
 8007a4a:	0fa3      	lsrs	r3, r4, #30
 8007a4c:	4699      	mov	r9, r3
 8007a4e:	464e      	mov	r6, r9
 8007a50:	00ab      	lsls	r3, r5, #2
 8007a52:	4333      	orrs	r3, r6
 8007a54:	00a2      	lsls	r2, r4, #2
 8007a56:	1a12      	subs	r2, r2, r0
 8007a58:	418b      	sbcs	r3, r1
 8007a5a:	0014      	movs	r4, r2
 8007a5c:	0f16      	lsrs	r6, r2, #28
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	4333      	orrs	r3, r6
 8007a62:	0122      	lsls	r2, r4, #4
 8007a64:	1a12      	subs	r2, r2, r0
 8007a66:	418b      	sbcs	r3, r1
 8007a68:	0f14      	lsrs	r4, r2, #28
 8007a6a:	0119      	lsls	r1, r3, #4
 8007a6c:	4321      	orrs	r1, r4
 8007a6e:	0110      	lsls	r0, r2, #4
 8007a70:	1a80      	subs	r0, r0, r2
 8007a72:	4199      	sbcs	r1, r3
 8007a74:	9701      	str	r7, [sp, #4]
 8007a76:	9b00      	ldr	r3, [sp, #0]
 8007a78:	9c01      	ldr	r4, [sp, #4]
 8007a7a:	4645      	mov	r5, r8
 8007a7c:	18c0      	adds	r0, r0, r3
 8007a7e:	4161      	adcs	r1, r4
 8007a80:	6168      	str	r0, [r5, #20]
 8007a82:	4665      	mov	r5, ip
 8007a84:	0003      	movs	r3, r0
 8007a86:	000c      	movs	r4, r1
 8007a88:	9100      	str	r1, [sp, #0]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	69a8      	ldr	r0, [r5, #24]
 8007a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a90:	940b      	str	r4, [sp, #44]	; 0x2c
 8007a92:	0e45      	lsrs	r5, r0, #25
 8007a94:	01c4      	lsls	r4, r0, #7
 8007a96:	1a24      	subs	r4, r4, r0
 8007a98:	418d      	sbcs	r5, r1
 8007a9a:	0fa2      	lsrs	r2, r4, #30
 8007a9c:	00ab      	lsls	r3, r5, #2
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	00a2      	lsls	r2, r4, #2
 8007aa2:	1a12      	subs	r2, r2, r0
 8007aa4:	418b      	sbcs	r3, r1
 8007aa6:	0014      	movs	r4, r2
 8007aa8:	0f16      	lsrs	r6, r2, #28
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	4333      	orrs	r3, r6
 8007aae:	0122      	lsls	r2, r4, #4
 8007ab0:	1a12      	subs	r2, r2, r0
 8007ab2:	418b      	sbcs	r3, r1
 8007ab4:	0f14      	lsrs	r4, r2, #28
 8007ab6:	0119      	lsls	r1, r3, #4
 8007ab8:	4321      	orrs	r1, r4
 8007aba:	0110      	lsls	r0, r2, #4
 8007abc:	1a80      	subs	r0, r0, r2
 8007abe:	4199      	sbcs	r1, r3
 8007ac0:	9701      	str	r7, [sp, #4]
 8007ac2:	9b00      	ldr	r3, [sp, #0]
 8007ac4:	9c01      	ldr	r4, [sp, #4]
 8007ac6:	18c0      	adds	r0, r0, r3
 8007ac8:	4161      	adcs	r1, r4
 8007aca:	0005      	movs	r5, r0
 8007acc:	000e      	movs	r6, r1
 8007ace:	950c      	str	r5, [sp, #48]	; 0x30
 8007ad0:	960d      	str	r6, [sp, #52]	; 0x34
 8007ad2:	2600      	movs	r6, #0
 8007ad4:	4647      	mov	r7, r8
 8007ad6:	9601      	str	r6, [sp, #4]
 8007ad8:	4666      	mov	r6, ip
 8007ada:	9100      	str	r1, [sp, #0]
 8007adc:	2100      	movs	r1, #0
 8007ade:	61b8      	str	r0, [r7, #24]
 8007ae0:	69f0      	ldr	r0, [r6, #28]
 8007ae2:	0e45      	lsrs	r5, r0, #25
 8007ae4:	01c4      	lsls	r4, r0, #7
 8007ae6:	1a24      	subs	r4, r4, r0
 8007ae8:	418d      	sbcs	r5, r1
 8007aea:	0fa6      	lsrs	r6, r4, #30
 8007aec:	00ab      	lsls	r3, r5, #2
 8007aee:	4333      	orrs	r3, r6
 8007af0:	00a2      	lsls	r2, r4, #2
 8007af2:	1a12      	subs	r2, r2, r0
 8007af4:	418b      	sbcs	r3, r1
 8007af6:	0014      	movs	r4, r2
 8007af8:	0f16      	lsrs	r6, r2, #28
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	4333      	orrs	r3, r6
 8007afe:	0122      	lsls	r2, r4, #4
 8007b00:	1a12      	subs	r2, r2, r0
 8007b02:	418b      	sbcs	r3, r1
 8007b04:	0f11      	lsrs	r1, r2, #28
 8007b06:	011f      	lsls	r7, r3, #4
 8007b08:	430f      	orrs	r7, r1
 8007b0a:	0116      	lsls	r6, r2, #4
 8007b0c:	1ab6      	subs	r6, r6, r2
 8007b0e:	419f      	sbcs	r7, r3
 8007b10:	9a00      	ldr	r2, [sp, #0]
 8007b12:	9b01      	ldr	r3, [sp, #4]
 8007b14:	18b6      	adds	r6, r6, r2
 8007b16:	415f      	adcs	r7, r3
 8007b18:	4642      	mov	r2, r8
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61d6      	str	r6, [r2, #28]
 8007b1e:	0038      	movs	r0, r7
 8007b20:	2226      	movs	r2, #38	; 0x26
 8007b22:	2100      	movs	r1, #0
 8007b24:	f7f8 fb7c 	bl	8000220 <__aeabi_lmul>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	1880      	adds	r0, r0, r2
 8007b30:	4159      	adcs	r1, r3
 8007b32:	2300      	movs	r3, #0
 8007b34:	000c      	movs	r4, r1
 8007b36:	9a02      	ldr	r2, [sp, #8]
 8007b38:	1912      	adds	r2, r2, r4
 8007b3a:	416b      	adcs	r3, r5
 8007b3c:	4644      	mov	r4, r8
 8007b3e:	2500      	movs	r5, #0
 8007b40:	6062      	str	r2, [r4, #4]
 8007b42:	001c      	movs	r4, r3
 8007b44:	2300      	movs	r3, #0
 8007b46:	9a04      	ldr	r2, [sp, #16]
 8007b48:	1912      	adds	r2, r2, r4
 8007b4a:	416b      	adcs	r3, r5
 8007b4c:	4644      	mov	r4, r8
 8007b4e:	2500      	movs	r5, #0
 8007b50:	60a2      	str	r2, [r4, #8]
 8007b52:	001c      	movs	r4, r3
 8007b54:	2300      	movs	r3, #0
 8007b56:	9a06      	ldr	r2, [sp, #24]
 8007b58:	1912      	adds	r2, r2, r4
 8007b5a:	416b      	adcs	r3, r5
 8007b5c:	4644      	mov	r4, r8
 8007b5e:	2500      	movs	r5, #0
 8007b60:	60e2      	str	r2, [r4, #12]
 8007b62:	001c      	movs	r4, r3
 8007b64:	2300      	movs	r3, #0
 8007b66:	9a08      	ldr	r2, [sp, #32]
 8007b68:	1912      	adds	r2, r2, r4
 8007b6a:	416b      	adcs	r3, r5
 8007b6c:	4644      	mov	r4, r8
 8007b6e:	2500      	movs	r5, #0
 8007b70:	6122      	str	r2, [r4, #16]
 8007b72:	001c      	movs	r4, r3
 8007b74:	2300      	movs	r3, #0
 8007b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b78:	1912      	adds	r2, r2, r4
 8007b7a:	416b      	adcs	r3, r5
 8007b7c:	4644      	mov	r4, r8
 8007b7e:	2500      	movs	r5, #0
 8007b80:	6162      	str	r2, [r4, #20]
 8007b82:	001c      	movs	r4, r3
 8007b84:	2300      	movs	r3, #0
 8007b86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b88:	1912      	adds	r2, r2, r4
 8007b8a:	416b      	adcs	r3, r5
 8007b8c:	4644      	mov	r4, r8
 8007b8e:	2500      	movs	r5, #0
 8007b90:	61a2      	str	r2, [r4, #24]
 8007b92:	0032      	movs	r2, r6
 8007b94:	001c      	movs	r4, r3
 8007b96:	2300      	movs	r3, #0
 8007b98:	18a4      	adds	r4, r4, r2
 8007b9a:	415d      	adcs	r5, r3
 8007b9c:	2226      	movs	r2, #38	; 0x26
 8007b9e:	4643      	mov	r3, r8
 8007ba0:	436a      	muls	r2, r5
 8007ba2:	1810      	adds	r0, r2, r0
 8007ba4:	61dc      	str	r4, [r3, #28]
 8007ba6:	6018      	str	r0, [r3, #0]
 8007ba8:	b011      	add	sp, #68	; 0x44
 8007baa:	bc0c      	pop	{r2, r3}
 8007bac:	4690      	mov	r8, r2
 8007bae:	4699      	mov	r9, r3
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)

08007bb4 <C25519keyExchange.part.50>:
 8007bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb6:	46ce      	mov	lr, r9
 8007bb8:	4647      	mov	r7, r8
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	4c17      	ldr	r4, [pc, #92]	; (8007c1c <C25519keyExchange.part.50+0x68>)
 8007bbe:	0015      	movs	r5, r2
 8007bc0:	44a5      	add	sp, r4
 8007bc2:	ac04      	add	r4, sp, #16
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	4681      	mov	r9, r0
 8007bc8:	0020      	movs	r0, r4
 8007bca:	f000 fc47 	bl	800845c <memcpy>
 8007bce:	2207      	movs	r2, #7
 8007bd0:	7823      	ldrb	r3, [r4, #0]
 8007bd2:	0029      	movs	r1, r5
 8007bd4:	4393      	bics	r3, r2
 8007bd6:	7023      	strb	r3, [r4, #0]
 8007bd8:	237f      	movs	r3, #127	; 0x7f
 8007bda:	7fe2      	ldrb	r2, [r4, #31]
 8007bdc:	a8dc      	add	r0, sp, #880	; 0x370
 8007bde:	4013      	ands	r3, r2
 8007be0:	2240      	movs	r2, #64	; 0x40
 8007be2:	4313      	orrs	r3, r2
 8007be4:	77e3      	strb	r3, [r4, #31]
 8007be6:	f7ff f897 	bl	8006d18 <fe25519_unpack>
 8007bea:	9be3      	ldr	r3, [sp, #908]	; 0x38c
 8007bec:	a9dc      	add	r1, sp, #880	; 0x370
 8007bee:	9301      	str	r3, [sp, #4]
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	a82c      	add	r0, sp, #176	; 0xb0
 8007bf6:	93e3      	str	r3, [sp, #908]	; 0x38c
 8007bf8:	f7ff f91e 	bl	8006e38 <fe25519_copy>
 8007bfc:	a834      	add	r0, sp, #208	; 0xd0
 8007bfe:	f7ff f92d 	bl	8006e5c <fe25519_setone>
 8007c02:	a83c      	add	r0, sp, #240	; 0xf0
 8007c04:	f7ff f92a 	bl	8006e5c <fe25519_setone>
 8007c08:	a844      	add	r0, sp, #272	; 0x110
 8007c0a:	f7ff f933 	bl	8006e74 <fe25519_setzero>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	25fe      	movs	r5, #254	; 0xfe
 8007c12:	2701      	movs	r7, #1
 8007c14:	4e02      	ldr	r6, [pc, #8]	; (8007c20 <C25519keyExchange.part.50+0x6c>)
 8007c16:	4698      	mov	r8, r3
 8007c18:	e188      	b.n	8007f2c <C25519keyExchange.part.50+0x378>
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	fffffc2c 	.word	0xfffffc2c
 8007c20:	40023008 	.word	0x40023008
 8007c24:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007c26:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007c28:	000b      	movs	r3, r1
 8007c2a:	4053      	eors	r3, r2
 8007c2c:	4023      	ands	r3, r4
 8007c2e:	401a      	ands	r2, r3
 8007c30:	400b      	ands	r3, r1
 8007c32:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007c34:	935c      	str	r3, [sp, #368]	; 0x170
 8007c36:	000b      	movs	r3, r1
 8007c38:	924c      	str	r2, [sp, #304]	; 0x130
 8007c3a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007c3c:	4053      	eors	r3, r2
 8007c3e:	4023      	ands	r3, r4
 8007c40:	401a      	ands	r2, r3
 8007c42:	400b      	ands	r3, r1
 8007c44:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007c46:	935d      	str	r3, [sp, #372]	; 0x174
 8007c48:	000b      	movs	r3, r1
 8007c4a:	924d      	str	r2, [sp, #308]	; 0x134
 8007c4c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007c4e:	4053      	eors	r3, r2
 8007c50:	4023      	ands	r3, r4
 8007c52:	401a      	ands	r2, r3
 8007c54:	400b      	ands	r3, r1
 8007c56:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007c58:	935e      	str	r3, [sp, #376]	; 0x178
 8007c5a:	000b      	movs	r3, r1
 8007c5c:	924e      	str	r2, [sp, #312]	; 0x138
 8007c5e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007c60:	4053      	eors	r3, r2
 8007c62:	4023      	ands	r3, r4
 8007c64:	401a      	ands	r2, r3
 8007c66:	400b      	ands	r3, r1
 8007c68:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007c6a:	935f      	str	r3, [sp, #380]	; 0x17c
 8007c6c:	000b      	movs	r3, r1
 8007c6e:	924f      	str	r2, [sp, #316]	; 0x13c
 8007c70:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007c72:	4053      	eors	r3, r2
 8007c74:	4023      	ands	r3, r4
 8007c76:	401a      	ands	r2, r3
 8007c78:	400b      	ands	r3, r1
 8007c7a:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007c7c:	9360      	str	r3, [sp, #384]	; 0x180
 8007c7e:	000b      	movs	r3, r1
 8007c80:	9250      	str	r2, [sp, #320]	; 0x140
 8007c82:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007c84:	4053      	eors	r3, r2
 8007c86:	4023      	ands	r3, r4
 8007c88:	401a      	ands	r2, r3
 8007c8a:	400b      	ands	r3, r1
 8007c8c:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007c8e:	9361      	str	r3, [sp, #388]	; 0x184
 8007c90:	000b      	movs	r3, r1
 8007c92:	9251      	str	r2, [sp, #324]	; 0x144
 8007c94:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007c96:	4053      	eors	r3, r2
 8007c98:	4023      	ands	r3, r4
 8007c9a:	401a      	ands	r2, r3
 8007c9c:	400b      	ands	r3, r1
 8007c9e:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007ca0:	9362      	str	r3, [sp, #392]	; 0x188
 8007ca2:	000b      	movs	r3, r1
 8007ca4:	9252      	str	r2, [sp, #328]	; 0x148
 8007ca6:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007ca8:	4053      	eors	r3, r2
 8007caa:	4023      	ands	r3, r4
 8007cac:	401a      	ands	r2, r3
 8007cae:	400b      	ands	r3, r1
 8007cb0:	9944      	ldr	r1, [sp, #272]	; 0x110
 8007cb2:	9363      	str	r3, [sp, #396]	; 0x18c
 8007cb4:	000b      	movs	r3, r1
 8007cb6:	9253      	str	r2, [sp, #332]	; 0x14c
 8007cb8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007cba:	4053      	eors	r3, r2
 8007cbc:	4063      	eors	r3, r4
 8007cbe:	401a      	ands	r2, r3
 8007cc0:	400b      	ands	r3, r1
 8007cc2:	9945      	ldr	r1, [sp, #276]	; 0x114
 8007cc4:	9364      	str	r3, [sp, #400]	; 0x190
 8007cc6:	000b      	movs	r3, r1
 8007cc8:	9254      	str	r2, [sp, #336]	; 0x150
 8007cca:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8007ccc:	4053      	eors	r3, r2
 8007cce:	4063      	eors	r3, r4
 8007cd0:	401a      	ands	r2, r3
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	9946      	ldr	r1, [sp, #280]	; 0x118
 8007cd6:	9365      	str	r3, [sp, #404]	; 0x194
 8007cd8:	000b      	movs	r3, r1
 8007cda:	9255      	str	r2, [sp, #340]	; 0x154
 8007cdc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8007cde:	4053      	eors	r3, r2
 8007ce0:	4063      	eors	r3, r4
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	400b      	ands	r3, r1
 8007ce6:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8007ce8:	9366      	str	r3, [sp, #408]	; 0x198
 8007cea:	000b      	movs	r3, r1
 8007cec:	9256      	str	r2, [sp, #344]	; 0x158
 8007cee:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8007cf0:	4053      	eors	r3, r2
 8007cf2:	4063      	eors	r3, r4
 8007cf4:	401a      	ands	r2, r3
 8007cf6:	400b      	ands	r3, r1
 8007cf8:	9948      	ldr	r1, [sp, #288]	; 0x120
 8007cfa:	9367      	str	r3, [sp, #412]	; 0x19c
 8007cfc:	000b      	movs	r3, r1
 8007cfe:	9257      	str	r2, [sp, #348]	; 0x15c
 8007d00:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8007d02:	4053      	eors	r3, r2
 8007d04:	4063      	eors	r3, r4
 8007d06:	401a      	ands	r2, r3
 8007d08:	400b      	ands	r3, r1
 8007d0a:	9949      	ldr	r1, [sp, #292]	; 0x124
 8007d0c:	9368      	str	r3, [sp, #416]	; 0x1a0
 8007d0e:	000b      	movs	r3, r1
 8007d10:	9258      	str	r2, [sp, #352]	; 0x160
 8007d12:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8007d14:	4053      	eors	r3, r2
 8007d16:	4063      	eors	r3, r4
 8007d18:	401a      	ands	r2, r3
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	994a      	ldr	r1, [sp, #296]	; 0x128
 8007d1e:	9369      	str	r3, [sp, #420]	; 0x1a4
 8007d20:	000b      	movs	r3, r1
 8007d22:	9259      	str	r2, [sp, #356]	; 0x164
 8007d24:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
 8007d26:	4053      	eors	r3, r2
 8007d28:	4063      	eors	r3, r4
 8007d2a:	401a      	ands	r2, r3
 8007d2c:	400b      	ands	r3, r1
 8007d2e:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8007d30:	936a      	str	r3, [sp, #424]	; 0x1a8
 8007d32:	000b      	movs	r3, r1
 8007d34:	925a      	str	r2, [sp, #360]	; 0x168
 8007d36:	9a3b      	ldr	r2, [sp, #236]	; 0xec
 8007d38:	4053      	eors	r3, r2
 8007d3a:	4063      	eors	r3, r4
 8007d3c:	401a      	ands	r2, r3
 8007d3e:	400b      	ands	r3, r1
 8007d40:	925b      	str	r2, [sp, #364]	; 0x16c
 8007d42:	936b      	str	r3, [sp, #428]	; 0x1ac
 8007d44:	aa54      	add	r2, sp, #336	; 0x150
 8007d46:	a94c      	add	r1, sp, #304	; 0x130
 8007d48:	a88c      	add	r0, sp, #560	; 0x230
 8007d4a:	f7ff f899 	bl	8006e80 <fe25519_add>
 8007d4e:	aa54      	add	r2, sp, #336	; 0x150
 8007d50:	a94c      	add	r1, sp, #304	; 0x130
 8007d52:	a894      	add	r0, sp, #592	; 0x250
 8007d54:	f7ff f94e 	bl	8006ff4 <fe25519_sub>
 8007d58:	aa64      	add	r2, sp, #400	; 0x190
 8007d5a:	a95c      	add	r1, sp, #368	; 0x170
 8007d5c:	a89c      	add	r0, sp, #624	; 0x270
 8007d5e:	f7ff f88f 	bl	8006e80 <fe25519_add>
 8007d62:	aa64      	add	r2, sp, #400	; 0x190
 8007d64:	a95c      	add	r1, sp, #368	; 0x170
 8007d66:	a8a4      	add	r0, sp, #656	; 0x290
 8007d68:	f7ff f944 	bl	8006ff4 <fe25519_sub>
 8007d6c:	a98c      	add	r1, sp, #560	; 0x230
 8007d6e:	a8ac      	add	r0, sp, #688	; 0x2b0
 8007d70:	f7ff fcaa 	bl	80076c8 <fe25519_square>
 8007d74:	a994      	add	r1, sp, #592	; 0x250
 8007d76:	a8b4      	add	r0, sp, #720	; 0x2d0
 8007d78:	f7ff fca6 	bl	80076c8 <fe25519_square>
 8007d7c:	aa94      	add	r2, sp, #592	; 0x250
 8007d7e:	a99c      	add	r1, sp, #624	; 0x270
 8007d80:	a8bc      	add	r0, sp, #752	; 0x2f0
 8007d82:	f7ff faed 	bl	8007360 <fe25519_mul>
 8007d86:	aa8c      	add	r2, sp, #560	; 0x230
 8007d88:	a9a4      	add	r1, sp, #656	; 0x290
 8007d8a:	a8c4      	add	r0, sp, #784	; 0x310
 8007d8c:	f7ff fae8 	bl	8007360 <fe25519_mul>
 8007d90:	aac4      	add	r2, sp, #784	; 0x310
 8007d92:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007d94:	a8cc      	add	r0, sp, #816	; 0x330
 8007d96:	f7ff f873 	bl	8006e80 <fe25519_add>
 8007d9a:	aac4      	add	r2, sp, #784	; 0x310
 8007d9c:	a9bc      	add	r1, sp, #752	; 0x2f0
 8007d9e:	a8d4      	add	r0, sp, #848	; 0x350
 8007da0:	f7ff f928 	bl	8006ff4 <fe25519_sub>
 8007da4:	a9d4      	add	r1, sp, #848	; 0x350
 8007da6:	a80c      	add	r0, sp, #48	; 0x30
 8007da8:	f7ff fc8e 	bl	80076c8 <fe25519_square>
 8007dac:	aab4      	add	r2, sp, #720	; 0x2d0
 8007dae:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007db0:	a814      	add	r0, sp, #80	; 0x50
 8007db2:	f7ff f91f 	bl	8006ff4 <fe25519_sub>
 8007db6:	a914      	add	r1, sp, #80	; 0x50
 8007db8:	a81c      	add	r0, sp, #112	; 0x70
 8007dba:	f7ff fd77 	bl	80078ac <fe25519_mult121665>
 8007dbe:	aaac      	add	r2, sp, #688	; 0x2b0
 8007dc0:	a91c      	add	r1, sp, #112	; 0x70
 8007dc2:	a824      	add	r0, sp, #144	; 0x90
 8007dc4:	f7ff f85c 	bl	8006e80 <fe25519_add>
 8007dc8:	aab4      	add	r2, sp, #720	; 0x2d0
 8007dca:	a9ac      	add	r1, sp, #688	; 0x2b0
 8007dcc:	a86c      	add	r0, sp, #432	; 0x1b0
 8007dce:	f7ff fac7 	bl	8007360 <fe25519_mul>
 8007dd2:	aa24      	add	r2, sp, #144	; 0x90
 8007dd4:	a914      	add	r1, sp, #80	; 0x50
 8007dd6:	a874      	add	r0, sp, #464	; 0x1d0
 8007dd8:	f7ff fac2 	bl	8007360 <fe25519_mul>
 8007ddc:	a9cc      	add	r1, sp, #816	; 0x330
 8007dde:	a87c      	add	r0, sp, #496	; 0x1f0
 8007de0:	f7ff fc72 	bl	80076c8 <fe25519_square>
 8007de4:	aadc      	add	r2, sp, #880	; 0x370
 8007de6:	a90c      	add	r1, sp, #48	; 0x30
 8007de8:	a884      	add	r0, sp, #528	; 0x210
 8007dea:	f7ff fab9 	bl	8007360 <fe25519_mul>
 8007dee:	2300      	movs	r3, #0
 8007df0:	9302      	str	r3, [sp, #8]
 8007df2:	6037      	str	r7, [r6, #0]
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	4bee      	ldr	r3, [pc, #952]	; (80081b4 <C25519keyExchange.part.50+0x600>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	9202      	str	r2, [sp, #8]
 8007dfe:	9a02      	ldr	r2, [sp, #8]
 8007e00:	3201      	adds	r2, #1
 8007e02:	d100      	bne.n	8007e06 <C25519keyExchange.part.50+0x252>
 8007e04:	e0f8      	b.n	8007ff8 <C25519keyExchange.part.50+0x444>
 8007e06:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8007e08:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 8007e0a:	000b      	movs	r3, r1
 8007e0c:	4053      	eors	r3, r2
 8007e0e:	4023      	ands	r3, r4
 8007e10:	401a      	ands	r2, r3
 8007e12:	400b      	ands	r3, r1
 8007e14:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8007e16:	932c      	str	r3, [sp, #176]	; 0xb0
 8007e18:	000b      	movs	r3, r1
 8007e1a:	923c      	str	r2, [sp, #240]	; 0xf0
 8007e1c:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8007e1e:	4053      	eors	r3, r2
 8007e20:	4023      	ands	r3, r4
 8007e22:	401a      	ands	r2, r3
 8007e24:	400b      	ands	r3, r1
 8007e26:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8007e28:	932d      	str	r3, [sp, #180]	; 0xb4
 8007e2a:	000b      	movs	r3, r1
 8007e2c:	923d      	str	r2, [sp, #244]	; 0xf4
 8007e2e:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8007e30:	4053      	eors	r3, r2
 8007e32:	4023      	ands	r3, r4
 8007e34:	401a      	ands	r2, r3
 8007e36:	400b      	ands	r3, r1
 8007e38:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8007e3a:	932e      	str	r3, [sp, #184]	; 0xb8
 8007e3c:	000b      	movs	r3, r1
 8007e3e:	923e      	str	r2, [sp, #248]	; 0xf8
 8007e40:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 8007e42:	4053      	eors	r3, r2
 8007e44:	4023      	ands	r3, r4
 8007e46:	401a      	ands	r2, r3
 8007e48:	400b      	ands	r3, r1
 8007e4a:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8007e4c:	932f      	str	r3, [sp, #188]	; 0xbc
 8007e4e:	000b      	movs	r3, r1
 8007e50:	923f      	str	r2, [sp, #252]	; 0xfc
 8007e52:	9a80      	ldr	r2, [sp, #512]	; 0x200
 8007e54:	4053      	eors	r3, r2
 8007e56:	4023      	ands	r3, r4
 8007e58:	401a      	ands	r2, r3
 8007e5a:	400b      	ands	r3, r1
 8007e5c:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8007e5e:	9330      	str	r3, [sp, #192]	; 0xc0
 8007e60:	000b      	movs	r3, r1
 8007e62:	9240      	str	r2, [sp, #256]	; 0x100
 8007e64:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8007e66:	4053      	eors	r3, r2
 8007e68:	4023      	ands	r3, r4
 8007e6a:	401a      	ands	r2, r3
 8007e6c:	400b      	ands	r3, r1
 8007e6e:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 8007e70:	9331      	str	r3, [sp, #196]	; 0xc4
 8007e72:	000b      	movs	r3, r1
 8007e74:	9241      	str	r2, [sp, #260]	; 0x104
 8007e76:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8007e78:	4053      	eors	r3, r2
 8007e7a:	4023      	ands	r3, r4
 8007e7c:	401a      	ands	r2, r3
 8007e7e:	400b      	ands	r3, r1
 8007e80:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 8007e82:	9332      	str	r3, [sp, #200]	; 0xc8
 8007e84:	000b      	movs	r3, r1
 8007e86:	9242      	str	r2, [sp, #264]	; 0x108
 8007e88:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8007e8a:	4053      	eors	r3, r2
 8007e8c:	4023      	ands	r3, r4
 8007e8e:	401a      	ands	r2, r3
 8007e90:	400b      	ands	r3, r1
 8007e92:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8007e94:	9333      	str	r3, [sp, #204]	; 0xcc
 8007e96:	000b      	movs	r3, r1
 8007e98:	9243      	str	r2, [sp, #268]	; 0x10c
 8007e9a:	9a84      	ldr	r2, [sp, #528]	; 0x210
 8007e9c:	4053      	eors	r3, r2
 8007e9e:	4063      	eors	r3, r4
 8007ea0:	401a      	ands	r2, r3
 8007ea2:	400b      	ands	r3, r1
 8007ea4:	9975      	ldr	r1, [sp, #468]	; 0x1d4
 8007ea6:	9334      	str	r3, [sp, #208]	; 0xd0
 8007ea8:	000b      	movs	r3, r1
 8007eaa:	9244      	str	r2, [sp, #272]	; 0x110
 8007eac:	9a85      	ldr	r2, [sp, #532]	; 0x214
 8007eae:	4053      	eors	r3, r2
 8007eb0:	4063      	eors	r3, r4
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	400b      	ands	r3, r1
 8007eb6:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8007eb8:	9335      	str	r3, [sp, #212]	; 0xd4
 8007eba:	000b      	movs	r3, r1
 8007ebc:	9245      	str	r2, [sp, #276]	; 0x114
 8007ebe:	9a86      	ldr	r2, [sp, #536]	; 0x218
 8007ec0:	4053      	eors	r3, r2
 8007ec2:	4063      	eors	r3, r4
 8007ec4:	401a      	ands	r2, r3
 8007ec6:	400b      	ands	r3, r1
 8007ec8:	9977      	ldr	r1, [sp, #476]	; 0x1dc
 8007eca:	9336      	str	r3, [sp, #216]	; 0xd8
 8007ecc:	000b      	movs	r3, r1
 8007ece:	9246      	str	r2, [sp, #280]	; 0x118
 8007ed0:	9a87      	ldr	r2, [sp, #540]	; 0x21c
 8007ed2:	4053      	eors	r3, r2
 8007ed4:	4063      	eors	r3, r4
 8007ed6:	401a      	ands	r2, r3
 8007ed8:	400b      	ands	r3, r1
 8007eda:	9978      	ldr	r1, [sp, #480]	; 0x1e0
 8007edc:	9337      	str	r3, [sp, #220]	; 0xdc
 8007ede:	000b      	movs	r3, r1
 8007ee0:	9247      	str	r2, [sp, #284]	; 0x11c
 8007ee2:	9a88      	ldr	r2, [sp, #544]	; 0x220
 8007ee4:	4053      	eors	r3, r2
 8007ee6:	4063      	eors	r3, r4
 8007ee8:	401a      	ands	r2, r3
 8007eea:	400b      	ands	r3, r1
 8007eec:	9979      	ldr	r1, [sp, #484]	; 0x1e4
 8007eee:	9338      	str	r3, [sp, #224]	; 0xe0
 8007ef0:	000b      	movs	r3, r1
 8007ef2:	9248      	str	r2, [sp, #288]	; 0x120
 8007ef4:	9a89      	ldr	r2, [sp, #548]	; 0x224
 8007ef6:	4053      	eors	r3, r2
 8007ef8:	4063      	eors	r3, r4
 8007efa:	401a      	ands	r2, r3
 8007efc:	400b      	ands	r3, r1
 8007efe:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8007f00:	9339      	str	r3, [sp, #228]	; 0xe4
 8007f02:	000b      	movs	r3, r1
 8007f04:	9249      	str	r2, [sp, #292]	; 0x124
 8007f06:	9a8a      	ldr	r2, [sp, #552]	; 0x228
 8007f08:	4053      	eors	r3, r2
 8007f0a:	4063      	eors	r3, r4
 8007f0c:	401a      	ands	r2, r3
 8007f0e:	400b      	ands	r3, r1
 8007f10:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 8007f12:	933a      	str	r3, [sp, #232]	; 0xe8
 8007f14:	000b      	movs	r3, r1
 8007f16:	924a      	str	r2, [sp, #296]	; 0x128
 8007f18:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 8007f1a:	4053      	eors	r3, r2
 8007f1c:	405c      	eors	r4, r3
 8007f1e:	4022      	ands	r2, r4
 8007f20:	400c      	ands	r4, r1
 8007f22:	924b      	str	r2, [sp, #300]	; 0x12c
 8007f24:	943b      	str	r4, [sp, #236]	; 0xec
 8007f26:	3d01      	subs	r5, #1
 8007f28:	d200      	bcs.n	8007f2c <C25519keyExchange.part.50+0x378>
 8007f2a:	e1da      	b.n	80082e2 <C25519keyExchange.part.50+0x72e>
 8007f2c:	aaf4      	add	r2, sp, #976	; 0x3d0
 8007f2e:	4694      	mov	ip, r2
 8007f30:	4aa1      	ldr	r2, [pc, #644]	; (80081b8 <C25519keyExchange.part.50+0x604>)
 8007f32:	10eb      	asrs	r3, r5, #3
 8007f34:	4463      	add	r3, ip
 8007f36:	4694      	mov	ip, r2
 8007f38:	4463      	add	r3, ip
 8007f3a:	781c      	ldrb	r4, [r3, #0]
 8007f3c:	2307      	movs	r3, #7
 8007f3e:	402b      	ands	r3, r5
 8007f40:	411c      	asrs	r4, r3
 8007f42:	2300      	movs	r3, #0
 8007f44:	9303      	str	r3, [sp, #12]
 8007f46:	4643      	mov	r3, r8
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	6833      	ldr	r3, [r6, #0]
 8007f4c:	403c      	ands	r4, r7
 8007f4e:	9303      	str	r3, [sp, #12]
 8007f50:	4b98      	ldr	r3, [pc, #608]	; (80081b4 <C25519keyExchange.part.50+0x600>)
 8007f52:	3c01      	subs	r4, #1
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	9203      	str	r2, [sp, #12]
 8007f58:	9a03      	ldr	r2, [sp, #12]
 8007f5a:	3201      	adds	r2, #1
 8007f5c:	d000      	beq.n	8007f60 <C25519keyExchange.part.50+0x3ac>
 8007f5e:	e661      	b.n	8007c24 <C25519keyExchange.part.50+0x70>
 8007f60:	9a03      	ldr	r2, [sp, #12]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d100      	bne.n	8007f70 <C25519keyExchange.part.50+0x3bc>
 8007f6e:	e08f      	b.n	8008090 <C25519keyExchange.part.50+0x4dc>
 8007f70:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8007f72:	993c      	ldr	r1, [sp, #240]	; 0xf0
 8007f74:	0013      	movs	r3, r2
 8007f76:	400b      	ands	r3, r1
 8007f78:	4023      	ands	r3, r4
 8007f7a:	401a      	ands	r2, r3
 8007f7c:	924c      	str	r2, [sp, #304]	; 0x130
 8007f7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007f80:	400b      	ands	r3, r1
 8007f82:	935c      	str	r3, [sp, #368]	; 0x170
 8007f84:	0013      	movs	r3, r2
 8007f86:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8007f88:	400b      	ands	r3, r1
 8007f8a:	4023      	ands	r3, r4
 8007f8c:	401a      	ands	r2, r3
 8007f8e:	924d      	str	r2, [sp, #308]	; 0x134
 8007f90:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007f92:	400b      	ands	r3, r1
 8007f94:	935d      	str	r3, [sp, #372]	; 0x174
 8007f96:	0013      	movs	r3, r2
 8007f98:	993e      	ldr	r1, [sp, #248]	; 0xf8
 8007f9a:	400b      	ands	r3, r1
 8007f9c:	4023      	ands	r3, r4
 8007f9e:	401a      	ands	r2, r3
 8007fa0:	924e      	str	r2, [sp, #312]	; 0x138
 8007fa2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	935e      	str	r3, [sp, #376]	; 0x178
 8007fa8:	0013      	movs	r3, r2
 8007faa:	993f      	ldr	r1, [sp, #252]	; 0xfc
 8007fac:	400b      	ands	r3, r1
 8007fae:	4023      	ands	r3, r4
 8007fb0:	401a      	ands	r2, r3
 8007fb2:	924f      	str	r2, [sp, #316]	; 0x13c
 8007fb4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8007fb6:	400b      	ands	r3, r1
 8007fb8:	935f      	str	r3, [sp, #380]	; 0x17c
 8007fba:	0013      	movs	r3, r2
 8007fbc:	9940      	ldr	r1, [sp, #256]	; 0x100
 8007fbe:	400b      	ands	r3, r1
 8007fc0:	4023      	ands	r3, r4
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	9250      	str	r2, [sp, #320]	; 0x140
 8007fc6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007fc8:	400b      	ands	r3, r1
 8007fca:	9360      	str	r3, [sp, #384]	; 0x180
 8007fcc:	0013      	movs	r3, r2
 8007fce:	9941      	ldr	r1, [sp, #260]	; 0x104
 8007fd0:	400b      	ands	r3, r1
 8007fd2:	4023      	ands	r3, r4
 8007fd4:	401a      	ands	r2, r3
 8007fd6:	9251      	str	r2, [sp, #324]	; 0x144
 8007fd8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007fda:	400b      	ands	r3, r1
 8007fdc:	9361      	str	r3, [sp, #388]	; 0x184
 8007fde:	0013      	movs	r3, r2
 8007fe0:	9942      	ldr	r1, [sp, #264]	; 0x108
 8007fe2:	400b      	ands	r3, r1
 8007fe4:	4023      	ands	r3, r4
 8007fe6:	401a      	ands	r2, r3
 8007fe8:	9252      	str	r2, [sp, #328]	; 0x148
 8007fea:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8007fec:	400b      	ands	r3, r1
 8007fee:	9362      	str	r3, [sp, #392]	; 0x188
 8007ff0:	0013      	movs	r3, r2
 8007ff2:	9943      	ldr	r1, [sp, #268]	; 0x10c
 8007ff4:	400b      	ands	r3, r1
 8007ff6:	e658      	b.n	8007caa <C25519keyExchange.part.50+0xf6>
 8007ff8:	9a02      	ldr	r2, [sp, #8]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	9b02      	ldr	r3, [sp, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d100      	bne.n	8008008 <C25519keyExchange.part.50+0x454>
 8008006:	e0d9      	b.n	80081bc <C25519keyExchange.part.50+0x608>
 8008008:	9a7c      	ldr	r2, [sp, #496]	; 0x1f0
 800800a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 800800c:	0013      	movs	r3, r2
 800800e:	400b      	ands	r3, r1
 8008010:	4023      	ands	r3, r4
 8008012:	401a      	ands	r2, r3
 8008014:	923c      	str	r2, [sp, #240]	; 0xf0
 8008016:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 8008018:	400b      	ands	r3, r1
 800801a:	932c      	str	r3, [sp, #176]	; 0xb0
 800801c:	0013      	movs	r3, r2
 800801e:	996d      	ldr	r1, [sp, #436]	; 0x1b4
 8008020:	400b      	ands	r3, r1
 8008022:	4023      	ands	r3, r4
 8008024:	401a      	ands	r2, r3
 8008026:	923d      	str	r2, [sp, #244]	; 0xf4
 8008028:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 800802a:	400b      	ands	r3, r1
 800802c:	932d      	str	r3, [sp, #180]	; 0xb4
 800802e:	0013      	movs	r3, r2
 8008030:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8008032:	400b      	ands	r3, r1
 8008034:	4023      	ands	r3, r4
 8008036:	401a      	ands	r2, r3
 8008038:	923e      	str	r2, [sp, #248]	; 0xf8
 800803a:	9a7f      	ldr	r2, [sp, #508]	; 0x1fc
 800803c:	400b      	ands	r3, r1
 800803e:	932e      	str	r3, [sp, #184]	; 0xb8
 8008040:	0013      	movs	r3, r2
 8008042:	996f      	ldr	r1, [sp, #444]	; 0x1bc
 8008044:	400b      	ands	r3, r1
 8008046:	4023      	ands	r3, r4
 8008048:	401a      	ands	r2, r3
 800804a:	923f      	str	r2, [sp, #252]	; 0xfc
 800804c:	9a80      	ldr	r2, [sp, #512]	; 0x200
 800804e:	400b      	ands	r3, r1
 8008050:	932f      	str	r3, [sp, #188]	; 0xbc
 8008052:	0013      	movs	r3, r2
 8008054:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8008056:	400b      	ands	r3, r1
 8008058:	4023      	ands	r3, r4
 800805a:	401a      	ands	r2, r3
 800805c:	9240      	str	r2, [sp, #256]	; 0x100
 800805e:	9a81      	ldr	r2, [sp, #516]	; 0x204
 8008060:	400b      	ands	r3, r1
 8008062:	9330      	str	r3, [sp, #192]	; 0xc0
 8008064:	0013      	movs	r3, r2
 8008066:	9971      	ldr	r1, [sp, #452]	; 0x1c4
 8008068:	400b      	ands	r3, r1
 800806a:	4023      	ands	r3, r4
 800806c:	401a      	ands	r2, r3
 800806e:	9241      	str	r2, [sp, #260]	; 0x104
 8008070:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8008072:	400b      	ands	r3, r1
 8008074:	9331      	str	r3, [sp, #196]	; 0xc4
 8008076:	0013      	movs	r3, r2
 8008078:	9972      	ldr	r1, [sp, #456]	; 0x1c8
 800807a:	400b      	ands	r3, r1
 800807c:	4023      	ands	r3, r4
 800807e:	401a      	ands	r2, r3
 8008080:	9242      	str	r2, [sp, #264]	; 0x108
 8008082:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8008084:	400b      	ands	r3, r1
 8008086:	9332      	str	r3, [sp, #200]	; 0xc8
 8008088:	0013      	movs	r3, r2
 800808a:	9973      	ldr	r1, [sp, #460]	; 0x1cc
 800808c:	400b      	ands	r3, r1
 800808e:	e6fd      	b.n	8007e8c <C25519keyExchange.part.50+0x2d8>
 8008090:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8008092:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8008094:	001a      	movs	r2, r3
 8008096:	404a      	eors	r2, r1
 8008098:	4022      	ands	r2, r4
 800809a:	4053      	eors	r3, r2
 800809c:	935c      	str	r3, [sp, #368]	; 0x170
 800809e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 80080a0:	4051      	eors	r1, r2
 80080a2:	001a      	movs	r2, r3
 80080a4:	914c      	str	r1, [sp, #304]	; 0x130
 80080a6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80080a8:	404a      	eors	r2, r1
 80080aa:	4022      	ands	r2, r4
 80080ac:	4053      	eors	r3, r2
 80080ae:	935d      	str	r3, [sp, #372]	; 0x174
 80080b0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 80080b2:	4051      	eors	r1, r2
 80080b4:	001a      	movs	r2, r3
 80080b6:	914d      	str	r1, [sp, #308]	; 0x134
 80080b8:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80080ba:	404a      	eors	r2, r1
 80080bc:	4022      	ands	r2, r4
 80080be:	4053      	eors	r3, r2
 80080c0:	935e      	str	r3, [sp, #376]	; 0x178
 80080c2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 80080c4:	4051      	eors	r1, r2
 80080c6:	001a      	movs	r2, r3
 80080c8:	914e      	str	r1, [sp, #312]	; 0x138
 80080ca:	992f      	ldr	r1, [sp, #188]	; 0xbc
 80080cc:	404a      	eors	r2, r1
 80080ce:	4022      	ands	r2, r4
 80080d0:	4053      	eors	r3, r2
 80080d2:	935f      	str	r3, [sp, #380]	; 0x17c
 80080d4:	9b40      	ldr	r3, [sp, #256]	; 0x100
 80080d6:	4051      	eors	r1, r2
 80080d8:	001a      	movs	r2, r3
 80080da:	914f      	str	r1, [sp, #316]	; 0x13c
 80080dc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80080de:	404a      	eors	r2, r1
 80080e0:	4022      	ands	r2, r4
 80080e2:	4053      	eors	r3, r2
 80080e4:	9360      	str	r3, [sp, #384]	; 0x180
 80080e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080e8:	4051      	eors	r1, r2
 80080ea:	001a      	movs	r2, r3
 80080ec:	9150      	str	r1, [sp, #320]	; 0x140
 80080ee:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80080f0:	404a      	eors	r2, r1
 80080f2:	4022      	ands	r2, r4
 80080f4:	4053      	eors	r3, r2
 80080f6:	9361      	str	r3, [sp, #388]	; 0x184
 80080f8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80080fa:	4051      	eors	r1, r2
 80080fc:	001a      	movs	r2, r3
 80080fe:	9151      	str	r1, [sp, #324]	; 0x144
 8008100:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8008102:	404a      	eors	r2, r1
 8008104:	4022      	ands	r2, r4
 8008106:	4053      	eors	r3, r2
 8008108:	9362      	str	r3, [sp, #392]	; 0x188
 800810a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800810c:	4051      	eors	r1, r2
 800810e:	001a      	movs	r2, r3
 8008110:	9152      	str	r1, [sp, #328]	; 0x148
 8008112:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8008114:	404a      	eors	r2, r1
 8008116:	4022      	ands	r2, r4
 8008118:	4051      	eors	r1, r2
 800811a:	4053      	eors	r3, r2
 800811c:	9153      	str	r1, [sp, #332]	; 0x14c
 800811e:	9363      	str	r3, [sp, #396]	; 0x18c
 8008120:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8008122:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8008124:	001a      	movs	r2, r3
 8008126:	404a      	eors	r2, r1
 8008128:	4022      	ands	r2, r4
 800812a:	4053      	eors	r3, r2
 800812c:	9364      	str	r3, [sp, #400]	; 0x190
 800812e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008130:	4051      	eors	r1, r2
 8008132:	001a      	movs	r2, r3
 8008134:	9154      	str	r1, [sp, #336]	; 0x150
 8008136:	9935      	ldr	r1, [sp, #212]	; 0xd4
 8008138:	404a      	eors	r2, r1
 800813a:	4022      	ands	r2, r4
 800813c:	4053      	eors	r3, r2
 800813e:	9365      	str	r3, [sp, #404]	; 0x194
 8008140:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8008142:	4051      	eors	r1, r2
 8008144:	001a      	movs	r2, r3
 8008146:	9155      	str	r1, [sp, #340]	; 0x154
 8008148:	9936      	ldr	r1, [sp, #216]	; 0xd8
 800814a:	404a      	eors	r2, r1
 800814c:	4022      	ands	r2, r4
 800814e:	4053      	eors	r3, r2
 8008150:	9366      	str	r3, [sp, #408]	; 0x198
 8008152:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008154:	4051      	eors	r1, r2
 8008156:	001a      	movs	r2, r3
 8008158:	9156      	str	r1, [sp, #344]	; 0x158
 800815a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800815c:	404a      	eors	r2, r1
 800815e:	4022      	ands	r2, r4
 8008160:	4053      	eors	r3, r2
 8008162:	9367      	str	r3, [sp, #412]	; 0x19c
 8008164:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8008166:	4051      	eors	r1, r2
 8008168:	001a      	movs	r2, r3
 800816a:	9157      	str	r1, [sp, #348]	; 0x15c
 800816c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 800816e:	404a      	eors	r2, r1
 8008170:	4022      	ands	r2, r4
 8008172:	4053      	eors	r3, r2
 8008174:	9368      	str	r3, [sp, #416]	; 0x1a0
 8008176:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8008178:	4051      	eors	r1, r2
 800817a:	001a      	movs	r2, r3
 800817c:	9158      	str	r1, [sp, #352]	; 0x160
 800817e:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8008180:	404a      	eors	r2, r1
 8008182:	4022      	ands	r2, r4
 8008184:	4053      	eors	r3, r2
 8008186:	9369      	str	r3, [sp, #420]	; 0x1a4
 8008188:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800818a:	4051      	eors	r1, r2
 800818c:	001a      	movs	r2, r3
 800818e:	9159      	str	r1, [sp, #356]	; 0x164
 8008190:	993a      	ldr	r1, [sp, #232]	; 0xe8
 8008192:	404a      	eors	r2, r1
 8008194:	4022      	ands	r2, r4
 8008196:	4053      	eors	r3, r2
 8008198:	936a      	str	r3, [sp, #424]	; 0x1a8
 800819a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 800819c:	4051      	eors	r1, r2
 800819e:	001a      	movs	r2, r3
 80081a0:	915a      	str	r1, [sp, #360]	; 0x168
 80081a2:	993b      	ldr	r1, [sp, #236]	; 0xec
 80081a4:	404a      	eors	r2, r1
 80081a6:	4022      	ands	r2, r4
 80081a8:	4051      	eors	r1, r2
 80081aa:	4053      	eors	r3, r2
 80081ac:	915b      	str	r1, [sp, #364]	; 0x16c
 80081ae:	936b      	str	r3, [sp, #428]	; 0x1ac
 80081b0:	e5c8      	b.n	8007d44 <C25519keyExchange.part.50+0x190>
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	40023000 	.word	0x40023000
 80081b8:	fffffc40 	.word	0xfffffc40
 80081bc:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 80081be:	997c      	ldr	r1, [sp, #496]	; 0x1f0
 80081c0:	001a      	movs	r2, r3
 80081c2:	404a      	eors	r2, r1
 80081c4:	4022      	ands	r2, r4
 80081c6:	4053      	eors	r3, r2
 80081c8:	932c      	str	r3, [sp, #176]	; 0xb0
 80081ca:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
 80081cc:	4051      	eors	r1, r2
 80081ce:	001a      	movs	r2, r3
 80081d0:	913c      	str	r1, [sp, #240]	; 0xf0
 80081d2:	997d      	ldr	r1, [sp, #500]	; 0x1f4
 80081d4:	404a      	eors	r2, r1
 80081d6:	4022      	ands	r2, r4
 80081d8:	4053      	eors	r3, r2
 80081da:	932d      	str	r3, [sp, #180]	; 0xb4
 80081dc:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 80081de:	4051      	eors	r1, r2
 80081e0:	001a      	movs	r2, r3
 80081e2:	913d      	str	r1, [sp, #244]	; 0xf4
 80081e4:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 80081e6:	404a      	eors	r2, r1
 80081e8:	4022      	ands	r2, r4
 80081ea:	4053      	eors	r3, r2
 80081ec:	932e      	str	r3, [sp, #184]	; 0xb8
 80081ee:	9b6f      	ldr	r3, [sp, #444]	; 0x1bc
 80081f0:	4051      	eors	r1, r2
 80081f2:	001a      	movs	r2, r3
 80081f4:	913e      	str	r1, [sp, #248]	; 0xf8
 80081f6:	997f      	ldr	r1, [sp, #508]	; 0x1fc
 80081f8:	404a      	eors	r2, r1
 80081fa:	4022      	ands	r2, r4
 80081fc:	4053      	eors	r3, r2
 80081fe:	932f      	str	r3, [sp, #188]	; 0xbc
 8008200:	9b70      	ldr	r3, [sp, #448]	; 0x1c0
 8008202:	4051      	eors	r1, r2
 8008204:	001a      	movs	r2, r3
 8008206:	913f      	str	r1, [sp, #252]	; 0xfc
 8008208:	9980      	ldr	r1, [sp, #512]	; 0x200
 800820a:	404a      	eors	r2, r1
 800820c:	4022      	ands	r2, r4
 800820e:	4053      	eors	r3, r2
 8008210:	9330      	str	r3, [sp, #192]	; 0xc0
 8008212:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
 8008214:	4051      	eors	r1, r2
 8008216:	001a      	movs	r2, r3
 8008218:	9140      	str	r1, [sp, #256]	; 0x100
 800821a:	9981      	ldr	r1, [sp, #516]	; 0x204
 800821c:	404a      	eors	r2, r1
 800821e:	4022      	ands	r2, r4
 8008220:	4053      	eors	r3, r2
 8008222:	9331      	str	r3, [sp, #196]	; 0xc4
 8008224:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
 8008226:	4051      	eors	r1, r2
 8008228:	001a      	movs	r2, r3
 800822a:	9141      	str	r1, [sp, #260]	; 0x104
 800822c:	9982      	ldr	r1, [sp, #520]	; 0x208
 800822e:	404a      	eors	r2, r1
 8008230:	4022      	ands	r2, r4
 8008232:	4053      	eors	r3, r2
 8008234:	9332      	str	r3, [sp, #200]	; 0xc8
 8008236:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 8008238:	4051      	eors	r1, r2
 800823a:	001a      	movs	r2, r3
 800823c:	9142      	str	r1, [sp, #264]	; 0x108
 800823e:	9983      	ldr	r1, [sp, #524]	; 0x20c
 8008240:	404a      	eors	r2, r1
 8008242:	4022      	ands	r2, r4
 8008244:	4051      	eors	r1, r2
 8008246:	4053      	eors	r3, r2
 8008248:	9143      	str	r1, [sp, #268]	; 0x10c
 800824a:	9333      	str	r3, [sp, #204]	; 0xcc
 800824c:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
 800824e:	9984      	ldr	r1, [sp, #528]	; 0x210
 8008250:	001a      	movs	r2, r3
 8008252:	404a      	eors	r2, r1
 8008254:	4022      	ands	r2, r4
 8008256:	4053      	eors	r3, r2
 8008258:	9334      	str	r3, [sp, #208]	; 0xd0
 800825a:	9b75      	ldr	r3, [sp, #468]	; 0x1d4
 800825c:	4051      	eors	r1, r2
 800825e:	001a      	movs	r2, r3
 8008260:	9144      	str	r1, [sp, #272]	; 0x110
 8008262:	9985      	ldr	r1, [sp, #532]	; 0x214
 8008264:	404a      	eors	r2, r1
 8008266:	4022      	ands	r2, r4
 8008268:	4053      	eors	r3, r2
 800826a:	9335      	str	r3, [sp, #212]	; 0xd4
 800826c:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 800826e:	4051      	eors	r1, r2
 8008270:	001a      	movs	r2, r3
 8008272:	9145      	str	r1, [sp, #276]	; 0x114
 8008274:	9986      	ldr	r1, [sp, #536]	; 0x218
 8008276:	404a      	eors	r2, r1
 8008278:	4022      	ands	r2, r4
 800827a:	4053      	eors	r3, r2
 800827c:	9336      	str	r3, [sp, #216]	; 0xd8
 800827e:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
 8008280:	4051      	eors	r1, r2
 8008282:	001a      	movs	r2, r3
 8008284:	9146      	str	r1, [sp, #280]	; 0x118
 8008286:	9987      	ldr	r1, [sp, #540]	; 0x21c
 8008288:	404a      	eors	r2, r1
 800828a:	4022      	ands	r2, r4
 800828c:	4053      	eors	r3, r2
 800828e:	9337      	str	r3, [sp, #220]	; 0xdc
 8008290:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8008292:	4051      	eors	r1, r2
 8008294:	001a      	movs	r2, r3
 8008296:	9147      	str	r1, [sp, #284]	; 0x11c
 8008298:	9988      	ldr	r1, [sp, #544]	; 0x220
 800829a:	404a      	eors	r2, r1
 800829c:	4022      	ands	r2, r4
 800829e:	4053      	eors	r3, r2
 80082a0:	9338      	str	r3, [sp, #224]	; 0xe0
 80082a2:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 80082a4:	4051      	eors	r1, r2
 80082a6:	001a      	movs	r2, r3
 80082a8:	9148      	str	r1, [sp, #288]	; 0x120
 80082aa:	9989      	ldr	r1, [sp, #548]	; 0x224
 80082ac:	404a      	eors	r2, r1
 80082ae:	4022      	ands	r2, r4
 80082b0:	4053      	eors	r3, r2
 80082b2:	9339      	str	r3, [sp, #228]	; 0xe4
 80082b4:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 80082b6:	4051      	eors	r1, r2
 80082b8:	001a      	movs	r2, r3
 80082ba:	9149      	str	r1, [sp, #292]	; 0x124
 80082bc:	998a      	ldr	r1, [sp, #552]	; 0x228
 80082be:	404a      	eors	r2, r1
 80082c0:	4022      	ands	r2, r4
 80082c2:	4053      	eors	r3, r2
 80082c4:	933a      	str	r3, [sp, #232]	; 0xe8
 80082c6:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80082c8:	4051      	eors	r1, r2
 80082ca:	914a      	str	r1, [sp, #296]	; 0x128
 80082cc:	0019      	movs	r1, r3
 80082ce:	9a8b      	ldr	r2, [sp, #556]	; 0x22c
 80082d0:	4051      	eors	r1, r2
 80082d2:	400c      	ands	r4, r1
 80082d4:	4062      	eors	r2, r4
 80082d6:	405c      	eors	r4, r3
 80082d8:	924b      	str	r2, [sp, #300]	; 0x12c
 80082da:	943b      	str	r4, [sp, #236]	; 0xec
 80082dc:	3d01      	subs	r5, #1
 80082de:	d300      	bcc.n	80082e2 <C25519keyExchange.part.50+0x72e>
 80082e0:	e624      	b.n	8007f2c <C25519keyExchange.part.50+0x378>
 80082e2:	a93c      	add	r1, sp, #240	; 0xf0
 80082e4:	a8dc      	add	r0, sp, #880	; 0x370
 80082e6:	f7fe fda7 	bl	8006e38 <fe25519_copy>
 80082ea:	a944      	add	r1, sp, #272	; 0x110
 80082ec:	a8e4      	add	r0, sp, #912	; 0x390
 80082ee:	f7fe fda3 	bl	8006e38 <fe25519_copy>
 80082f2:	a9e4      	add	r1, sp, #912	; 0x390
 80082f4:	0008      	movs	r0, r1
 80082f6:	f7ff f9ed 	bl	80076d4 <fe25519_invert>
 80082fa:	aae4      	add	r2, sp, #912	; 0x390
 80082fc:	a9dc      	add	r1, sp, #880	; 0x370
 80082fe:	a8ec      	add	r0, sp, #944	; 0x3b0
 8008300:	f7ff f82e 	bl	8007360 <fe25519_mul>
 8008304:	4648      	mov	r0, r9
 8008306:	a9ec      	add	r1, sp, #944	; 0x3b0
 8008308:	f7fe ffda 	bl	80072c0 <fe25519_pack>
 800830c:	2000      	movs	r0, #0
 800830e:	23f5      	movs	r3, #245	; 0xf5
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	449d      	add	sp, r3
 8008314:	bc0c      	pop	{r2, r3}
 8008316:	4690      	mov	r8, r2
 8008318:	4699      	mov	r9, r3
 800831a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800831c <C25519keyGen>:
 800831c:	b530      	push	{r4, r5, lr}
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	2220      	movs	r2, #32
 8008322:	0004      	movs	r4, r0
 8008324:	000d      	movs	r5, r1
 8008326:	4668      	mov	r0, sp
 8008328:	2100      	movs	r1, #0
 800832a:	f000 f8a0 	bl	800846e <memset>
 800832e:	2309      	movs	r3, #9
 8008330:	466a      	mov	r2, sp
 8008332:	7013      	strb	r3, [r2, #0]
 8008334:	2c00      	cmp	r4, #0
 8008336:	d013      	beq.n	8008360 <C25519keyGen+0x44>
 8008338:	2d00      	cmp	r5, #0
 800833a:	d011      	beq.n	8008360 <C25519keyGen+0x44>
 800833c:	2207      	movs	r2, #7
 800833e:	7823      	ldrb	r3, [r4, #0]
 8008340:	0021      	movs	r1, r4
 8008342:	4393      	bics	r3, r2
 8008344:	7023      	strb	r3, [r4, #0]
 8008346:	237f      	movs	r3, #127	; 0x7f
 8008348:	7fe2      	ldrb	r2, [r4, #31]
 800834a:	0028      	movs	r0, r5
 800834c:	4013      	ands	r3, r2
 800834e:	2240      	movs	r2, #64	; 0x40
 8008350:	4313      	orrs	r3, r2
 8008352:	77e3      	strb	r3, [r4, #31]
 8008354:	466a      	mov	r2, sp
 8008356:	f7ff fc2d 	bl	8007bb4 <C25519keyExchange.part.50>
 800835a:	2000      	movs	r0, #0
 800835c:	b009      	add	sp, #36	; 0x24
 800835e:	bd30      	pop	{r4, r5, pc}
 8008360:	4800      	ldr	r0, [pc, #0]	; (8008364 <C25519keyGen+0x48>)
 8008362:	e7fb      	b.n	800835c <C25519keyGen+0x40>
 8008364:	000015e4 	.word	0x000015e4

08008368 <C25519keyExchange>:
 8008368:	b510      	push	{r4, lr}
 800836a:	2900      	cmp	r1, #0
 800836c:	d006      	beq.n	800837c <C25519keyExchange+0x14>
 800836e:	2a00      	cmp	r2, #0
 8008370:	d004      	beq.n	800837c <C25519keyExchange+0x14>
 8008372:	2800      	cmp	r0, #0
 8008374:	d002      	beq.n	800837c <C25519keyExchange+0x14>
 8008376:	f7ff fc1d 	bl	8007bb4 <C25519keyExchange.part.50>
 800837a:	bd10      	pop	{r4, pc}
 800837c:	4800      	ldr	r0, [pc, #0]	; (8008380 <C25519keyExchange+0x18>)
 800837e:	e7fc      	b.n	800837a <C25519keyExchange+0x12>
 8008380:	000015e4 	.word	0x000015e4

08008384 <__assert_func>:
 8008384:	b530      	push	{r4, r5, lr}
 8008386:	001c      	movs	r4, r3
 8008388:	4b09      	ldr	r3, [pc, #36]	; (80083b0 <__assert_func+0x2c>)
 800838a:	0005      	movs	r5, r0
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	b085      	sub	sp, #20
 8008390:	68d8      	ldr	r0, [r3, #12]
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <__assert_func+0x30>)
 8008394:	2a00      	cmp	r2, #0
 8008396:	d101      	bne.n	800839c <__assert_func+0x18>
 8008398:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <__assert_func+0x34>)
 800839a:	001a      	movs	r2, r3
 800839c:	9202      	str	r2, [sp, #8]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	9100      	str	r1, [sp, #0]
 80083a2:	002b      	movs	r3, r5
 80083a4:	0022      	movs	r2, r4
 80083a6:	4905      	ldr	r1, [pc, #20]	; (80083bc <__assert_func+0x38>)
 80083a8:	f000 f81a 	bl	80083e0 <fiprintf>
 80083ac:	f000 fcb0 	bl	8008d10 <abort>
 80083b0:	2000000c 	.word	0x2000000c
 80083b4:	08009578 	.word	0x08009578
 80083b8:	080095b3 	.word	0x080095b3
 80083bc:	08009585 	.word	0x08009585

080083c0 <calloc>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	4b03      	ldr	r3, [pc, #12]	; (80083d0 <calloc+0x10>)
 80083c4:	000a      	movs	r2, r1
 80083c6:	0001      	movs	r1, r0
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f000 f858 	bl	800847e <_calloc_r>
 80083ce:	bd10      	pop	{r4, pc}
 80083d0:	2000000c 	.word	0x2000000c

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	46c0      	nop			; (mov r8, r8)
 80083dc:	2000000c 	.word	0x2000000c

080083e0 <fiprintf>:
 80083e0:	b40e      	push	{r1, r2, r3}
 80083e2:	b503      	push	{r0, r1, lr}
 80083e4:	0001      	movs	r1, r0
 80083e6:	ab03      	add	r3, sp, #12
 80083e8:	4804      	ldr	r0, [pc, #16]	; (80083fc <fiprintf+0x1c>)
 80083ea:	cb04      	ldmia	r3!, {r2}
 80083ec:	6800      	ldr	r0, [r0, #0]
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	f000 f924 	bl	800863c <_vfiprintf_r>
 80083f4:	b002      	add	sp, #8
 80083f6:	bc08      	pop	{r3}
 80083f8:	b003      	add	sp, #12
 80083fa:	4718      	bx	r3
 80083fc:	2000000c 	.word	0x2000000c

08008400 <__libc_init_array>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	2600      	movs	r6, #0
 8008404:	4d0c      	ldr	r5, [pc, #48]	; (8008438 <__libc_init_array+0x38>)
 8008406:	4c0d      	ldr	r4, [pc, #52]	; (800843c <__libc_init_array+0x3c>)
 8008408:	1b64      	subs	r4, r4, r5
 800840a:	10a4      	asrs	r4, r4, #2
 800840c:	42a6      	cmp	r6, r4
 800840e:	d109      	bne.n	8008424 <__libc_init_array+0x24>
 8008410:	2600      	movs	r6, #0
 8008412:	f000 ff93 	bl	800933c <_init>
 8008416:	4d0a      	ldr	r5, [pc, #40]	; (8008440 <__libc_init_array+0x40>)
 8008418:	4c0a      	ldr	r4, [pc, #40]	; (8008444 <__libc_init_array+0x44>)
 800841a:	1b64      	subs	r4, r4, r5
 800841c:	10a4      	asrs	r4, r4, #2
 800841e:	42a6      	cmp	r6, r4
 8008420:	d105      	bne.n	800842e <__libc_init_array+0x2e>
 8008422:	bd70      	pop	{r4, r5, r6, pc}
 8008424:	00b3      	lsls	r3, r6, #2
 8008426:	58eb      	ldr	r3, [r5, r3]
 8008428:	4798      	blx	r3
 800842a:	3601      	adds	r6, #1
 800842c:	e7ee      	b.n	800840c <__libc_init_array+0xc>
 800842e:	00b3      	lsls	r3, r6, #2
 8008430:	58eb      	ldr	r3, [r5, r3]
 8008432:	4798      	blx	r3
 8008434:	3601      	adds	r6, #1
 8008436:	e7f2      	b.n	800841e <__libc_init_array+0x1e>
 8008438:	0800964c 	.word	0x0800964c
 800843c:	0800964c 	.word	0x0800964c
 8008440:	0800964c 	.word	0x0800964c
 8008444:	08009650 	.word	0x08009650

08008448 <free>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4b03      	ldr	r3, [pc, #12]	; (8008458 <free+0x10>)
 800844c:	0001      	movs	r1, r0
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	f000 f824 	bl	800849c <_free_r>
 8008454:	bd10      	pop	{r4, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	2000000c 	.word	0x2000000c

0800845c <memcpy>:
 800845c:	2300      	movs	r3, #0
 800845e:	b510      	push	{r4, lr}
 8008460:	429a      	cmp	r2, r3
 8008462:	d100      	bne.n	8008466 <memcpy+0xa>
 8008464:	bd10      	pop	{r4, pc}
 8008466:	5ccc      	ldrb	r4, [r1, r3]
 8008468:	54c4      	strb	r4, [r0, r3]
 800846a:	3301      	adds	r3, #1
 800846c:	e7f8      	b.n	8008460 <memcpy+0x4>

0800846e <memset>:
 800846e:	0003      	movs	r3, r0
 8008470:	1812      	adds	r2, r2, r0
 8008472:	4293      	cmp	r3, r2
 8008474:	d100      	bne.n	8008478 <memset+0xa>
 8008476:	4770      	bx	lr
 8008478:	7019      	strb	r1, [r3, #0]
 800847a:	3301      	adds	r3, #1
 800847c:	e7f9      	b.n	8008472 <memset+0x4>

0800847e <_calloc_r>:
 800847e:	434a      	muls	r2, r1
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	0011      	movs	r1, r2
 8008484:	0014      	movs	r4, r2
 8008486:	f000 f853 	bl	8008530 <_malloc_r>
 800848a:	1e05      	subs	r5, r0, #0
 800848c:	d003      	beq.n	8008496 <_calloc_r+0x18>
 800848e:	0022      	movs	r2, r4
 8008490:	2100      	movs	r1, #0
 8008492:	f7ff ffec 	bl	800846e <memset>
 8008496:	0028      	movs	r0, r5
 8008498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800849c <_free_r>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	0005      	movs	r5, r0
 80084a0:	2900      	cmp	r1, #0
 80084a2:	d010      	beq.n	80084c6 <_free_r+0x2a>
 80084a4:	1f0c      	subs	r4, r1, #4
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da00      	bge.n	80084ae <_free_r+0x12>
 80084ac:	18e4      	adds	r4, r4, r3
 80084ae:	0028      	movs	r0, r5
 80084b0:	f000 fe39 	bl	8009126 <__malloc_lock>
 80084b4:	4a1d      	ldr	r2, [pc, #116]	; (800852c <_free_r+0x90>)
 80084b6:	6813      	ldr	r3, [r2, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d105      	bne.n	80084c8 <_free_r+0x2c>
 80084bc:	6063      	str	r3, [r4, #4]
 80084be:	6014      	str	r4, [r2, #0]
 80084c0:	0028      	movs	r0, r5
 80084c2:	f000 fe31 	bl	8009128 <__malloc_unlock>
 80084c6:	bd70      	pop	{r4, r5, r6, pc}
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d909      	bls.n	80084e0 <_free_r+0x44>
 80084cc:	6821      	ldr	r1, [r4, #0]
 80084ce:	1860      	adds	r0, r4, r1
 80084d0:	4283      	cmp	r3, r0
 80084d2:	d1f3      	bne.n	80084bc <_free_r+0x20>
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	1841      	adds	r1, r0, r1
 80084da:	6021      	str	r1, [r4, #0]
 80084dc:	e7ee      	b.n	80084bc <_free_r+0x20>
 80084de:	0013      	movs	r3, r2
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d001      	beq.n	80084ea <_free_r+0x4e>
 80084e6:	42a2      	cmp	r2, r4
 80084e8:	d9f9      	bls.n	80084de <_free_r+0x42>
 80084ea:	6819      	ldr	r1, [r3, #0]
 80084ec:	1858      	adds	r0, r3, r1
 80084ee:	42a0      	cmp	r0, r4
 80084f0:	d10b      	bne.n	800850a <_free_r+0x6e>
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1809      	adds	r1, r1, r0
 80084f6:	1858      	adds	r0, r3, r1
 80084f8:	6019      	str	r1, [r3, #0]
 80084fa:	4282      	cmp	r2, r0
 80084fc:	d1e0      	bne.n	80084c0 <_free_r+0x24>
 80084fe:	6810      	ldr	r0, [r2, #0]
 8008500:	6852      	ldr	r2, [r2, #4]
 8008502:	1841      	adds	r1, r0, r1
 8008504:	6019      	str	r1, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	e7da      	b.n	80084c0 <_free_r+0x24>
 800850a:	42a0      	cmp	r0, r4
 800850c:	d902      	bls.n	8008514 <_free_r+0x78>
 800850e:	230c      	movs	r3, #12
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	e7d5      	b.n	80084c0 <_free_r+0x24>
 8008514:	6821      	ldr	r1, [r4, #0]
 8008516:	1860      	adds	r0, r4, r1
 8008518:	4282      	cmp	r2, r0
 800851a:	d103      	bne.n	8008524 <_free_r+0x88>
 800851c:	6810      	ldr	r0, [r2, #0]
 800851e:	6852      	ldr	r2, [r2, #4]
 8008520:	1841      	adds	r1, r0, r1
 8008522:	6021      	str	r1, [r4, #0]
 8008524:	6062      	str	r2, [r4, #4]
 8008526:	605c      	str	r4, [r3, #4]
 8008528:	e7ca      	b.n	80084c0 <_free_r+0x24>
 800852a:	46c0      	nop			; (mov r8, r8)
 800852c:	20000544 	.word	0x20000544

08008530 <_malloc_r>:
 8008530:	2303      	movs	r3, #3
 8008532:	b570      	push	{r4, r5, r6, lr}
 8008534:	1ccd      	adds	r5, r1, #3
 8008536:	439d      	bics	r5, r3
 8008538:	3508      	adds	r5, #8
 800853a:	0006      	movs	r6, r0
 800853c:	2d0c      	cmp	r5, #12
 800853e:	d21e      	bcs.n	800857e <_malloc_r+0x4e>
 8008540:	250c      	movs	r5, #12
 8008542:	42a9      	cmp	r1, r5
 8008544:	d81d      	bhi.n	8008582 <_malloc_r+0x52>
 8008546:	0030      	movs	r0, r6
 8008548:	f000 fded 	bl	8009126 <__malloc_lock>
 800854c:	4a25      	ldr	r2, [pc, #148]	; (80085e4 <_malloc_r+0xb4>)
 800854e:	6814      	ldr	r4, [r2, #0]
 8008550:	0021      	movs	r1, r4
 8008552:	2900      	cmp	r1, #0
 8008554:	d119      	bne.n	800858a <_malloc_r+0x5a>
 8008556:	4c24      	ldr	r4, [pc, #144]	; (80085e8 <_malloc_r+0xb8>)
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d103      	bne.n	8008566 <_malloc_r+0x36>
 800855e:	0030      	movs	r0, r6
 8008560:	f000 faf8 	bl	8008b54 <_sbrk_r>
 8008564:	6020      	str	r0, [r4, #0]
 8008566:	0029      	movs	r1, r5
 8008568:	0030      	movs	r0, r6
 800856a:	f000 faf3 	bl	8008b54 <_sbrk_r>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d12b      	bne.n	80085ca <_malloc_r+0x9a>
 8008572:	230c      	movs	r3, #12
 8008574:	0030      	movs	r0, r6
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	f000 fdd6 	bl	8009128 <__malloc_unlock>
 800857c:	e003      	b.n	8008586 <_malloc_r+0x56>
 800857e:	2d00      	cmp	r5, #0
 8008580:	dadf      	bge.n	8008542 <_malloc_r+0x12>
 8008582:	230c      	movs	r3, #12
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	2000      	movs	r0, #0
 8008588:	bd70      	pop	{r4, r5, r6, pc}
 800858a:	680b      	ldr	r3, [r1, #0]
 800858c:	1b5b      	subs	r3, r3, r5
 800858e:	d419      	bmi.n	80085c4 <_malloc_r+0x94>
 8008590:	2b0b      	cmp	r3, #11
 8008592:	d903      	bls.n	800859c <_malloc_r+0x6c>
 8008594:	600b      	str	r3, [r1, #0]
 8008596:	18cc      	adds	r4, r1, r3
 8008598:	6025      	str	r5, [r4, #0]
 800859a:	e003      	b.n	80085a4 <_malloc_r+0x74>
 800859c:	684b      	ldr	r3, [r1, #4]
 800859e:	428c      	cmp	r4, r1
 80085a0:	d10d      	bne.n	80085be <_malloc_r+0x8e>
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	0030      	movs	r0, r6
 80085a6:	f000 fdbf 	bl	8009128 <__malloc_unlock>
 80085aa:	0020      	movs	r0, r4
 80085ac:	2207      	movs	r2, #7
 80085ae:	300b      	adds	r0, #11
 80085b0:	1d23      	adds	r3, r4, #4
 80085b2:	4390      	bics	r0, r2
 80085b4:	1ac3      	subs	r3, r0, r3
 80085b6:	d0e7      	beq.n	8008588 <_malloc_r+0x58>
 80085b8:	425a      	negs	r2, r3
 80085ba:	50e2      	str	r2, [r4, r3]
 80085bc:	e7e4      	b.n	8008588 <_malloc_r+0x58>
 80085be:	6063      	str	r3, [r4, #4]
 80085c0:	000c      	movs	r4, r1
 80085c2:	e7ef      	b.n	80085a4 <_malloc_r+0x74>
 80085c4:	000c      	movs	r4, r1
 80085c6:	6849      	ldr	r1, [r1, #4]
 80085c8:	e7c3      	b.n	8008552 <_malloc_r+0x22>
 80085ca:	2303      	movs	r3, #3
 80085cc:	1cc4      	adds	r4, r0, #3
 80085ce:	439c      	bics	r4, r3
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d0e1      	beq.n	8008598 <_malloc_r+0x68>
 80085d4:	1a21      	subs	r1, r4, r0
 80085d6:	0030      	movs	r0, r6
 80085d8:	f000 fabc 	bl	8008b54 <_sbrk_r>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d1db      	bne.n	8008598 <_malloc_r+0x68>
 80085e0:	e7c7      	b.n	8008572 <_malloc_r+0x42>
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	20000544 	.word	0x20000544
 80085e8:	20000548 	.word	0x20000548

080085ec <__sfputc_r>:
 80085ec:	6893      	ldr	r3, [r2, #8]
 80085ee:	b510      	push	{r4, lr}
 80085f0:	3b01      	subs	r3, #1
 80085f2:	6093      	str	r3, [r2, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	da04      	bge.n	8008602 <__sfputc_r+0x16>
 80085f8:	6994      	ldr	r4, [r2, #24]
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	db07      	blt.n	800860e <__sfputc_r+0x22>
 80085fe:	290a      	cmp	r1, #10
 8008600:	d005      	beq.n	800860e <__sfputc_r+0x22>
 8008602:	6813      	ldr	r3, [r2, #0]
 8008604:	1c58      	adds	r0, r3, #1
 8008606:	6010      	str	r0, [r2, #0]
 8008608:	7019      	strb	r1, [r3, #0]
 800860a:	0008      	movs	r0, r1
 800860c:	bd10      	pop	{r4, pc}
 800860e:	f000 fab3 	bl	8008b78 <__swbuf_r>
 8008612:	0001      	movs	r1, r0
 8008614:	e7f9      	b.n	800860a <__sfputc_r+0x1e>

08008616 <__sfputs_r>:
 8008616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008618:	0006      	movs	r6, r0
 800861a:	000f      	movs	r7, r1
 800861c:	0014      	movs	r4, r2
 800861e:	18d5      	adds	r5, r2, r3
 8008620:	42ac      	cmp	r4, r5
 8008622:	d101      	bne.n	8008628 <__sfputs_r+0x12>
 8008624:	2000      	movs	r0, #0
 8008626:	e007      	b.n	8008638 <__sfputs_r+0x22>
 8008628:	7821      	ldrb	r1, [r4, #0]
 800862a:	003a      	movs	r2, r7
 800862c:	0030      	movs	r0, r6
 800862e:	f7ff ffdd 	bl	80085ec <__sfputc_r>
 8008632:	3401      	adds	r4, #1
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d1f3      	bne.n	8008620 <__sfputs_r+0xa>
 8008638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800863c <_vfiprintf_r>:
 800863c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863e:	b0a1      	sub	sp, #132	; 0x84
 8008640:	9003      	str	r0, [sp, #12]
 8008642:	000f      	movs	r7, r1
 8008644:	0016      	movs	r6, r2
 8008646:	001d      	movs	r5, r3
 8008648:	2800      	cmp	r0, #0
 800864a:	d005      	beq.n	8008658 <_vfiprintf_r+0x1c>
 800864c:	6983      	ldr	r3, [r0, #24]
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d101      	bne.n	8008658 <_vfiprintf_r+0x1c>
 8008654:	f000 fc5c 	bl	8008f10 <__sinit>
 8008658:	4b7b      	ldr	r3, [pc, #492]	; (8008848 <_vfiprintf_r+0x20c>)
 800865a:	429f      	cmp	r7, r3
 800865c:	d15c      	bne.n	8008718 <_vfiprintf_r+0xdc>
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	685f      	ldr	r7, [r3, #4]
 8008662:	89bb      	ldrh	r3, [r7, #12]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	d563      	bpl.n	8008730 <_vfiprintf_r+0xf4>
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d060      	beq.n	8008730 <_vfiprintf_r+0xf4>
 800866e:	2300      	movs	r3, #0
 8008670:	ac08      	add	r4, sp, #32
 8008672:	6163      	str	r3, [r4, #20]
 8008674:	3320      	adds	r3, #32
 8008676:	7663      	strb	r3, [r4, #25]
 8008678:	3310      	adds	r3, #16
 800867a:	76a3      	strb	r3, [r4, #26]
 800867c:	9507      	str	r5, [sp, #28]
 800867e:	0035      	movs	r5, r6
 8008680:	782b      	ldrb	r3, [r5, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <_vfiprintf_r+0x4e>
 8008686:	2b25      	cmp	r3, #37	; 0x25
 8008688:	d15c      	bne.n	8008744 <_vfiprintf_r+0x108>
 800868a:	1bab      	subs	r3, r5, r6
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	d00c      	beq.n	80086aa <_vfiprintf_r+0x6e>
 8008690:	0032      	movs	r2, r6
 8008692:	0039      	movs	r1, r7
 8008694:	9803      	ldr	r0, [sp, #12]
 8008696:	f7ff ffbe 	bl	8008616 <__sfputs_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d100      	bne.n	80086a0 <_vfiprintf_r+0x64>
 800869e:	e0c4      	b.n	800882a <_vfiprintf_r+0x1ee>
 80086a0:	6962      	ldr	r2, [r4, #20]
 80086a2:	9b05      	ldr	r3, [sp, #20]
 80086a4:	4694      	mov	ip, r2
 80086a6:	4463      	add	r3, ip
 80086a8:	6163      	str	r3, [r4, #20]
 80086aa:	782b      	ldrb	r3, [r5, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d100      	bne.n	80086b2 <_vfiprintf_r+0x76>
 80086b0:	e0bb      	b.n	800882a <_vfiprintf_r+0x1ee>
 80086b2:	2201      	movs	r2, #1
 80086b4:	2300      	movs	r3, #0
 80086b6:	4252      	negs	r2, r2
 80086b8:	6062      	str	r2, [r4, #4]
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	3254      	adds	r2, #84	; 0x54
 80086be:	1852      	adds	r2, r2, r1
 80086c0:	1c6e      	adds	r6, r5, #1
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	60e3      	str	r3, [r4, #12]
 80086c6:	60a3      	str	r3, [r4, #8]
 80086c8:	7013      	strb	r3, [r2, #0]
 80086ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80086cc:	7831      	ldrb	r1, [r6, #0]
 80086ce:	2205      	movs	r2, #5
 80086d0:	485e      	ldr	r0, [pc, #376]	; (800884c <_vfiprintf_r+0x210>)
 80086d2:	f000 fd1d 	bl	8009110 <memchr>
 80086d6:	1c75      	adds	r5, r6, #1
 80086d8:	2800      	cmp	r0, #0
 80086da:	d135      	bne.n	8008748 <_vfiprintf_r+0x10c>
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	06d3      	lsls	r3, r2, #27
 80086e0:	d504      	bpl.n	80086ec <_vfiprintf_r+0xb0>
 80086e2:	2353      	movs	r3, #83	; 0x53
 80086e4:	a904      	add	r1, sp, #16
 80086e6:	185b      	adds	r3, r3, r1
 80086e8:	2120      	movs	r1, #32
 80086ea:	7019      	strb	r1, [r3, #0]
 80086ec:	0713      	lsls	r3, r2, #28
 80086ee:	d504      	bpl.n	80086fa <_vfiprintf_r+0xbe>
 80086f0:	2353      	movs	r3, #83	; 0x53
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	185b      	adds	r3, r3, r1
 80086f6:	212b      	movs	r1, #43	; 0x2b
 80086f8:	7019      	strb	r1, [r3, #0]
 80086fa:	7833      	ldrb	r3, [r6, #0]
 80086fc:	2b2a      	cmp	r3, #42	; 0x2a
 80086fe:	d02c      	beq.n	800875a <_vfiprintf_r+0x11e>
 8008700:	0035      	movs	r5, r6
 8008702:	2100      	movs	r1, #0
 8008704:	200a      	movs	r0, #10
 8008706:	68e3      	ldr	r3, [r4, #12]
 8008708:	782a      	ldrb	r2, [r5, #0]
 800870a:	1c6e      	adds	r6, r5, #1
 800870c:	3a30      	subs	r2, #48	; 0x30
 800870e:	2a09      	cmp	r2, #9
 8008710:	d964      	bls.n	80087dc <_vfiprintf_r+0x1a0>
 8008712:	2900      	cmp	r1, #0
 8008714:	d02e      	beq.n	8008774 <_vfiprintf_r+0x138>
 8008716:	e026      	b.n	8008766 <_vfiprintf_r+0x12a>
 8008718:	4b4d      	ldr	r3, [pc, #308]	; (8008850 <_vfiprintf_r+0x214>)
 800871a:	429f      	cmp	r7, r3
 800871c:	d102      	bne.n	8008724 <_vfiprintf_r+0xe8>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	689f      	ldr	r7, [r3, #8]
 8008722:	e79e      	b.n	8008662 <_vfiprintf_r+0x26>
 8008724:	4b4b      	ldr	r3, [pc, #300]	; (8008854 <_vfiprintf_r+0x218>)
 8008726:	429f      	cmp	r7, r3
 8008728:	d19b      	bne.n	8008662 <_vfiprintf_r+0x26>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	68df      	ldr	r7, [r3, #12]
 800872e:	e798      	b.n	8008662 <_vfiprintf_r+0x26>
 8008730:	0039      	movs	r1, r7
 8008732:	9803      	ldr	r0, [sp, #12]
 8008734:	f000 fa76 	bl	8008c24 <__swsetup_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	d098      	beq.n	800866e <_vfiprintf_r+0x32>
 800873c:	2001      	movs	r0, #1
 800873e:	4240      	negs	r0, r0
 8008740:	b021      	add	sp, #132	; 0x84
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e79b      	b.n	8008680 <_vfiprintf_r+0x44>
 8008748:	4b40      	ldr	r3, [pc, #256]	; (800884c <_vfiprintf_r+0x210>)
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	1ac0      	subs	r0, r0, r3
 800874e:	2301      	movs	r3, #1
 8008750:	4083      	lsls	r3, r0
 8008752:	4313      	orrs	r3, r2
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	002e      	movs	r6, r5
 8008758:	e7b8      	b.n	80086cc <_vfiprintf_r+0x90>
 800875a:	9b07      	ldr	r3, [sp, #28]
 800875c:	1d19      	adds	r1, r3, #4
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	9107      	str	r1, [sp, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	db01      	blt.n	800876a <_vfiprintf_r+0x12e>
 8008766:	930b      	str	r3, [sp, #44]	; 0x2c
 8008768:	e004      	b.n	8008774 <_vfiprintf_r+0x138>
 800876a:	425b      	negs	r3, r3
 800876c:	60e3      	str	r3, [r4, #12]
 800876e:	2302      	movs	r3, #2
 8008770:	4313      	orrs	r3, r2
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	782b      	ldrb	r3, [r5, #0]
 8008776:	2b2e      	cmp	r3, #46	; 0x2e
 8008778:	d10a      	bne.n	8008790 <_vfiprintf_r+0x154>
 800877a:	786b      	ldrb	r3, [r5, #1]
 800877c:	2b2a      	cmp	r3, #42	; 0x2a
 800877e:	d135      	bne.n	80087ec <_vfiprintf_r+0x1b0>
 8008780:	9b07      	ldr	r3, [sp, #28]
 8008782:	3502      	adds	r5, #2
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	9207      	str	r2, [sp, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	db2b      	blt.n	80087e6 <_vfiprintf_r+0x1aa>
 800878e:	9309      	str	r3, [sp, #36]	; 0x24
 8008790:	4e31      	ldr	r6, [pc, #196]	; (8008858 <_vfiprintf_r+0x21c>)
 8008792:	7829      	ldrb	r1, [r5, #0]
 8008794:	2203      	movs	r2, #3
 8008796:	0030      	movs	r0, r6
 8008798:	f000 fcba 	bl	8009110 <memchr>
 800879c:	2800      	cmp	r0, #0
 800879e:	d006      	beq.n	80087ae <_vfiprintf_r+0x172>
 80087a0:	2340      	movs	r3, #64	; 0x40
 80087a2:	1b80      	subs	r0, r0, r6
 80087a4:	4083      	lsls	r3, r0
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	3501      	adds	r5, #1
 80087aa:	4313      	orrs	r3, r2
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	7829      	ldrb	r1, [r5, #0]
 80087b0:	2206      	movs	r2, #6
 80087b2:	482a      	ldr	r0, [pc, #168]	; (800885c <_vfiprintf_r+0x220>)
 80087b4:	1c6e      	adds	r6, r5, #1
 80087b6:	7621      	strb	r1, [r4, #24]
 80087b8:	f000 fcaa 	bl	8009110 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d03a      	beq.n	8008836 <_vfiprintf_r+0x1fa>
 80087c0:	4b27      	ldr	r3, [pc, #156]	; (8008860 <_vfiprintf_r+0x224>)
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d125      	bne.n	8008812 <_vfiprintf_r+0x1d6>
 80087c6:	2207      	movs	r2, #7
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	3307      	adds	r3, #7
 80087cc:	4393      	bics	r3, r2
 80087ce:	3308      	adds	r3, #8
 80087d0:	9307      	str	r3, [sp, #28]
 80087d2:	6963      	ldr	r3, [r4, #20]
 80087d4:	9a04      	ldr	r2, [sp, #16]
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	6163      	str	r3, [r4, #20]
 80087da:	e750      	b.n	800867e <_vfiprintf_r+0x42>
 80087dc:	4343      	muls	r3, r0
 80087de:	2101      	movs	r1, #1
 80087e0:	189b      	adds	r3, r3, r2
 80087e2:	0035      	movs	r5, r6
 80087e4:	e790      	b.n	8008708 <_vfiprintf_r+0xcc>
 80087e6:	2301      	movs	r3, #1
 80087e8:	425b      	negs	r3, r3
 80087ea:	e7d0      	b.n	800878e <_vfiprintf_r+0x152>
 80087ec:	2300      	movs	r3, #0
 80087ee:	200a      	movs	r0, #10
 80087f0:	001a      	movs	r2, r3
 80087f2:	3501      	adds	r5, #1
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	7829      	ldrb	r1, [r5, #0]
 80087f8:	1c6e      	adds	r6, r5, #1
 80087fa:	3930      	subs	r1, #48	; 0x30
 80087fc:	2909      	cmp	r1, #9
 80087fe:	d903      	bls.n	8008808 <_vfiprintf_r+0x1cc>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c5      	beq.n	8008790 <_vfiprintf_r+0x154>
 8008804:	9209      	str	r2, [sp, #36]	; 0x24
 8008806:	e7c3      	b.n	8008790 <_vfiprintf_r+0x154>
 8008808:	4342      	muls	r2, r0
 800880a:	2301      	movs	r3, #1
 800880c:	1852      	adds	r2, r2, r1
 800880e:	0035      	movs	r5, r6
 8008810:	e7f1      	b.n	80087f6 <_vfiprintf_r+0x1ba>
 8008812:	ab07      	add	r3, sp, #28
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	003a      	movs	r2, r7
 8008818:	4b12      	ldr	r3, [pc, #72]	; (8008864 <_vfiprintf_r+0x228>)
 800881a:	0021      	movs	r1, r4
 800881c:	9803      	ldr	r0, [sp, #12]
 800881e:	e000      	b.n	8008822 <_vfiprintf_r+0x1e6>
 8008820:	bf00      	nop
 8008822:	9004      	str	r0, [sp, #16]
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	3301      	adds	r3, #1
 8008828:	d1d3      	bne.n	80087d2 <_vfiprintf_r+0x196>
 800882a:	89bb      	ldrh	r3, [r7, #12]
 800882c:	065b      	lsls	r3, r3, #25
 800882e:	d500      	bpl.n	8008832 <_vfiprintf_r+0x1f6>
 8008830:	e784      	b.n	800873c <_vfiprintf_r+0x100>
 8008832:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008834:	e784      	b.n	8008740 <_vfiprintf_r+0x104>
 8008836:	ab07      	add	r3, sp, #28
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	003a      	movs	r2, r7
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <_vfiprintf_r+0x228>)
 800883e:	0021      	movs	r1, r4
 8008840:	9803      	ldr	r0, [sp, #12]
 8008842:	f000 f87f 	bl	8008944 <_printf_i>
 8008846:	e7ec      	b.n	8008822 <_vfiprintf_r+0x1e6>
 8008848:	0800960c 	.word	0x0800960c
 800884c:	080095b8 	.word	0x080095b8
 8008850:	0800962c 	.word	0x0800962c
 8008854:	080095ec 	.word	0x080095ec
 8008858:	080095be 	.word	0x080095be
 800885c:	080095c2 	.word	0x080095c2
 8008860:	00000000 	.word	0x00000000
 8008864:	08008617 	.word	0x08008617

08008868 <_printf_common>:
 8008868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800886a:	0015      	movs	r5, r2
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	688a      	ldr	r2, [r1, #8]
 8008870:	690b      	ldr	r3, [r1, #16]
 8008872:	9000      	str	r0, [sp, #0]
 8008874:	000c      	movs	r4, r1
 8008876:	4293      	cmp	r3, r2
 8008878:	da00      	bge.n	800887c <_printf_common+0x14>
 800887a:	0013      	movs	r3, r2
 800887c:	0022      	movs	r2, r4
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	3243      	adds	r2, #67	; 0x43
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	2a00      	cmp	r2, #0
 8008886:	d001      	beq.n	800888c <_printf_common+0x24>
 8008888:	3301      	adds	r3, #1
 800888a:	602b      	str	r3, [r5, #0]
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	069b      	lsls	r3, r3, #26
 8008890:	d502      	bpl.n	8008898 <_printf_common+0x30>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	3302      	adds	r3, #2
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	2706      	movs	r7, #6
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	401f      	ands	r7, r3
 800889e:	d027      	beq.n	80088f0 <_printf_common+0x88>
 80088a0:	0023      	movs	r3, r4
 80088a2:	3343      	adds	r3, #67	; 0x43
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	1e5a      	subs	r2, r3, #1
 80088a8:	4193      	sbcs	r3, r2
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	0692      	lsls	r2, r2, #26
 80088ae:	d430      	bmi.n	8008912 <_printf_common+0xaa>
 80088b0:	0022      	movs	r2, r4
 80088b2:	9901      	ldr	r1, [sp, #4]
 80088b4:	3243      	adds	r2, #67	; 0x43
 80088b6:	9800      	ldr	r0, [sp, #0]
 80088b8:	9e08      	ldr	r6, [sp, #32]
 80088ba:	47b0      	blx	r6
 80088bc:	1c43      	adds	r3, r0, #1
 80088be:	d025      	beq.n	800890c <_printf_common+0xa4>
 80088c0:	2306      	movs	r3, #6
 80088c2:	6820      	ldr	r0, [r4, #0]
 80088c4:	682a      	ldr	r2, [r5, #0]
 80088c6:	68e1      	ldr	r1, [r4, #12]
 80088c8:	4003      	ands	r3, r0
 80088ca:	2500      	movs	r5, #0
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d103      	bne.n	80088d8 <_printf_common+0x70>
 80088d0:	1a8d      	subs	r5, r1, r2
 80088d2:	43eb      	mvns	r3, r5
 80088d4:	17db      	asrs	r3, r3, #31
 80088d6:	401d      	ands	r5, r3
 80088d8:	68a3      	ldr	r3, [r4, #8]
 80088da:	6922      	ldr	r2, [r4, #16]
 80088dc:	4293      	cmp	r3, r2
 80088de:	dd01      	ble.n	80088e4 <_printf_common+0x7c>
 80088e0:	1a9b      	subs	r3, r3, r2
 80088e2:	18ed      	adds	r5, r5, r3
 80088e4:	2700      	movs	r7, #0
 80088e6:	42bd      	cmp	r5, r7
 80088e8:	d120      	bne.n	800892c <_printf_common+0xc4>
 80088ea:	2000      	movs	r0, #0
 80088ec:	e010      	b.n	8008910 <_printf_common+0xa8>
 80088ee:	3701      	adds	r7, #1
 80088f0:	68e3      	ldr	r3, [r4, #12]
 80088f2:	682a      	ldr	r2, [r5, #0]
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	42bb      	cmp	r3, r7
 80088f8:	ddd2      	ble.n	80088a0 <_printf_common+0x38>
 80088fa:	0022      	movs	r2, r4
 80088fc:	2301      	movs	r3, #1
 80088fe:	3219      	adds	r2, #25
 8008900:	9901      	ldr	r1, [sp, #4]
 8008902:	9800      	ldr	r0, [sp, #0]
 8008904:	9e08      	ldr	r6, [sp, #32]
 8008906:	47b0      	blx	r6
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d1f0      	bne.n	80088ee <_printf_common+0x86>
 800890c:	2001      	movs	r0, #1
 800890e:	4240      	negs	r0, r0
 8008910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008912:	2030      	movs	r0, #48	; 0x30
 8008914:	18e1      	adds	r1, r4, r3
 8008916:	3143      	adds	r1, #67	; 0x43
 8008918:	7008      	strb	r0, [r1, #0]
 800891a:	0021      	movs	r1, r4
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	3145      	adds	r1, #69	; 0x45
 8008920:	7809      	ldrb	r1, [r1, #0]
 8008922:	18a2      	adds	r2, r4, r2
 8008924:	3243      	adds	r2, #67	; 0x43
 8008926:	3302      	adds	r3, #2
 8008928:	7011      	strb	r1, [r2, #0]
 800892a:	e7c1      	b.n	80088b0 <_printf_common+0x48>
 800892c:	0022      	movs	r2, r4
 800892e:	2301      	movs	r3, #1
 8008930:	321a      	adds	r2, #26
 8008932:	9901      	ldr	r1, [sp, #4]
 8008934:	9800      	ldr	r0, [sp, #0]
 8008936:	9e08      	ldr	r6, [sp, #32]
 8008938:	47b0      	blx	r6
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	d0e6      	beq.n	800890c <_printf_common+0xa4>
 800893e:	3701      	adds	r7, #1
 8008940:	e7d1      	b.n	80088e6 <_printf_common+0x7e>
	...

08008944 <_printf_i>:
 8008944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	9204      	str	r2, [sp, #16]
 800894a:	000a      	movs	r2, r1
 800894c:	3243      	adds	r2, #67	; 0x43
 800894e:	9305      	str	r3, [sp, #20]
 8008950:	9003      	str	r0, [sp, #12]
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	7e0a      	ldrb	r2, [r1, #24]
 8008956:	000c      	movs	r4, r1
 8008958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800895a:	2a6e      	cmp	r2, #110	; 0x6e
 800895c:	d100      	bne.n	8008960 <_printf_i+0x1c>
 800895e:	e086      	b.n	8008a6e <_printf_i+0x12a>
 8008960:	d81f      	bhi.n	80089a2 <_printf_i+0x5e>
 8008962:	2a63      	cmp	r2, #99	; 0x63
 8008964:	d033      	beq.n	80089ce <_printf_i+0x8a>
 8008966:	d808      	bhi.n	800897a <_printf_i+0x36>
 8008968:	2a00      	cmp	r2, #0
 800896a:	d100      	bne.n	800896e <_printf_i+0x2a>
 800896c:	e08c      	b.n	8008a88 <_printf_i+0x144>
 800896e:	2a58      	cmp	r2, #88	; 0x58
 8008970:	d04d      	beq.n	8008a0e <_printf_i+0xca>
 8008972:	0025      	movs	r5, r4
 8008974:	3542      	adds	r5, #66	; 0x42
 8008976:	702a      	strb	r2, [r5, #0]
 8008978:	e030      	b.n	80089dc <_printf_i+0x98>
 800897a:	2a64      	cmp	r2, #100	; 0x64
 800897c:	d001      	beq.n	8008982 <_printf_i+0x3e>
 800897e:	2a69      	cmp	r2, #105	; 0x69
 8008980:	d1f7      	bne.n	8008972 <_printf_i+0x2e>
 8008982:	6819      	ldr	r1, [r3, #0]
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	1d0a      	adds	r2, r1, #4
 8008988:	0628      	lsls	r0, r5, #24
 800898a:	d529      	bpl.n	80089e0 <_printf_i+0x9c>
 800898c:	6808      	ldr	r0, [r1, #0]
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	2800      	cmp	r0, #0
 8008992:	da03      	bge.n	800899c <_printf_i+0x58>
 8008994:	232d      	movs	r3, #45	; 0x2d
 8008996:	9a02      	ldr	r2, [sp, #8]
 8008998:	4240      	negs	r0, r0
 800899a:	7013      	strb	r3, [r2, #0]
 800899c:	4e6b      	ldr	r6, [pc, #428]	; (8008b4c <_printf_i+0x208>)
 800899e:	270a      	movs	r7, #10
 80089a0:	e04f      	b.n	8008a42 <_printf_i+0xfe>
 80089a2:	2a73      	cmp	r2, #115	; 0x73
 80089a4:	d074      	beq.n	8008a90 <_printf_i+0x14c>
 80089a6:	d808      	bhi.n	80089ba <_printf_i+0x76>
 80089a8:	2a6f      	cmp	r2, #111	; 0x6f
 80089aa:	d01f      	beq.n	80089ec <_printf_i+0xa8>
 80089ac:	2a70      	cmp	r2, #112	; 0x70
 80089ae:	d1e0      	bne.n	8008972 <_printf_i+0x2e>
 80089b0:	2220      	movs	r2, #32
 80089b2:	6809      	ldr	r1, [r1, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	6022      	str	r2, [r4, #0]
 80089b8:	e003      	b.n	80089c2 <_printf_i+0x7e>
 80089ba:	2a75      	cmp	r2, #117	; 0x75
 80089bc:	d016      	beq.n	80089ec <_printf_i+0xa8>
 80089be:	2a78      	cmp	r2, #120	; 0x78
 80089c0:	d1d7      	bne.n	8008972 <_printf_i+0x2e>
 80089c2:	0022      	movs	r2, r4
 80089c4:	2178      	movs	r1, #120	; 0x78
 80089c6:	3245      	adds	r2, #69	; 0x45
 80089c8:	7011      	strb	r1, [r2, #0]
 80089ca:	4e61      	ldr	r6, [pc, #388]	; (8008b50 <_printf_i+0x20c>)
 80089cc:	e022      	b.n	8008a14 <_printf_i+0xd0>
 80089ce:	0025      	movs	r5, r4
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	3542      	adds	r5, #66	; 0x42
 80089d4:	1d11      	adds	r1, r2, #4
 80089d6:	6019      	str	r1, [r3, #0]
 80089d8:	6813      	ldr	r3, [r2, #0]
 80089da:	702b      	strb	r3, [r5, #0]
 80089dc:	2301      	movs	r3, #1
 80089de:	e065      	b.n	8008aac <_printf_i+0x168>
 80089e0:	6808      	ldr	r0, [r1, #0]
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	0669      	lsls	r1, r5, #25
 80089e6:	d5d3      	bpl.n	8008990 <_printf_i+0x4c>
 80089e8:	b200      	sxth	r0, r0
 80089ea:	e7d1      	b.n	8008990 <_printf_i+0x4c>
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	6825      	ldr	r5, [r4, #0]
 80089f0:	1d08      	adds	r0, r1, #4
 80089f2:	6018      	str	r0, [r3, #0]
 80089f4:	6808      	ldr	r0, [r1, #0]
 80089f6:	062e      	lsls	r6, r5, #24
 80089f8:	d505      	bpl.n	8008a06 <_printf_i+0xc2>
 80089fa:	4e54      	ldr	r6, [pc, #336]	; (8008b4c <_printf_i+0x208>)
 80089fc:	2708      	movs	r7, #8
 80089fe:	2a6f      	cmp	r2, #111	; 0x6f
 8008a00:	d01b      	beq.n	8008a3a <_printf_i+0xf6>
 8008a02:	270a      	movs	r7, #10
 8008a04:	e019      	b.n	8008a3a <_printf_i+0xf6>
 8008a06:	066d      	lsls	r5, r5, #25
 8008a08:	d5f7      	bpl.n	80089fa <_printf_i+0xb6>
 8008a0a:	b280      	uxth	r0, r0
 8008a0c:	e7f5      	b.n	80089fa <_printf_i+0xb6>
 8008a0e:	3145      	adds	r1, #69	; 0x45
 8008a10:	4e4e      	ldr	r6, [pc, #312]	; (8008b4c <_printf_i+0x208>)
 8008a12:	700a      	strb	r2, [r1, #0]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	1d01      	adds	r1, r0, #4
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	6019      	str	r1, [r3, #0]
 8008a1e:	0615      	lsls	r5, r2, #24
 8008a20:	d521      	bpl.n	8008a66 <_printf_i+0x122>
 8008a22:	07d3      	lsls	r3, r2, #31
 8008a24:	d502      	bpl.n	8008a2c <_printf_i+0xe8>
 8008a26:	2320      	movs	r3, #32
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	2710      	movs	r7, #16
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d103      	bne.n	8008a3a <_printf_i+0xf6>
 8008a32:	2320      	movs	r3, #32
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	439a      	bics	r2, r3
 8008a38:	6022      	str	r2, [r4, #0]
 8008a3a:	0023      	movs	r3, r4
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	3343      	adds	r3, #67	; 0x43
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	60a3      	str	r3, [r4, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	db58      	blt.n	8008afc <_printf_i+0x1b8>
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	6821      	ldr	r1, [r4, #0]
 8008a4e:	4391      	bics	r1, r2
 8008a50:	6021      	str	r1, [r4, #0]
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d154      	bne.n	8008b00 <_printf_i+0x1bc>
 8008a56:	9d02      	ldr	r5, [sp, #8]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d05a      	beq.n	8008b12 <_printf_i+0x1ce>
 8008a5c:	0025      	movs	r5, r4
 8008a5e:	7833      	ldrb	r3, [r6, #0]
 8008a60:	3542      	adds	r5, #66	; 0x42
 8008a62:	702b      	strb	r3, [r5, #0]
 8008a64:	e055      	b.n	8008b12 <_printf_i+0x1ce>
 8008a66:	0655      	lsls	r5, r2, #25
 8008a68:	d5db      	bpl.n	8008a22 <_printf_i+0xde>
 8008a6a:	b280      	uxth	r0, r0
 8008a6c:	e7d9      	b.n	8008a22 <_printf_i+0xde>
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	680d      	ldr	r5, [r1, #0]
 8008a72:	1d10      	adds	r0, r2, #4
 8008a74:	6949      	ldr	r1, [r1, #20]
 8008a76:	6018      	str	r0, [r3, #0]
 8008a78:	6813      	ldr	r3, [r2, #0]
 8008a7a:	062e      	lsls	r6, r5, #24
 8008a7c:	d501      	bpl.n	8008a82 <_printf_i+0x13e>
 8008a7e:	6019      	str	r1, [r3, #0]
 8008a80:	e002      	b.n	8008a88 <_printf_i+0x144>
 8008a82:	066d      	lsls	r5, r5, #25
 8008a84:	d5fb      	bpl.n	8008a7e <_printf_i+0x13a>
 8008a86:	8019      	strh	r1, [r3, #0]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9d02      	ldr	r5, [sp, #8]
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	e04f      	b.n	8008b30 <_printf_i+0x1ec>
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	1d11      	adds	r1, r2, #4
 8008a94:	6019      	str	r1, [r3, #0]
 8008a96:	6815      	ldr	r5, [r2, #0]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	6862      	ldr	r2, [r4, #4]
 8008a9c:	0028      	movs	r0, r5
 8008a9e:	f000 fb37 	bl	8009110 <memchr>
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d001      	beq.n	8008aaa <_printf_i+0x166>
 8008aa6:	1b40      	subs	r0, r0, r5
 8008aa8:	6060      	str	r0, [r4, #4]
 8008aaa:	6863      	ldr	r3, [r4, #4]
 8008aac:	6123      	str	r3, [r4, #16]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9a02      	ldr	r2, [sp, #8]
 8008ab2:	7013      	strb	r3, [r2, #0]
 8008ab4:	e03c      	b.n	8008b30 <_printf_i+0x1ec>
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	002a      	movs	r2, r5
 8008aba:	9904      	ldr	r1, [sp, #16]
 8008abc:	9803      	ldr	r0, [sp, #12]
 8008abe:	9d05      	ldr	r5, [sp, #20]
 8008ac0:	47a8      	blx	r5
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d03e      	beq.n	8008b44 <_printf_i+0x200>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	079b      	lsls	r3, r3, #30
 8008aca:	d415      	bmi.n	8008af8 <_printf_i+0x1b4>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	68e0      	ldr	r0, [r4, #12]
 8008ad0:	4298      	cmp	r0, r3
 8008ad2:	da39      	bge.n	8008b48 <_printf_i+0x204>
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	e037      	b.n	8008b48 <_printf_i+0x204>
 8008ad8:	0022      	movs	r2, r4
 8008ada:	2301      	movs	r3, #1
 8008adc:	3219      	adds	r2, #25
 8008ade:	9904      	ldr	r1, [sp, #16]
 8008ae0:	9803      	ldr	r0, [sp, #12]
 8008ae2:	9e05      	ldr	r6, [sp, #20]
 8008ae4:	47b0      	blx	r6
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d02c      	beq.n	8008b44 <_printf_i+0x200>
 8008aea:	3501      	adds	r5, #1
 8008aec:	68e3      	ldr	r3, [r4, #12]
 8008aee:	9a07      	ldr	r2, [sp, #28]
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	42ab      	cmp	r3, r5
 8008af4:	dcf0      	bgt.n	8008ad8 <_printf_i+0x194>
 8008af6:	e7e9      	b.n	8008acc <_printf_i+0x188>
 8008af8:	2500      	movs	r5, #0
 8008afa:	e7f7      	b.n	8008aec <_printf_i+0x1a8>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0ad      	beq.n	8008a5c <_printf_i+0x118>
 8008b00:	9d02      	ldr	r5, [sp, #8]
 8008b02:	0039      	movs	r1, r7
 8008b04:	f7f7 fb86 	bl	8000214 <__aeabi_uidivmod>
 8008b08:	5c73      	ldrb	r3, [r6, r1]
 8008b0a:	3d01      	subs	r5, #1
 8008b0c:	702b      	strb	r3, [r5, #0]
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d1f7      	bne.n	8008b02 <_printf_i+0x1be>
 8008b12:	2f08      	cmp	r7, #8
 8008b14:	d109      	bne.n	8008b2a <_printf_i+0x1e6>
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	07db      	lsls	r3, r3, #31
 8008b1a:	d506      	bpl.n	8008b2a <_printf_i+0x1e6>
 8008b1c:	6863      	ldr	r3, [r4, #4]
 8008b1e:	6922      	ldr	r2, [r4, #16]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	dc02      	bgt.n	8008b2a <_printf_i+0x1e6>
 8008b24:	2330      	movs	r3, #48	; 0x30
 8008b26:	3d01      	subs	r5, #1
 8008b28:	702b      	strb	r3, [r5, #0]
 8008b2a:	9b02      	ldr	r3, [sp, #8]
 8008b2c:	1b5b      	subs	r3, r3, r5
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	aa07      	add	r2, sp, #28
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	0021      	movs	r1, r4
 8008b38:	9b04      	ldr	r3, [sp, #16]
 8008b3a:	9803      	ldr	r0, [sp, #12]
 8008b3c:	f7ff fe94 	bl	8008868 <_printf_common>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d1b8      	bne.n	8008ab6 <_printf_i+0x172>
 8008b44:	2001      	movs	r0, #1
 8008b46:	4240      	negs	r0, r0
 8008b48:	b009      	add	sp, #36	; 0x24
 8008b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4c:	080095c9 	.word	0x080095c9
 8008b50:	080095da 	.word	0x080095da

08008b54 <_sbrk_r>:
 8008b54:	2300      	movs	r3, #0
 8008b56:	b570      	push	{r4, r5, r6, lr}
 8008b58:	4c06      	ldr	r4, [pc, #24]	; (8008b74 <_sbrk_r+0x20>)
 8008b5a:	0005      	movs	r5, r0
 8008b5c:	0008      	movs	r0, r1
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	f7f9 f9d0 	bl	8001f04 <_sbrk>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d103      	bne.n	8008b70 <_sbrk_r+0x1c>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d000      	beq.n	8008b70 <_sbrk_r+0x1c>
 8008b6e:	602b      	str	r3, [r5, #0]
 8008b70:	bd70      	pop	{r4, r5, r6, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	20000898 	.word	0x20000898

08008b78 <__swbuf_r>:
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	0005      	movs	r5, r0
 8008b7c:	000e      	movs	r6, r1
 8008b7e:	0014      	movs	r4, r2
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d004      	beq.n	8008b8e <__swbuf_r+0x16>
 8008b84:	6983      	ldr	r3, [r0, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <__swbuf_r+0x16>
 8008b8a:	f000 f9c1 	bl	8008f10 <__sinit>
 8008b8e:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <__swbuf_r+0xa0>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d12d      	bne.n	8008bf0 <__swbuf_r+0x78>
 8008b94:	686c      	ldr	r4, [r5, #4]
 8008b96:	69a3      	ldr	r3, [r4, #24]
 8008b98:	60a3      	str	r3, [r4, #8]
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	071b      	lsls	r3, r3, #28
 8008b9e:	d531      	bpl.n	8008c04 <__swbuf_r+0x8c>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d02e      	beq.n	8008c04 <__swbuf_r+0x8c>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	6922      	ldr	r2, [r4, #16]
 8008baa:	b2f7      	uxtb	r7, r6
 8008bac:	1a98      	subs	r0, r3, r2
 8008bae:	6963      	ldr	r3, [r4, #20]
 8008bb0:	b2f6      	uxtb	r6, r6
 8008bb2:	4283      	cmp	r3, r0
 8008bb4:	dc05      	bgt.n	8008bc2 <__swbuf_r+0x4a>
 8008bb6:	0021      	movs	r1, r4
 8008bb8:	0028      	movs	r0, r5
 8008bba:	f000 f93b 	bl	8008e34 <_fflush_r>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d126      	bne.n	8008c10 <__swbuf_r+0x98>
 8008bc2:	68a3      	ldr	r3, [r4, #8]
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	6022      	str	r2, [r4, #0]
 8008bd0:	701f      	strb	r7, [r3, #0]
 8008bd2:	6963      	ldr	r3, [r4, #20]
 8008bd4:	4283      	cmp	r3, r0
 8008bd6:	d004      	beq.n	8008be2 <__swbuf_r+0x6a>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	07db      	lsls	r3, r3, #31
 8008bdc:	d51a      	bpl.n	8008c14 <__swbuf_r+0x9c>
 8008bde:	2e0a      	cmp	r6, #10
 8008be0:	d118      	bne.n	8008c14 <__swbuf_r+0x9c>
 8008be2:	0021      	movs	r1, r4
 8008be4:	0028      	movs	r0, r5
 8008be6:	f000 f925 	bl	8008e34 <_fflush_r>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d012      	beq.n	8008c14 <__swbuf_r+0x9c>
 8008bee:	e00f      	b.n	8008c10 <__swbuf_r+0x98>
 8008bf0:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <__swbuf_r+0xa4>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d101      	bne.n	8008bfa <__swbuf_r+0x82>
 8008bf6:	68ac      	ldr	r4, [r5, #8]
 8008bf8:	e7cd      	b.n	8008b96 <__swbuf_r+0x1e>
 8008bfa:	4b09      	ldr	r3, [pc, #36]	; (8008c20 <__swbuf_r+0xa8>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d1ca      	bne.n	8008b96 <__swbuf_r+0x1e>
 8008c00:	68ec      	ldr	r4, [r5, #12]
 8008c02:	e7c8      	b.n	8008b96 <__swbuf_r+0x1e>
 8008c04:	0021      	movs	r1, r4
 8008c06:	0028      	movs	r0, r5
 8008c08:	f000 f80c 	bl	8008c24 <__swsetup_r>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0ca      	beq.n	8008ba6 <__swbuf_r+0x2e>
 8008c10:	2601      	movs	r6, #1
 8008c12:	4276      	negs	r6, r6
 8008c14:	0030      	movs	r0, r6
 8008c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c18:	0800960c 	.word	0x0800960c
 8008c1c:	0800962c 	.word	0x0800962c
 8008c20:	080095ec 	.word	0x080095ec

08008c24 <__swsetup_r>:
 8008c24:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <__swsetup_r+0xdc>)
 8008c26:	b570      	push	{r4, r5, r6, lr}
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	0006      	movs	r6, r0
 8008c2c:	000c      	movs	r4, r1
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	d005      	beq.n	8008c3e <__swsetup_r+0x1a>
 8008c32:	69ab      	ldr	r3, [r5, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <__swsetup_r+0x1a>
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f000 f969 	bl	8008f10 <__sinit>
 8008c3e:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <__swsetup_r+0xe0>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	d10f      	bne.n	8008c64 <__swsetup_r+0x40>
 8008c44:	686c      	ldr	r4, [r5, #4]
 8008c46:	230c      	movs	r3, #12
 8008c48:	5ee2      	ldrsh	r2, [r4, r3]
 8008c4a:	b293      	uxth	r3, r2
 8008c4c:	0719      	lsls	r1, r3, #28
 8008c4e:	d42d      	bmi.n	8008cac <__swsetup_r+0x88>
 8008c50:	06d9      	lsls	r1, r3, #27
 8008c52:	d411      	bmi.n	8008c78 <__swsetup_r+0x54>
 8008c54:	2309      	movs	r3, #9
 8008c56:	2001      	movs	r0, #1
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	3337      	adds	r3, #55	; 0x37
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	81a3      	strh	r3, [r4, #12]
 8008c60:	4240      	negs	r0, r0
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	4b28      	ldr	r3, [pc, #160]	; (8008d08 <__swsetup_r+0xe4>)
 8008c66:	429c      	cmp	r4, r3
 8008c68:	d101      	bne.n	8008c6e <__swsetup_r+0x4a>
 8008c6a:	68ac      	ldr	r4, [r5, #8]
 8008c6c:	e7eb      	b.n	8008c46 <__swsetup_r+0x22>
 8008c6e:	4b27      	ldr	r3, [pc, #156]	; (8008d0c <__swsetup_r+0xe8>)
 8008c70:	429c      	cmp	r4, r3
 8008c72:	d1e8      	bne.n	8008c46 <__swsetup_r+0x22>
 8008c74:	68ec      	ldr	r4, [r5, #12]
 8008c76:	e7e6      	b.n	8008c46 <__swsetup_r+0x22>
 8008c78:	075b      	lsls	r3, r3, #29
 8008c7a:	d513      	bpl.n	8008ca4 <__swsetup_r+0x80>
 8008c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c7e:	2900      	cmp	r1, #0
 8008c80:	d008      	beq.n	8008c94 <__swsetup_r+0x70>
 8008c82:	0023      	movs	r3, r4
 8008c84:	3344      	adds	r3, #68	; 0x44
 8008c86:	4299      	cmp	r1, r3
 8008c88:	d002      	beq.n	8008c90 <__swsetup_r+0x6c>
 8008c8a:	0030      	movs	r0, r6
 8008c8c:	f7ff fc06 	bl	800849c <_free_r>
 8008c90:	2300      	movs	r3, #0
 8008c92:	6363      	str	r3, [r4, #52]	; 0x34
 8008c94:	2224      	movs	r2, #36	; 0x24
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	4393      	bics	r3, r2
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6063      	str	r3, [r4, #4]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	6023      	str	r3, [r4, #0]
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	89a2      	ldrh	r2, [r4, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10b      	bne.n	8008cca <__swsetup_r+0xa6>
 8008cb2:	21a0      	movs	r1, #160	; 0xa0
 8008cb4:	2280      	movs	r2, #128	; 0x80
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	0089      	lsls	r1, r1, #2
 8008cba:	0092      	lsls	r2, r2, #2
 8008cbc:	400b      	ands	r3, r1
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d003      	beq.n	8008cca <__swsetup_r+0xa6>
 8008cc2:	0021      	movs	r1, r4
 8008cc4:	0030      	movs	r0, r6
 8008cc6:	f000 f9df 	bl	8009088 <__smakebuf_r>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	89a2      	ldrh	r2, [r4, #12]
 8008cce:	4013      	ands	r3, r2
 8008cd0:	d011      	beq.n	8008cf6 <__swsetup_r+0xd2>
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6963      	ldr	r3, [r4, #20]
 8008cd8:	425b      	negs	r3, r3
 8008cda:	61a3      	str	r3, [r4, #24]
 8008cdc:	2000      	movs	r0, #0
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	4283      	cmp	r3, r0
 8008ce2:	d1be      	bne.n	8008c62 <__swsetup_r+0x3e>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	5ee2      	ldrsh	r2, [r4, r3]
 8008ce8:	0613      	lsls	r3, r2, #24
 8008cea:	d5ba      	bpl.n	8008c62 <__swsetup_r+0x3e>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	81a3      	strh	r3, [r4, #12]
 8008cf2:	3801      	subs	r0, #1
 8008cf4:	e7b5      	b.n	8008c62 <__swsetup_r+0x3e>
 8008cf6:	0792      	lsls	r2, r2, #30
 8008cf8:	d400      	bmi.n	8008cfc <__swsetup_r+0xd8>
 8008cfa:	6963      	ldr	r3, [r4, #20]
 8008cfc:	60a3      	str	r3, [r4, #8]
 8008cfe:	e7ed      	b.n	8008cdc <__swsetup_r+0xb8>
 8008d00:	2000000c 	.word	0x2000000c
 8008d04:	0800960c 	.word	0x0800960c
 8008d08:	0800962c 	.word	0x0800962c
 8008d0c:	080095ec 	.word	0x080095ec

08008d10 <abort>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	2006      	movs	r0, #6
 8008d14:	f000 fa34 	bl	8009180 <raise>
 8008d18:	2001      	movs	r0, #1
 8008d1a:	f7f9 f881 	bl	8001e20 <_exit>
	...

08008d20 <__sflush_r>:
 8008d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d22:	898a      	ldrh	r2, [r1, #12]
 8008d24:	0005      	movs	r5, r0
 8008d26:	000c      	movs	r4, r1
 8008d28:	0713      	lsls	r3, r2, #28
 8008d2a:	d460      	bmi.n	8008dee <__sflush_r+0xce>
 8008d2c:	684b      	ldr	r3, [r1, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dc04      	bgt.n	8008d3c <__sflush_r+0x1c>
 8008d32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc01      	bgt.n	8008d3c <__sflush_r+0x1c>
 8008d38:	2000      	movs	r0, #0
 8008d3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	d0fa      	beq.n	8008d38 <__sflush_r+0x18>
 8008d42:	2300      	movs	r3, #0
 8008d44:	682e      	ldr	r6, [r5, #0]
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	015b      	lsls	r3, r3, #5
 8008d4c:	6a21      	ldr	r1, [r4, #32]
 8008d4e:	401a      	ands	r2, r3
 8008d50:	d034      	beq.n	8008dbc <__sflush_r+0x9c>
 8008d52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	075b      	lsls	r3, r3, #29
 8008d58:	d506      	bpl.n	8008d68 <__sflush_r+0x48>
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	1ac0      	subs	r0, r0, r3
 8008d5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <__sflush_r+0x48>
 8008d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d66:	1ac0      	subs	r0, r0, r3
 8008d68:	0002      	movs	r2, r0
 8008d6a:	6a21      	ldr	r1, [r4, #32]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	0028      	movs	r0, r5
 8008d70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008d72:	47b8      	blx	r7
 8008d74:	89a1      	ldrh	r1, [r4, #12]
 8008d76:	1c43      	adds	r3, r0, #1
 8008d78:	d106      	bne.n	8008d88 <__sflush_r+0x68>
 8008d7a:	682b      	ldr	r3, [r5, #0]
 8008d7c:	2b1d      	cmp	r3, #29
 8008d7e:	d830      	bhi.n	8008de2 <__sflush_r+0xc2>
 8008d80:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <__sflush_r+0x110>)
 8008d82:	40da      	lsrs	r2, r3
 8008d84:	07d3      	lsls	r3, r2, #31
 8008d86:	d52c      	bpl.n	8008de2 <__sflush_r+0xc2>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	6063      	str	r3, [r4, #4]
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	6023      	str	r3, [r4, #0]
 8008d90:	04cb      	lsls	r3, r1, #19
 8008d92:	d505      	bpl.n	8008da0 <__sflush_r+0x80>
 8008d94:	1c43      	adds	r3, r0, #1
 8008d96:	d102      	bne.n	8008d9e <__sflush_r+0x7e>
 8008d98:	682b      	ldr	r3, [r5, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d100      	bne.n	8008da0 <__sflush_r+0x80>
 8008d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008da2:	602e      	str	r6, [r5, #0]
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d0c7      	beq.n	8008d38 <__sflush_r+0x18>
 8008da8:	0023      	movs	r3, r4
 8008daa:	3344      	adds	r3, #68	; 0x44
 8008dac:	4299      	cmp	r1, r3
 8008dae:	d002      	beq.n	8008db6 <__sflush_r+0x96>
 8008db0:	0028      	movs	r0, r5
 8008db2:	f7ff fb73 	bl	800849c <_free_r>
 8008db6:	2000      	movs	r0, #0
 8008db8:	6360      	str	r0, [r4, #52]	; 0x34
 8008dba:	e7be      	b.n	8008d3a <__sflush_r+0x1a>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	0028      	movs	r0, r5
 8008dc0:	47b8      	blx	r7
 8008dc2:	1c43      	adds	r3, r0, #1
 8008dc4:	d1c6      	bne.n	8008d54 <__sflush_r+0x34>
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0c3      	beq.n	8008d54 <__sflush_r+0x34>
 8008dcc:	2b1d      	cmp	r3, #29
 8008dce:	d001      	beq.n	8008dd4 <__sflush_r+0xb4>
 8008dd0:	2b16      	cmp	r3, #22
 8008dd2:	d101      	bne.n	8008dd8 <__sflush_r+0xb8>
 8008dd4:	602e      	str	r6, [r5, #0]
 8008dd6:	e7af      	b.n	8008d38 <__sflush_r+0x18>
 8008dd8:	2340      	movs	r3, #64	; 0x40
 8008dda:	89a2      	ldrh	r2, [r4, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	81a3      	strh	r3, [r4, #12]
 8008de0:	e7ab      	b.n	8008d3a <__sflush_r+0x1a>
 8008de2:	2340      	movs	r3, #64	; 0x40
 8008de4:	430b      	orrs	r3, r1
 8008de6:	2001      	movs	r0, #1
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	4240      	negs	r0, r0
 8008dec:	e7a5      	b.n	8008d3a <__sflush_r+0x1a>
 8008dee:	690f      	ldr	r7, [r1, #16]
 8008df0:	2f00      	cmp	r7, #0
 8008df2:	d0a1      	beq.n	8008d38 <__sflush_r+0x18>
 8008df4:	680b      	ldr	r3, [r1, #0]
 8008df6:	600f      	str	r7, [r1, #0]
 8008df8:	1bdb      	subs	r3, r3, r7
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	0792      	lsls	r2, r2, #30
 8008e00:	d100      	bne.n	8008e04 <__sflush_r+0xe4>
 8008e02:	694b      	ldr	r3, [r1, #20]
 8008e04:	60a3      	str	r3, [r4, #8]
 8008e06:	9b01      	ldr	r3, [sp, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dc00      	bgt.n	8008e0e <__sflush_r+0xee>
 8008e0c:	e794      	b.n	8008d38 <__sflush_r+0x18>
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	003a      	movs	r2, r7
 8008e12:	6a21      	ldr	r1, [r4, #32]
 8008e14:	0028      	movs	r0, r5
 8008e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e18:	47b0      	blx	r6
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	dc03      	bgt.n	8008e26 <__sflush_r+0x106>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	89a2      	ldrh	r2, [r4, #12]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	e7df      	b.n	8008de6 <__sflush_r+0xc6>
 8008e26:	9b01      	ldr	r3, [sp, #4]
 8008e28:	183f      	adds	r7, r7, r0
 8008e2a:	1a1b      	subs	r3, r3, r0
 8008e2c:	9301      	str	r3, [sp, #4]
 8008e2e:	e7ea      	b.n	8008e06 <__sflush_r+0xe6>
 8008e30:	20400001 	.word	0x20400001

08008e34 <_fflush_r>:
 8008e34:	690b      	ldr	r3, [r1, #16]
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	0005      	movs	r5, r0
 8008e3a:	000c      	movs	r4, r1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <_fflush_r+0x10>
 8008e40:	2000      	movs	r0, #0
 8008e42:	bd70      	pop	{r4, r5, r6, pc}
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d004      	beq.n	8008e52 <_fflush_r+0x1e>
 8008e48:	6983      	ldr	r3, [r0, #24]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <_fflush_r+0x1e>
 8008e4e:	f000 f85f 	bl	8008f10 <__sinit>
 8008e52:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <_fflush_r+0x4c>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	d109      	bne.n	8008e6c <_fflush_r+0x38>
 8008e58:	686c      	ldr	r4, [r5, #4]
 8008e5a:	220c      	movs	r2, #12
 8008e5c:	5ea3      	ldrsh	r3, [r4, r2]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0ee      	beq.n	8008e40 <_fflush_r+0xc>
 8008e62:	0021      	movs	r1, r4
 8008e64:	0028      	movs	r0, r5
 8008e66:	f7ff ff5b 	bl	8008d20 <__sflush_r>
 8008e6a:	e7ea      	b.n	8008e42 <_fflush_r+0xe>
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <_fflush_r+0x50>)
 8008e6e:	429c      	cmp	r4, r3
 8008e70:	d101      	bne.n	8008e76 <_fflush_r+0x42>
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	e7f1      	b.n	8008e5a <_fflush_r+0x26>
 8008e76:	4b04      	ldr	r3, [pc, #16]	; (8008e88 <_fflush_r+0x54>)
 8008e78:	429c      	cmp	r4, r3
 8008e7a:	d1ee      	bne.n	8008e5a <_fflush_r+0x26>
 8008e7c:	68ec      	ldr	r4, [r5, #12]
 8008e7e:	e7ec      	b.n	8008e5a <_fflush_r+0x26>
 8008e80:	0800960c 	.word	0x0800960c
 8008e84:	0800962c 	.word	0x0800962c
 8008e88:	080095ec 	.word	0x080095ec

08008e8c <std>:
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	b510      	push	{r4, lr}
 8008e90:	0004      	movs	r4, r0
 8008e92:	6003      	str	r3, [r0, #0]
 8008e94:	6043      	str	r3, [r0, #4]
 8008e96:	6083      	str	r3, [r0, #8]
 8008e98:	8181      	strh	r1, [r0, #12]
 8008e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8008e9c:	81c2      	strh	r2, [r0, #14]
 8008e9e:	6103      	str	r3, [r0, #16]
 8008ea0:	6143      	str	r3, [r0, #20]
 8008ea2:	6183      	str	r3, [r0, #24]
 8008ea4:	0019      	movs	r1, r3
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	305c      	adds	r0, #92	; 0x5c
 8008eaa:	f7ff fae0 	bl	800846e <memset>
 8008eae:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <std+0x38>)
 8008eb0:	6224      	str	r4, [r4, #32]
 8008eb2:	6263      	str	r3, [r4, #36]	; 0x24
 8008eb4:	4b04      	ldr	r3, [pc, #16]	; (8008ec8 <std+0x3c>)
 8008eb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eb8:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <std+0x40>)
 8008eba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ebc:	4b04      	ldr	r3, [pc, #16]	; (8008ed0 <std+0x44>)
 8008ebe:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	46c0      	nop			; (mov r8, r8)
 8008ec4:	080091c1 	.word	0x080091c1
 8008ec8:	080091e9 	.word	0x080091e9
 8008ecc:	08009221 	.word	0x08009221
 8008ed0:	0800924d 	.word	0x0800924d

08008ed4 <_cleanup_r>:
 8008ed4:	b510      	push	{r4, lr}
 8008ed6:	4902      	ldr	r1, [pc, #8]	; (8008ee0 <_cleanup_r+0xc>)
 8008ed8:	f000 f88c 	bl	8008ff4 <_fwalk_reent>
 8008edc:	bd10      	pop	{r4, pc}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	08008e35 	.word	0x08008e35

08008ee4 <__sfmoreglue>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	2568      	movs	r5, #104	; 0x68
 8008ee8:	1e4a      	subs	r2, r1, #1
 8008eea:	4355      	muls	r5, r2
 8008eec:	000e      	movs	r6, r1
 8008eee:	0029      	movs	r1, r5
 8008ef0:	3174      	adds	r1, #116	; 0x74
 8008ef2:	f7ff fb1d 	bl	8008530 <_malloc_r>
 8008ef6:	1e04      	subs	r4, r0, #0
 8008ef8:	d008      	beq.n	8008f0c <__sfmoreglue+0x28>
 8008efa:	2100      	movs	r1, #0
 8008efc:	002a      	movs	r2, r5
 8008efe:	6001      	str	r1, [r0, #0]
 8008f00:	6046      	str	r6, [r0, #4]
 8008f02:	300c      	adds	r0, #12
 8008f04:	60a0      	str	r0, [r4, #8]
 8008f06:	3268      	adds	r2, #104	; 0x68
 8008f08:	f7ff fab1 	bl	800846e <memset>
 8008f0c:	0020      	movs	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <__sinit>:
 8008f10:	6983      	ldr	r3, [r0, #24]
 8008f12:	b513      	push	{r0, r1, r4, lr}
 8008f14:	0004      	movs	r4, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d128      	bne.n	8008f6c <__sinit+0x5c>
 8008f1a:	6483      	str	r3, [r0, #72]	; 0x48
 8008f1c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008f1e:	6503      	str	r3, [r0, #80]	; 0x50
 8008f20:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <__sinit+0x60>)
 8008f22:	4a14      	ldr	r2, [pc, #80]	; (8008f74 <__sinit+0x64>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	6282      	str	r2, [r0, #40]	; 0x28
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	4298      	cmp	r0, r3
 8008f2c:	d101      	bne.n	8008f32 <__sinit+0x22>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6183      	str	r3, [r0, #24]
 8008f32:	0020      	movs	r0, r4
 8008f34:	f000 f820 	bl	8008f78 <__sfp>
 8008f38:	6060      	str	r0, [r4, #4]
 8008f3a:	0020      	movs	r0, r4
 8008f3c:	f000 f81c 	bl	8008f78 <__sfp>
 8008f40:	60a0      	str	r0, [r4, #8]
 8008f42:	0020      	movs	r0, r4
 8008f44:	f000 f818 	bl	8008f78 <__sfp>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	60e0      	str	r0, [r4, #12]
 8008f4c:	2104      	movs	r1, #4
 8008f4e:	6860      	ldr	r0, [r4, #4]
 8008f50:	f7ff ff9c 	bl	8008e8c <std>
 8008f54:	2201      	movs	r2, #1
 8008f56:	2109      	movs	r1, #9
 8008f58:	68a0      	ldr	r0, [r4, #8]
 8008f5a:	f7ff ff97 	bl	8008e8c <std>
 8008f5e:	2202      	movs	r2, #2
 8008f60:	2112      	movs	r1, #18
 8008f62:	68e0      	ldr	r0, [r4, #12]
 8008f64:	f7ff ff92 	bl	8008e8c <std>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	61a3      	str	r3, [r4, #24]
 8008f6c:	bd13      	pop	{r0, r1, r4, pc}
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	080095b4 	.word	0x080095b4
 8008f74:	08008ed5 	.word	0x08008ed5

08008f78 <__sfp>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	4b1c      	ldr	r3, [pc, #112]	; (8008fec <__sfp+0x74>)
 8008f7c:	0007      	movs	r7, r0
 8008f7e:	681e      	ldr	r6, [r3, #0]
 8008f80:	69b3      	ldr	r3, [r6, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d102      	bne.n	8008f8c <__sfp+0x14>
 8008f86:	0030      	movs	r0, r6
 8008f88:	f7ff ffc2 	bl	8008f10 <__sinit>
 8008f8c:	3648      	adds	r6, #72	; 0x48
 8008f8e:	68b4      	ldr	r4, [r6, #8]
 8008f90:	6873      	ldr	r3, [r6, #4]
 8008f92:	3b01      	subs	r3, #1
 8008f94:	d504      	bpl.n	8008fa0 <__sfp+0x28>
 8008f96:	6833      	ldr	r3, [r6, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <__sfp+0x34>
 8008f9c:	6836      	ldr	r6, [r6, #0]
 8008f9e:	e7f6      	b.n	8008f8e <__sfp+0x16>
 8008fa0:	220c      	movs	r2, #12
 8008fa2:	5ea5      	ldrsh	r5, [r4, r2]
 8008fa4:	2d00      	cmp	r5, #0
 8008fa6:	d00d      	beq.n	8008fc4 <__sfp+0x4c>
 8008fa8:	3468      	adds	r4, #104	; 0x68
 8008faa:	e7f2      	b.n	8008f92 <__sfp+0x1a>
 8008fac:	2104      	movs	r1, #4
 8008fae:	0038      	movs	r0, r7
 8008fb0:	f7ff ff98 	bl	8008ee4 <__sfmoreglue>
 8008fb4:	6030      	str	r0, [r6, #0]
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d1f0      	bne.n	8008f9c <__sfp+0x24>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	0004      	movs	r4, r0
 8008fbe:	603b      	str	r3, [r7, #0]
 8008fc0:	0020      	movs	r0, r4
 8008fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc4:	0020      	movs	r0, r4
 8008fc6:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <__sfp+0x78>)
 8008fc8:	6665      	str	r5, [r4, #100]	; 0x64
 8008fca:	6025      	str	r5, [r4, #0]
 8008fcc:	6065      	str	r5, [r4, #4]
 8008fce:	60a5      	str	r5, [r4, #8]
 8008fd0:	60e3      	str	r3, [r4, #12]
 8008fd2:	6125      	str	r5, [r4, #16]
 8008fd4:	6165      	str	r5, [r4, #20]
 8008fd6:	61a5      	str	r5, [r4, #24]
 8008fd8:	2208      	movs	r2, #8
 8008fda:	0029      	movs	r1, r5
 8008fdc:	305c      	adds	r0, #92	; 0x5c
 8008fde:	f7ff fa46 	bl	800846e <memset>
 8008fe2:	6365      	str	r5, [r4, #52]	; 0x34
 8008fe4:	63a5      	str	r5, [r4, #56]	; 0x38
 8008fe6:	64a5      	str	r5, [r4, #72]	; 0x48
 8008fe8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008fea:	e7e9      	b.n	8008fc0 <__sfp+0x48>
 8008fec:	080095b4 	.word	0x080095b4
 8008ff0:	ffff0001 	.word	0xffff0001

08008ff4 <_fwalk_reent>:
 8008ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff6:	0004      	movs	r4, r0
 8008ff8:	0007      	movs	r7, r0
 8008ffa:	2600      	movs	r6, #0
 8008ffc:	9101      	str	r1, [sp, #4]
 8008ffe:	3448      	adds	r4, #72	; 0x48
 8009000:	2c00      	cmp	r4, #0
 8009002:	d101      	bne.n	8009008 <_fwalk_reent+0x14>
 8009004:	0030      	movs	r0, r6
 8009006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	68a5      	ldr	r5, [r4, #8]
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	9b00      	ldr	r3, [sp, #0]
 8009010:	3b01      	subs	r3, #1
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	d501      	bpl.n	800901a <_fwalk_reent+0x26>
 8009016:	6824      	ldr	r4, [r4, #0]
 8009018:	e7f2      	b.n	8009000 <_fwalk_reent+0xc>
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d908      	bls.n	8009032 <_fwalk_reent+0x3e>
 8009020:	220e      	movs	r2, #14
 8009022:	5eab      	ldrsh	r3, [r5, r2]
 8009024:	3301      	adds	r3, #1
 8009026:	d004      	beq.n	8009032 <_fwalk_reent+0x3e>
 8009028:	0029      	movs	r1, r5
 800902a:	0038      	movs	r0, r7
 800902c:	9b01      	ldr	r3, [sp, #4]
 800902e:	4798      	blx	r3
 8009030:	4306      	orrs	r6, r0
 8009032:	3568      	adds	r5, #104	; 0x68
 8009034:	e7eb      	b.n	800900e <_fwalk_reent+0x1a>
	...

08009038 <__swhatbuf_r>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	000e      	movs	r6, r1
 800903c:	001d      	movs	r5, r3
 800903e:	230e      	movs	r3, #14
 8009040:	5ec9      	ldrsh	r1, [r1, r3]
 8009042:	b096      	sub	sp, #88	; 0x58
 8009044:	0014      	movs	r4, r2
 8009046:	2900      	cmp	r1, #0
 8009048:	da07      	bge.n	800905a <__swhatbuf_r+0x22>
 800904a:	2300      	movs	r3, #0
 800904c:	602b      	str	r3, [r5, #0]
 800904e:	89b3      	ldrh	r3, [r6, #12]
 8009050:	061b      	lsls	r3, r3, #24
 8009052:	d411      	bmi.n	8009078 <__swhatbuf_r+0x40>
 8009054:	2380      	movs	r3, #128	; 0x80
 8009056:	00db      	lsls	r3, r3, #3
 8009058:	e00f      	b.n	800907a <__swhatbuf_r+0x42>
 800905a:	466a      	mov	r2, sp
 800905c:	f000 f922 	bl	80092a4 <_fstat_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	dbf2      	blt.n	800904a <__swhatbuf_r+0x12>
 8009064:	22f0      	movs	r2, #240	; 0xf0
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	0212      	lsls	r2, r2, #8
 800906a:	4013      	ands	r3, r2
 800906c:	4a05      	ldr	r2, [pc, #20]	; (8009084 <__swhatbuf_r+0x4c>)
 800906e:	189b      	adds	r3, r3, r2
 8009070:	425a      	negs	r2, r3
 8009072:	4153      	adcs	r3, r2
 8009074:	602b      	str	r3, [r5, #0]
 8009076:	e7ed      	b.n	8009054 <__swhatbuf_r+0x1c>
 8009078:	2340      	movs	r3, #64	; 0x40
 800907a:	2000      	movs	r0, #0
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	b016      	add	sp, #88	; 0x58
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	ffffe000 	.word	0xffffe000

08009088 <__smakebuf_r>:
 8009088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800908a:	2602      	movs	r6, #2
 800908c:	898b      	ldrh	r3, [r1, #12]
 800908e:	0005      	movs	r5, r0
 8009090:	000c      	movs	r4, r1
 8009092:	4233      	tst	r3, r6
 8009094:	d006      	beq.n	80090a4 <__smakebuf_r+0x1c>
 8009096:	0023      	movs	r3, r4
 8009098:	3347      	adds	r3, #71	; 0x47
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	2301      	movs	r3, #1
 80090a0:	6163      	str	r3, [r4, #20]
 80090a2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80090a4:	ab01      	add	r3, sp, #4
 80090a6:	466a      	mov	r2, sp
 80090a8:	f7ff ffc6 	bl	8009038 <__swhatbuf_r>
 80090ac:	9900      	ldr	r1, [sp, #0]
 80090ae:	0007      	movs	r7, r0
 80090b0:	0028      	movs	r0, r5
 80090b2:	f7ff fa3d 	bl	8008530 <_malloc_r>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d108      	bne.n	80090cc <__smakebuf_r+0x44>
 80090ba:	220c      	movs	r2, #12
 80090bc:	5ea3      	ldrsh	r3, [r4, r2]
 80090be:	059a      	lsls	r2, r3, #22
 80090c0:	d4ef      	bmi.n	80090a2 <__smakebuf_r+0x1a>
 80090c2:	2203      	movs	r2, #3
 80090c4:	4393      	bics	r3, r2
 80090c6:	431e      	orrs	r6, r3
 80090c8:	81a6      	strh	r6, [r4, #12]
 80090ca:	e7e4      	b.n	8009096 <__smakebuf_r+0xe>
 80090cc:	4b0f      	ldr	r3, [pc, #60]	; (800910c <__smakebuf_r+0x84>)
 80090ce:	62ab      	str	r3, [r5, #40]	; 0x28
 80090d0:	2380      	movs	r3, #128	; 0x80
 80090d2:	89a2      	ldrh	r2, [r4, #12]
 80090d4:	6020      	str	r0, [r4, #0]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	9b00      	ldr	r3, [sp, #0]
 80090dc:	6120      	str	r0, [r4, #16]
 80090de:	6163      	str	r3, [r4, #20]
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00d      	beq.n	8009102 <__smakebuf_r+0x7a>
 80090e6:	230e      	movs	r3, #14
 80090e8:	5ee1      	ldrsh	r1, [r4, r3]
 80090ea:	0028      	movs	r0, r5
 80090ec:	f000 f8ec 	bl	80092c8 <_isatty_r>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d006      	beq.n	8009102 <__smakebuf_r+0x7a>
 80090f4:	2203      	movs	r2, #3
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	4393      	bics	r3, r2
 80090fa:	001a      	movs	r2, r3
 80090fc:	2301      	movs	r3, #1
 80090fe:	4313      	orrs	r3, r2
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	89a0      	ldrh	r0, [r4, #12]
 8009104:	4338      	orrs	r0, r7
 8009106:	81a0      	strh	r0, [r4, #12]
 8009108:	e7cb      	b.n	80090a2 <__smakebuf_r+0x1a>
 800910a:	46c0      	nop			; (mov r8, r8)
 800910c:	08008ed5 	.word	0x08008ed5

08009110 <memchr>:
 8009110:	b2c9      	uxtb	r1, r1
 8009112:	1882      	adds	r2, r0, r2
 8009114:	4290      	cmp	r0, r2
 8009116:	d101      	bne.n	800911c <memchr+0xc>
 8009118:	2000      	movs	r0, #0
 800911a:	4770      	bx	lr
 800911c:	7803      	ldrb	r3, [r0, #0]
 800911e:	428b      	cmp	r3, r1
 8009120:	d0fb      	beq.n	800911a <memchr+0xa>
 8009122:	3001      	adds	r0, #1
 8009124:	e7f6      	b.n	8009114 <memchr+0x4>

08009126 <__malloc_lock>:
 8009126:	4770      	bx	lr

08009128 <__malloc_unlock>:
 8009128:	4770      	bx	lr

0800912a <_raise_r>:
 800912a:	b570      	push	{r4, r5, r6, lr}
 800912c:	0004      	movs	r4, r0
 800912e:	000d      	movs	r5, r1
 8009130:	291f      	cmp	r1, #31
 8009132:	d904      	bls.n	800913e <_raise_r+0x14>
 8009134:	2316      	movs	r3, #22
 8009136:	6003      	str	r3, [r0, #0]
 8009138:	2001      	movs	r0, #1
 800913a:	4240      	negs	r0, r0
 800913c:	bd70      	pop	{r4, r5, r6, pc}
 800913e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009140:	2b00      	cmp	r3, #0
 8009142:	d004      	beq.n	800914e <_raise_r+0x24>
 8009144:	008a      	lsls	r2, r1, #2
 8009146:	189b      	adds	r3, r3, r2
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	2a00      	cmp	r2, #0
 800914c:	d108      	bne.n	8009160 <_raise_r+0x36>
 800914e:	0020      	movs	r0, r4
 8009150:	f000 f832 	bl	80091b8 <_getpid_r>
 8009154:	002a      	movs	r2, r5
 8009156:	0001      	movs	r1, r0
 8009158:	0020      	movs	r0, r4
 800915a:	f000 f81b 	bl	8009194 <_kill_r>
 800915e:	e7ed      	b.n	800913c <_raise_r+0x12>
 8009160:	2000      	movs	r0, #0
 8009162:	2a01      	cmp	r2, #1
 8009164:	d0ea      	beq.n	800913c <_raise_r+0x12>
 8009166:	1c51      	adds	r1, r2, #1
 8009168:	d103      	bne.n	8009172 <_raise_r+0x48>
 800916a:	2316      	movs	r3, #22
 800916c:	3001      	adds	r0, #1
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	e7e4      	b.n	800913c <_raise_r+0x12>
 8009172:	2400      	movs	r4, #0
 8009174:	0028      	movs	r0, r5
 8009176:	601c      	str	r4, [r3, #0]
 8009178:	4790      	blx	r2
 800917a:	0020      	movs	r0, r4
 800917c:	e7de      	b.n	800913c <_raise_r+0x12>
	...

08009180 <raise>:
 8009180:	b510      	push	{r4, lr}
 8009182:	4b03      	ldr	r3, [pc, #12]	; (8009190 <raise+0x10>)
 8009184:	0001      	movs	r1, r0
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	f7ff ffcf 	bl	800912a <_raise_r>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	2000000c 	.word	0x2000000c

08009194 <_kill_r>:
 8009194:	2300      	movs	r3, #0
 8009196:	b570      	push	{r4, r5, r6, lr}
 8009198:	4c06      	ldr	r4, [pc, #24]	; (80091b4 <_kill_r+0x20>)
 800919a:	0005      	movs	r5, r0
 800919c:	0008      	movs	r0, r1
 800919e:	0011      	movs	r1, r2
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	f7f8 fe2d 	bl	8001e00 <_kill>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d103      	bne.n	80091b2 <_kill_r+0x1e>
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d000      	beq.n	80091b2 <_kill_r+0x1e>
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	20000898 	.word	0x20000898

080091b8 <_getpid_r>:
 80091b8:	b510      	push	{r4, lr}
 80091ba:	f7f8 fe1b 	bl	8001df4 <_getpid>
 80091be:	bd10      	pop	{r4, pc}

080091c0 <__sread>:
 80091c0:	b570      	push	{r4, r5, r6, lr}
 80091c2:	000c      	movs	r4, r1
 80091c4:	250e      	movs	r5, #14
 80091c6:	5f49      	ldrsh	r1, [r1, r5]
 80091c8:	f000 f8a4 	bl	8009314 <_read_r>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	db03      	blt.n	80091d8 <__sread+0x18>
 80091d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80091d2:	181b      	adds	r3, r3, r0
 80091d4:	6563      	str	r3, [r4, #84]	; 0x54
 80091d6:	bd70      	pop	{r4, r5, r6, pc}
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	4a02      	ldr	r2, [pc, #8]	; (80091e4 <__sread+0x24>)
 80091dc:	4013      	ands	r3, r2
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	e7f9      	b.n	80091d6 <__sread+0x16>
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	ffffefff 	.word	0xffffefff

080091e8 <__swrite>:
 80091e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ea:	001f      	movs	r7, r3
 80091ec:	898b      	ldrh	r3, [r1, #12]
 80091ee:	0005      	movs	r5, r0
 80091f0:	000c      	movs	r4, r1
 80091f2:	0016      	movs	r6, r2
 80091f4:	05db      	lsls	r3, r3, #23
 80091f6:	d505      	bpl.n	8009204 <__swrite+0x1c>
 80091f8:	230e      	movs	r3, #14
 80091fa:	5ec9      	ldrsh	r1, [r1, r3]
 80091fc:	2200      	movs	r2, #0
 80091fe:	2302      	movs	r3, #2
 8009200:	f000 f874 	bl	80092ec <_lseek_r>
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	4a05      	ldr	r2, [pc, #20]	; (800921c <__swrite+0x34>)
 8009208:	0028      	movs	r0, r5
 800920a:	4013      	ands	r3, r2
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	0032      	movs	r2, r6
 8009210:	230e      	movs	r3, #14
 8009212:	5ee1      	ldrsh	r1, [r4, r3]
 8009214:	003b      	movs	r3, r7
 8009216:	f000 f81f 	bl	8009258 <_write_r>
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800921c:	ffffefff 	.word	0xffffefff

08009220 <__sseek>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	000c      	movs	r4, r1
 8009224:	250e      	movs	r5, #14
 8009226:	5f49      	ldrsh	r1, [r1, r5]
 8009228:	f000 f860 	bl	80092ec <_lseek_r>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	1c42      	adds	r2, r0, #1
 8009230:	d103      	bne.n	800923a <__sseek+0x1a>
 8009232:	4a05      	ldr	r2, [pc, #20]	; (8009248 <__sseek+0x28>)
 8009234:	4013      	ands	r3, r2
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	2280      	movs	r2, #128	; 0x80
 800923c:	0152      	lsls	r2, r2, #5
 800923e:	4313      	orrs	r3, r2
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6560      	str	r0, [r4, #84]	; 0x54
 8009244:	e7f8      	b.n	8009238 <__sseek+0x18>
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	ffffefff 	.word	0xffffefff

0800924c <__sclose>:
 800924c:	b510      	push	{r4, lr}
 800924e:	230e      	movs	r3, #14
 8009250:	5ec9      	ldrsh	r1, [r1, r3]
 8009252:	f000 f815 	bl	8009280 <_close_r>
 8009256:	bd10      	pop	{r4, pc}

08009258 <_write_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	0005      	movs	r5, r0
 800925c:	0008      	movs	r0, r1
 800925e:	0011      	movs	r1, r2
 8009260:	2200      	movs	r2, #0
 8009262:	4c06      	ldr	r4, [pc, #24]	; (800927c <_write_r+0x24>)
 8009264:	6022      	str	r2, [r4, #0]
 8009266:	001a      	movs	r2, r3
 8009268:	f7f8 fe03 	bl	8001e72 <_write>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d103      	bne.n	8009278 <_write_r+0x20>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d000      	beq.n	8009278 <_write_r+0x20>
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	bd70      	pop	{r4, r5, r6, pc}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	20000898 	.word	0x20000898

08009280 <_close_r>:
 8009280:	2300      	movs	r3, #0
 8009282:	b570      	push	{r4, r5, r6, lr}
 8009284:	4c06      	ldr	r4, [pc, #24]	; (80092a0 <_close_r+0x20>)
 8009286:	0005      	movs	r5, r0
 8009288:	0008      	movs	r0, r1
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	f7f8 fe0d 	bl	8001eaa <_close>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d103      	bne.n	800929c <_close_r+0x1c>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d000      	beq.n	800929c <_close_r+0x1c>
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	bd70      	pop	{r4, r5, r6, pc}
 800929e:	46c0      	nop			; (mov r8, r8)
 80092a0:	20000898 	.word	0x20000898

080092a4 <_fstat_r>:
 80092a4:	2300      	movs	r3, #0
 80092a6:	b570      	push	{r4, r5, r6, lr}
 80092a8:	4c06      	ldr	r4, [pc, #24]	; (80092c4 <_fstat_r+0x20>)
 80092aa:	0005      	movs	r5, r0
 80092ac:	0008      	movs	r0, r1
 80092ae:	0011      	movs	r1, r2
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	f7f8 fe04 	bl	8001ebe <_fstat>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	d103      	bne.n	80092c2 <_fstat_r+0x1e>
 80092ba:	6823      	ldr	r3, [r4, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d000      	beq.n	80092c2 <_fstat_r+0x1e>
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	20000898 	.word	0x20000898

080092c8 <_isatty_r>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b570      	push	{r4, r5, r6, lr}
 80092cc:	4c06      	ldr	r4, [pc, #24]	; (80092e8 <_isatty_r+0x20>)
 80092ce:	0005      	movs	r5, r0
 80092d0:	0008      	movs	r0, r1
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	f7f8 fe01 	bl	8001eda <_isatty>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d103      	bne.n	80092e4 <_isatty_r+0x1c>
 80092dc:	6823      	ldr	r3, [r4, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d000      	beq.n	80092e4 <_isatty_r+0x1c>
 80092e2:	602b      	str	r3, [r5, #0]
 80092e4:	bd70      	pop	{r4, r5, r6, pc}
 80092e6:	46c0      	nop			; (mov r8, r8)
 80092e8:	20000898 	.word	0x20000898

080092ec <_lseek_r>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	0005      	movs	r5, r0
 80092f0:	0008      	movs	r0, r1
 80092f2:	0011      	movs	r1, r2
 80092f4:	2200      	movs	r2, #0
 80092f6:	4c06      	ldr	r4, [pc, #24]	; (8009310 <_lseek_r+0x24>)
 80092f8:	6022      	str	r2, [r4, #0]
 80092fa:	001a      	movs	r2, r3
 80092fc:	f7f8 fdf6 	bl	8001eec <_lseek>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d103      	bne.n	800930c <_lseek_r+0x20>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d000      	beq.n	800930c <_lseek_r+0x20>
 800930a:	602b      	str	r3, [r5, #0]
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	20000898 	.word	0x20000898

08009314 <_read_r>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	0005      	movs	r5, r0
 8009318:	0008      	movs	r0, r1
 800931a:	0011      	movs	r1, r2
 800931c:	2200      	movs	r2, #0
 800931e:	4c06      	ldr	r4, [pc, #24]	; (8009338 <_read_r+0x24>)
 8009320:	6022      	str	r2, [r4, #0]
 8009322:	001a      	movs	r2, r3
 8009324:	f7f8 fd88 	bl	8001e38 <_read>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d103      	bne.n	8009334 <_read_r+0x20>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d000      	beq.n	8009334 <_read_r+0x20>
 8009332:	602b      	str	r3, [r5, #0]
 8009334:	bd70      	pop	{r4, r5, r6, pc}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	20000898 	.word	0x20000898

0800933c <_init>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009342:	bc08      	pop	{r3}
 8009344:	469e      	mov	lr, r3
 8009346:	4770      	bx	lr

08009348 <_fini>:
 8009348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800934e:	bc08      	pop	{r3}
 8009350:	469e      	mov	lr, r3
 8009352:	4770      	bx	lr
 8009354:	0000      	movs	r0, r0
	...

08009358 <__FLASH_Program_Fast_veneer>:
 8009358:	b401      	push	{r0}
 800935a:	4802      	ldr	r0, [pc, #8]	; (8009364 <__FLASH_Program_Fast_veneer+0xc>)
 800935c:	4684      	mov	ip, r0
 800935e:	bc01      	pop	{r0}
 8009360:	4760      	bx	ip
 8009362:	bf00      	nop
 8009364:	20000071 	.word	0x20000071

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <_impure_ptr>:
2000000c:	20000010                                ... 

20000010 <impure_data>:
20000010:	00000000 0800960c 0800962c 080095ec     ........,.......
	...

20000070 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000070:	b580      	push	{r7, lr}
20000072:	b088      	sub	sp, #32
20000074:	af00      	add	r7, sp, #0
20000076:	6078      	str	r0, [r7, #4]
20000078:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007a:	231f      	movs	r3, #31
2000007c:	18fb      	adds	r3, r7, r3
2000007e:	2200      	movs	r2, #0
20000080:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000082:	687b      	ldr	r3, [r7, #4]
20000084:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000086:	683b      	ldr	r3, [r7, #0]
20000088:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008a:	4b19      	ldr	r3, [pc, #100]	; (200000f0 <FLASH_Program_Fast+0x80>)
2000008c:	695a      	ldr	r2, [r3, #20]
2000008e:	4b18      	ldr	r3, [pc, #96]	; (200000f0 <FLASH_Program_Fast+0x80>)
20000090:	2180      	movs	r1, #128	; 0x80
20000092:	02c9      	lsls	r1, r1, #11
20000094:	430a      	orrs	r2, r1
20000096:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000098:	f3ef 8310 	mrs	r3, PRIMASK
2000009c:	60fb      	str	r3, [r7, #12]
  return(result);
2000009e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a2:	b672      	cpsid	i
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000a4:	e00f      	b.n	200000c6 <FLASH_Program_Fast+0x56>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000a6:	697a      	ldr	r2, [r7, #20]
200000a8:	69bb      	ldr	r3, [r7, #24]
200000aa:	6812      	ldr	r2, [r2, #0]
200000ac:	601a      	str	r2, [r3, #0]
    src += 4U;
200000ae:	697b      	ldr	r3, [r7, #20]
200000b0:	3304      	adds	r3, #4
200000b2:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000b4:	69bb      	ldr	r3, [r7, #24]
200000b6:	3304      	adds	r3, #4
200000b8:	61bb      	str	r3, [r7, #24]
    index++;
200000ba:	211f      	movs	r1, #31
200000bc:	187b      	adds	r3, r7, r1
200000be:	781a      	ldrb	r2, [r3, #0]
200000c0:	187b      	adds	r3, r7, r1
200000c2:	3201      	adds	r2, #1
200000c4:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000c6:	231f      	movs	r3, #31
200000c8:	18fb      	adds	r3, r7, r3
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	2b3f      	cmp	r3, #63	; 0x3f
200000ce:	d9ea      	bls.n	200000a6 <FLASH_Program_Fast+0x36>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	4b07      	ldr	r3, [pc, #28]	; (200000f0 <FLASH_Program_Fast+0x80>)
200000d4:	691a      	ldr	r2, [r3, #16]
200000d6:	2380      	movs	r3, #128	; 0x80
200000d8:	025b      	lsls	r3, r3, #9
200000da:	4013      	ands	r3, r2
200000dc:	d1f9      	bne.n	200000d2 <FLASH_Program_Fast+0x62>
200000de:	693b      	ldr	r3, [r7, #16]
200000e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e2:	68bb      	ldr	r3, [r7, #8]
200000e4:	f383 8810 	msr	PRIMASK, r3
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e8:	46c0      	nop			; (mov r8, r8)
200000ea:	46bd      	mov	sp, r7
200000ec:	b008      	add	sp, #32
200000ee:	bd80      	pop	{r7, pc}
200000f0:	40022000 	.word	0x40022000
